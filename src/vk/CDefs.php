<?php

declare(strict_types=1);

namespace iggyvolz\vulkan;

final class CDefs implements \Stringable
{
    /** @var list<string> */
    private array $cdefs = [];

    public function __toString()
    {
        return implode("\n", $this->cdefs);
    }

    public function __construct()
    {
        $this->cdefs[] = 'typedef int VkAttachmentLoadOp;';
        $this->cdefs[] = 'typedef int VkAttachmentStoreOp;';
        $this->cdefs[] = 'typedef int VkBlendFactor;';
        $this->cdefs[] = 'typedef int VkBlendOp;';
        $this->cdefs[] = 'typedef int VkBorderColor;';
        $this->cdefs[] = 'typedef int VkFramebufferCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkQueryPoolCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkRenderPassCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkSamplerCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkPipelineCacheHeaderVersion;';
        $this->cdefs[] = 'typedef int VkPipelineCacheCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkPipelineShaderStageCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkDescriptorSetLayoutCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkInstanceCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkDeviceQueueCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkBufferCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkBufferUsageFlagBits;';
        $this->cdefs[] = 'typedef int VkColorComponentFlagBits;';
        $this->cdefs[] = 'typedef int VkComponentSwizzle;';
        $this->cdefs[] = 'typedef int VkCommandPoolCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkCommandPoolResetFlagBits;';
        $this->cdefs[] = 'typedef int VkCommandBufferResetFlagBits;';
        $this->cdefs[] = 'typedef int VkCommandBufferLevel;';
        $this->cdefs[] = 'typedef int VkCommandBufferUsageFlagBits;';
        $this->cdefs[] = 'typedef int VkCompareOp;';
        $this->cdefs[] = 'typedef int VkCullModeFlagBits;';
        $this->cdefs[] = 'typedef int VkDescriptorType;';
        $this->cdefs[] = 'typedef int VkDeviceCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkDynamicState;';
        $this->cdefs[] = 'typedef int VkFenceCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkPolygonMode;';
        $this->cdefs[] = 'typedef int VkFormat;';
        $this->cdefs[] = 'typedef int VkFormatFeatureFlagBits;';
        $this->cdefs[] = 'typedef int VkFrontFace;';
        $this->cdefs[] = 'typedef int VkImageAspectFlagBits;';
        $this->cdefs[] = 'typedef int VkImageCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkImageLayout;';
        $this->cdefs[] = 'typedef int VkImageTiling;';
        $this->cdefs[] = 'typedef int VkImageType;';
        $this->cdefs[] = 'typedef int VkImageUsageFlagBits;';
        $this->cdefs[] = 'typedef int VkImageViewCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkImageViewType;';
        $this->cdefs[] = 'typedef int VkSharingMode;';
        $this->cdefs[] = 'typedef int VkIndexType;';
        $this->cdefs[] = 'typedef int VkLogicOp;';
        $this->cdefs[] = 'typedef int VkMemoryHeapFlagBits;';
        $this->cdefs[] = 'typedef int VkAccessFlagBits;';
        $this->cdefs[] = 'typedef int VkMemoryPropertyFlagBits;';
        $this->cdefs[] = 'typedef int VkPhysicalDeviceType;';
        $this->cdefs[] = 'typedef int VkPipelineBindPoint;';
        $this->cdefs[] = 'typedef int VkPipelineCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkPrimitiveTopology;';
        $this->cdefs[] = 'typedef int VkQueryControlFlagBits;';
        $this->cdefs[] = 'typedef int VkQueryPipelineStatisticFlagBits;';
        $this->cdefs[] = 'typedef int VkQueryResultFlagBits;';
        $this->cdefs[] = 'typedef int VkQueryType;';
        $this->cdefs[] = 'typedef int VkQueueFlagBits;';
        $this->cdefs[] = 'typedef int VkSubpassContents;';
        $this->cdefs[] = 'typedef int VkResult;';
        $this->cdefs[] = 'typedef int VkShaderStageFlagBits;';
        $this->cdefs[] = 'typedef int VkSparseMemoryBindFlagBits;';
        $this->cdefs[] = 'typedef int VkStencilFaceFlagBits;';
        $this->cdefs[] = 'typedef int VkStencilOp;';
        $this->cdefs[] = 'typedef int VkStructureType;';
        $this->cdefs[] = 'typedef int VkSystemAllocationScope;';
        $this->cdefs[] = 'typedef int VkInternalAllocationType;';
        $this->cdefs[] = 'typedef int VkSamplerAddressMode;';
        $this->cdefs[] = 'typedef int VkFilter;';
        $this->cdefs[] = 'typedef int VkSamplerMipmapMode;';
        $this->cdefs[] = 'typedef int VkVertexInputRate;';
        $this->cdefs[] = 'typedef int VkPipelineStageFlagBits;';
        $this->cdefs[] = 'typedef int VkSparseImageFormatFlagBits;';
        $this->cdefs[] = 'typedef int VkSampleCountFlagBits;';
        $this->cdefs[] = 'typedef int VkAttachmentDescriptionFlagBits;';
        $this->cdefs[] = 'typedef int VkDescriptorPoolCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkDependencyFlagBits;';
        $this->cdefs[] = 'typedef int VkObjectType;';
        $this->cdefs[] = 'typedef int VkEventCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkPipelineLayoutCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkSemaphoreCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkRayTracingInvocationReorderModeNV;';
        $this->cdefs[] = 'typedef int VkIndirectCommandsLayoutUsageFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkIndirectCommandsTokenTypeNV;';
        $this->cdefs[] = 'typedef int VkIndirectStateFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkPrivateDataSlotCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkDescriptorUpdateTemplateType;';
        $this->cdefs[] = 'typedef int VkViewportCoordinateSwizzleNV;';
        $this->cdefs[] = 'typedef int VkDiscardRectangleModeEXT;';
        $this->cdefs[] = 'typedef int VkSubpassDescriptionFlagBits;';
        $this->cdefs[] = 'typedef int VkPointClippingBehavior;';
        $this->cdefs[] = 'typedef int VkCoverageModulationModeNV;';
        $this->cdefs[] = 'typedef int VkCoverageReductionModeNV;';
        $this->cdefs[] = 'typedef int VkValidationCacheHeaderVersionEXT;';
        $this->cdefs[] = 'typedef int VkShaderInfoTypeAMD;';
        $this->cdefs[] = 'typedef int VkQueueGlobalPriorityKHR;';
        $this->cdefs[] = 'typedef int VkTimeDomainEXT;';
        $this->cdefs[] = 'typedef int VkConservativeRasterizationModeEXT;';
        $this->cdefs[] = 'typedef int VkResolveModeFlagBits;';
        $this->cdefs[] = 'typedef int VkDescriptorBindingFlagBits;';
        $this->cdefs[] = 'typedef int VkConditionalRenderingFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkSemaphoreType;';
        $this->cdefs[] = 'typedef int VkGeometryFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkGeometryInstanceFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkBuildAccelerationStructureFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkAccelerationStructureCreateFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkBuildAccelerationStructureModeKHR;';
        $this->cdefs[] = 'typedef int VkCopyAccelerationStructureModeKHR;';
        $this->cdefs[] = 'typedef int VkAccelerationStructureTypeKHR;';
        $this->cdefs[] = 'typedef int VkGeometryTypeKHR;';
        $this->cdefs[] = 'typedef int VkRayTracingShaderGroupTypeKHR;';
        $this->cdefs[] = 'typedef int VkAccelerationStructureMemoryRequirementsTypeNV;';
        $this->cdefs[] = 'typedef int VkAccelerationStructureBuildTypeKHR;';
        $this->cdefs[] = 'typedef int VkAccelerationStructureCompatibilityKHR;';
        $this->cdefs[] = 'typedef int VkShaderGroupShaderKHR;';
        $this->cdefs[] = 'typedef int VkMemoryOverallocationBehaviorAMD;';
        $this->cdefs[] = 'typedef int VkDeviceDiagnosticsConfigFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkPipelineCreationFeedbackFlagBits;';
        $this->cdefs[] = 'typedef int VkPerformanceCounterScopeKHR;';
        $this->cdefs[] = 'typedef int VkPerformanceCounterUnitKHR;';
        $this->cdefs[] = 'typedef int VkPerformanceCounterStorageKHR;';
        $this->cdefs[] = 'typedef int VkPerformanceCounterDescriptionFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkAcquireProfilingLockFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkSemaphoreWaitFlagBits;';
        $this->cdefs[] = 'typedef int VkPerformanceConfigurationTypeINTEL;';
        $this->cdefs[] = 'typedef int VkQueryPoolSamplingModeINTEL;';
        $this->cdefs[] = 'typedef int VkPerformanceOverrideTypeINTEL;';
        $this->cdefs[] = 'typedef int VkPerformanceParameterTypeINTEL;';
        $this->cdefs[] = 'typedef int VkPerformanceValueTypeINTEL;';
        $this->cdefs[] = 'typedef int VkLineRasterizationModeEXT;';
        $this->cdefs[] = 'typedef int VkShaderModuleCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkPipelineCompilerControlFlagBitsAMD;';
        $this->cdefs[] = 'typedef int VkShaderCorePropertiesFlagBitsAMD;';
        $this->cdefs[] = 'typedef int VkRefreshObjectFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkFaultLevel;';
        $this->cdefs[] = 'typedef int VkFaultType;';
        $this->cdefs[] = 'typedef int VkFaultQueryBehavior;';
        $this->cdefs[] = 'typedef int VkPipelineMatchControl;';
        $this->cdefs[] = 'typedef int VkSciSyncClientTypeNV;';
        $this->cdefs[] = 'typedef int VkSciSyncPrimitiveTypeNV;';
        $this->cdefs[] = 'typedef int VkToolPurposeFlagBits;';
        $this->cdefs[] = 'typedef int VkFragmentShadingRateNV;';
        $this->cdefs[] = 'typedef int VkFragmentShadingRateTypeNV;';
        $this->cdefs[] = 'typedef int VkSubpassMergeStatusEXT;';
        $this->cdefs[] = 'typedef int VkAccessFlagBits2;';
        $this->cdefs[] = 'typedef int VkPipelineStageFlagBits2;';
        $this->cdefs[] = 'typedef int VkProvokingVertexModeEXT;';
        $this->cdefs[] = 'typedef int VkPipelineCacheValidationVersion;';
        $this->cdefs[] = 'typedef int VkImageFormatConstraintsFlagBitsFUCHSIA;';
        $this->cdefs[] = 'typedef int VkHostImageCopyFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkImageConstraintsInfoFlagBitsFUCHSIA;';
        $this->cdefs[] = 'typedef int VkFormatFeatureFlagBits2;';
        $this->cdefs[] = 'typedef int VkRenderingFlagBits;';
        $this->cdefs[] = 'typedef int VkPipelineDepthStencilStateCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkPipelineColorBlendStateCreateFlagBits;';
        $this->cdefs[] = 'typedef int VkImageCompressionFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkImageCompressionFixedRateFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkExportMetalObjectTypeFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkPipelineRobustnessBufferBehaviorEXT;';
        $this->cdefs[] = 'typedef int VkPipelineRobustnessImageBehaviorEXT;';
        $this->cdefs[] = 'typedef int VkDeviceAddressBindingFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkDeviceAddressBindingTypeEXT;';
        $this->cdefs[] = 'typedef int VkMicromapTypeEXT;';
        $this->cdefs[] = 'typedef int VkBuildMicromapModeEXT;';
        $this->cdefs[] = 'typedef int VkCopyMicromapModeEXT;';
        $this->cdefs[] = 'typedef int VkBuildMicromapFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkMicromapCreateFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkOpacityMicromapFormatEXT;';
        $this->cdefs[] = 'typedef int VkOpacityMicromapSpecialIndexEXT;';
        $this->cdefs[] = 'typedef int VkDeviceFaultVendorBinaryHeaderVersionEXT;';
        $this->cdefs[] = 'typedef int VkFrameBoundaryFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkMemoryDecompressionMethodFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkDepthBiasRepresentationEXT;';
        $this->cdefs[] = 'typedef int VkDirectDriverLoadingModeLUNARG;';
        $this->cdefs[] = 'typedef int VkPipelineCreateFlagBits2KHR;';
        $this->cdefs[] = 'typedef int VkBufferUsageFlagBits2KHR;';
        $this->cdefs[] = 'typedef int VkDisplacementMicromapFormatNV;';
        $this->cdefs[] = 'typedef int VkShaderCreateFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkShaderCodeTypeEXT;';
        $this->cdefs[] = 'typedef int VkScopeKHR;';
        $this->cdefs[] = 'typedef int VkComponentTypeKHR;';
        $this->cdefs[] = 'typedef int VkCubicFilterWeightsQCOM;';
        $this->cdefs[] = 'typedef int VkBlockMatchWindowCompareModeQCOM;';
        $this->cdefs[] = 'typedef int VkLayeredDriverUnderlyingApiMSFT;';
        $this->cdefs[] = 'typedef int VkColorSpaceKHR;';
        $this->cdefs[] = 'typedef int VkCompositeAlphaFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkDisplayPlaneAlphaFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkPresentModeKHR;';
        $this->cdefs[] = 'typedef int VkSurfaceTransformFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkDebugReportFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkDebugReportObjectTypeEXT;';
        $this->cdefs[] = 'typedef int VkDeviceMemoryReportEventTypeEXT;';
        $this->cdefs[] = 'typedef int VkRasterizationOrderAMD;';
        $this->cdefs[] = 'typedef int VkExternalMemoryHandleTypeFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkExternalMemoryFeatureFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkValidationCheckEXT;';
        $this->cdefs[] = 'typedef int VkValidationFeatureEnableEXT;';
        $this->cdefs[] = 'typedef int VkValidationFeatureDisableEXT;';
        $this->cdefs[] = 'typedef int VkExternalMemoryHandleTypeFlagBits;';
        $this->cdefs[] = 'typedef int VkExternalMemoryFeatureFlagBits;';
        $this->cdefs[] = 'typedef int VkExternalSemaphoreHandleTypeFlagBits;';
        $this->cdefs[] = 'typedef int VkExternalSemaphoreFeatureFlagBits;';
        $this->cdefs[] = 'typedef int VkSemaphoreImportFlagBits;';
        $this->cdefs[] = 'typedef int VkExternalFenceHandleTypeFlagBits;';
        $this->cdefs[] = 'typedef int VkExternalFenceFeatureFlagBits;';
        $this->cdefs[] = 'typedef int VkFenceImportFlagBits;';
        $this->cdefs[] = 'typedef int VkSurfaceCounterFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkDisplayPowerStateEXT;';
        $this->cdefs[] = 'typedef int VkDeviceEventTypeEXT;';
        $this->cdefs[] = 'typedef int VkDisplayEventTypeEXT;';
        $this->cdefs[] = 'typedef int VkPeerMemoryFeatureFlagBits;';
        $this->cdefs[] = 'typedef int VkMemoryAllocateFlagBits;';
        $this->cdefs[] = 'typedef int VkDeviceGroupPresentModeFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkSwapchainCreateFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkSubgroupFeatureFlagBits;';
        $this->cdefs[] = 'typedef int VkTessellationDomainOrigin;';
        $this->cdefs[] = 'typedef int VkSamplerYcbcrModelConversion;';
        $this->cdefs[] = 'typedef int VkSamplerYcbcrRange;';
        $this->cdefs[] = 'typedef int VkChromaLocation;';
        $this->cdefs[] = 'typedef int VkSamplerReductionMode;';
        $this->cdefs[] = 'typedef int VkBlendOverlapEXT;';
        $this->cdefs[] = 'typedef int VkDebugUtilsMessageSeverityFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkDebugUtilsMessageTypeFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkFullScreenExclusiveEXT;';
        $this->cdefs[] = 'typedef int VkShaderFloatControlsIndependence;';
        $this->cdefs[] = 'typedef int VkSwapchainImageUsageFlagBitsANDROID;';
        $this->cdefs[] = 'typedef int VkFragmentShadingRateCombinerOpKHR;';
        $this->cdefs[] = 'typedef int VkSubmitFlagBits;';
        $this->cdefs[] = 'typedef int VkGraphicsPipelineLibraryFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkOpticalFlowGridSizeFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkOpticalFlowUsageFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkOpticalFlowPerformanceLevelNV;';
        $this->cdefs[] = 'typedef int VkOpticalFlowSessionBindingPointNV;';
        $this->cdefs[] = 'typedef int VkOpticalFlowSessionCreateFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkOpticalFlowExecuteFlagBitsNV;';
        $this->cdefs[] = 'typedef int VkDeviceFaultAddressTypeEXT;';
        $this->cdefs[] = 'typedef int VkPresentScalingFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkPresentGravityFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkLatencyMarkerNV;';
        $this->cdefs[] = 'typedef int VkOutOfBandQueueTypeNV;';
        $this->cdefs[] = 'typedef int VkVendorId;';
        $this->cdefs[] = 'typedef int VkDriverId;';
        $this->cdefs[] = 'typedef int VkShadingRatePaletteEntryNV;';
        $this->cdefs[] = 'typedef int VkCoarseSampleOrderTypeNV;';
        $this->cdefs[] = 'typedef int VkPipelineExecutableStatisticFormatKHR;';
        $this->cdefs[] = 'typedef int VkVideoCodecOperationFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoChromaSubsamplingFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoComponentBitDepthFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoCapabilityFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoSessionCreateFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoCodingControlFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkQueryResultStatusKHR;';
        $this->cdefs[] = 'typedef int VkVideoDecodeUsageFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoDecodeCapabilityFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoDecodeH264PictureLayoutFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoEncodeUsageFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoEncodeContentFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoEncodeTuningModeKHR;';
        $this->cdefs[] = 'typedef int VkVideoEncodeCapabilityFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoEncodeFeedbackFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoEncodeRateControlModeFlagBitsKHR;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH264CapabilityFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH264StdFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH264RateControlFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH265CapabilityFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH265StdFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH265RateControlFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH265CtbSizeFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkVideoEncodeH265TransformBlockSizeFlagBitsEXT;';
        $this->cdefs[] = 'typedef int VkAccelerationStructureMotionInstanceTypeNV;';
        $this->cdefs[] = 'typedef void* VkInstance;';
        $this->cdefs[] = 'typedef void* VkPhysicalDevice;';
        $this->cdefs[] = 'typedef void* VkDevice;';
        $this->cdefs[] = 'typedef void* VkQueue;';
        $this->cdefs[] = 'typedef void* VkCommandBuffer;';
        $this->cdefs[] = 'typedef void* VkDeviceMemory;';
        $this->cdefs[] = 'typedef void* VkCommandPool;';
        $this->cdefs[] = 'typedef void* VkBuffer;';
        $this->cdefs[] = 'typedef void* VkBufferView;';
        $this->cdefs[] = 'typedef void* VkImage;';
        $this->cdefs[] = 'typedef void* VkImageView;';
        $this->cdefs[] = 'typedef void* VkShaderModule;';
        $this->cdefs[] = 'typedef void* VkPipeline;';
        $this->cdefs[] = 'typedef void* VkPipelineLayout;';
        $this->cdefs[] = 'typedef void* VkSampler;';
        $this->cdefs[] = 'typedef void* VkDescriptorSet;';
        $this->cdefs[] = 'typedef void* VkDescriptorSetLayout;';
        $this->cdefs[] = 'typedef void* VkDescriptorPool;';
        $this->cdefs[] = 'typedef void* VkFence;';
        $this->cdefs[] = 'typedef void* VkSemaphore;';
        $this->cdefs[] = 'typedef void* VkEvent;';
        $this->cdefs[] = 'typedef void* VkQueryPool;';
        $this->cdefs[] = 'typedef void* VkFramebuffer;';
        $this->cdefs[] = 'typedef void* VkRenderPass;';
        $this->cdefs[] = 'typedef void* VkPipelineCache;';
        $this->cdefs[] = 'typedef void* VkIndirectCommandsLayoutNV;';
        $this->cdefs[] = 'typedef void* VkDescriptorUpdateTemplate;';
        $this->cdefs[] = 'typedef void* VkDescriptorUpdateTemplateKHR;';
        $this->cdefs[] = 'typedef void* VkSamplerYcbcrConversion;';
        $this->cdefs[] = 'typedef void* VkSamplerYcbcrConversionKHR;';
        $this->cdefs[] = 'typedef void* VkValidationCacheEXT;';
        $this->cdefs[] = 'typedef void* VkAccelerationStructureKHR;';
        $this->cdefs[] = 'typedef void* VkAccelerationStructureNV;';
        $this->cdefs[] = 'typedef void* VkPerformanceConfigurationINTEL;';
        $this->cdefs[] = 'typedef void* VkBufferCollectionFUCHSIA;';
        $this->cdefs[] = 'typedef void* VkDeferredOperationKHR;';
        $this->cdefs[] = 'typedef void* VkPrivateDataSlot;';
        $this->cdefs[] = 'typedef void* VkPrivateDataSlotEXT;';
        $this->cdefs[] = 'typedef void* VkCuModuleNVX;';
        $this->cdefs[] = 'typedef void* VkCuFunctionNVX;';
        $this->cdefs[] = 'typedef void* VkOpticalFlowSessionNV;';
        $this->cdefs[] = 'typedef void* VkMicromapEXT;';
        $this->cdefs[] = 'typedef void* VkShaderEXT;';
        $this->cdefs[] = 'typedef void* VkDisplayKHR;';
        $this->cdefs[] = 'typedef void* VkDisplayModeKHR;';
        $this->cdefs[] = 'typedef void* VkSurfaceKHR;';
        $this->cdefs[] = 'typedef void* VkSwapchainKHR;';
        $this->cdefs[] = 'typedef void* VkDebugReportCallbackEXT;';
        $this->cdefs[] = 'typedef void* VkDebugUtilsMessengerEXT;';
        $this->cdefs[] = 'typedef void* VkVideoSessionKHR;';
        $this->cdefs[] = 'typedef void* VkVideoSessionParametersKHR;';
        $this->cdefs[] = 'typedef void* VkSemaphoreSciSyncPoolNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;} VkBaseOutStructure;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;} VkBaseInStructure;';
        $this->cdefs[] = 'typedef struct {int32_t x ;int32_t y ;} VkOffset2D;';
        $this->cdefs[] = 'typedef struct {int32_t x ;int32_t y ;int32_t z ;} VkOffset3D;';
        $this->cdefs[] = 'typedef struct {uint32_t width ;uint32_t height ;} VkExtent2D;';
        $this->cdefs[] = 'typedef struct {uint32_t width ;uint32_t height ;uint32_t depth ;} VkExtent3D;';
        $this->cdefs[] = 'typedef struct {float x ;float y ;float width ;float height ;float minDepth ;float maxDepth ;} VkViewport;';
        $this->cdefs[] = 'typedef struct {VkOffset2D offset ;VkExtent2D extent ;} VkRect2D;';
        $this->cdefs[] = 'typedef struct {VkRect2D rect ;uint32_t baseArrayLayer ;uint32_t layerCount ;} VkClearRect;';
        $this->cdefs[] = 'typedef struct {VkComponentSwizzle r ;VkComponentSwizzle g ;VkComponentSwizzle b ;VkComponentSwizzle a ;} VkComponentMapping;';
        $this->cdefs[] = 'typedef struct {uint32_t apiVersion ;uint32_t driverVersion ;uint32_t vendorID ;uint32_t deviceID ;VkPhysicalDeviceType deviceType ;char deviceName [256];uint8_t pipelineCacheUUID [16];void* limits ;void* sparseProperties ;} VkPhysicalDeviceProperties;';
        $this->cdefs[] = 'typedef struct {char extensionName [256];uint32_t specVersion ;} VkExtensionProperties;';
        $this->cdefs[] = 'typedef struct {char layerName [256];uint32_t specVersion ;uint32_t implementationVersion ;char description [256];} VkLayerProperties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;const char* pApplicationName ;uint32_t applicationVersion ;const char* pEngineName ;uint32_t engineVersion ;uint32_t apiVersion ;} VkApplicationInfo;';
        $this->cdefs[] = 'typedef struct {void* pUserData ;void* pfnAllocation ;void* pfnReallocation ;void* pfnFree ;void* pfnInternalAllocation ;void* pfnInternalFree ;} VkAllocationCallbacks;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceQueueCreateFlags flags ;uint32_t queueFamilyIndex ;uint32_t queueCount ;void* pQueuePriorities ;} VkDeviceQueueCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceCreateFlags flags ;uint32_t queueCreateInfoCount ;VkDeviceQueueCreateInfo* pQueueCreateInfos ;uint32_t enabledLayerCount ;void* ppEnabledLayerNames ;uint32_t enabledExtensionCount ;void* ppEnabledExtensionNames ;void* pEnabledFeatures ;} VkDeviceCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkInstanceCreateFlags flags ;VkApplicationInfo* pApplicationInfo ;uint32_t enabledLayerCount ;void* ppEnabledLayerNames ;uint32_t enabledExtensionCount ;void* ppEnabledExtensionNames ;} VkInstanceCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkQueueFlags queueFlags ;uint32_t queueCount ;uint32_t timestampValidBits ;VkExtent3D minImageTransferGranularity ;} VkQueueFamilyProperties;';
        $this->cdefs[] = 'typedef struct {uint32_t memoryTypeCount ;void* memoryTypes ;uint32_t memoryHeapCount ;void* memoryHeaps ;} VkPhysicalDeviceMemoryProperties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t allocationSize ;uint32_t memoryTypeIndex ;} VkMemoryAllocateInfo;';
        $this->cdefs[] = 'typedef struct {uint64_t size ;uint64_t alignment ;uint32_t memoryTypeBits ;} VkMemoryRequirements;';
        $this->cdefs[] = 'typedef struct {VkImageAspectFlags aspectMask ;VkExtent3D imageGranularity ;VkSparseImageFormatFlags flags ;} VkSparseImageFormatProperties;';
        $this->cdefs[] = 'typedef struct {VkSparseImageFormatProperties formatProperties ;uint32_t imageMipTailFirstLod ;uint64_t imageMipTailSize ;uint64_t imageMipTailOffset ;uint64_t imageMipTailStride ;} VkSparseImageMemoryRequirements;';
        $this->cdefs[] = 'typedef struct {VkMemoryPropertyFlags propertyFlags ;uint32_t heapIndex ;} VkMemoryType;';
        $this->cdefs[] = 'typedef struct {uint64_t size ;VkMemoryHeapFlags flags ;} VkMemoryHeap;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;uint64_t offset ;uint64_t size ;} VkMappedMemoryRange;';
        $this->cdefs[] = 'typedef struct {VkFormatFeatureFlags linearTilingFeatures ;VkFormatFeatureFlags optimalTilingFeatures ;VkFormatFeatureFlags bufferFeatures ;} VkFormatProperties;';
        $this->cdefs[] = 'typedef struct {VkExtent3D maxExtent ;uint32_t maxMipLevels ;uint32_t maxArrayLayers ;VkSampleCountFlags sampleCounts ;uint64_t maxResourceSize ;} VkImageFormatProperties;';
        $this->cdefs[] = 'typedef struct {VkBuffer buffer ;uint64_t offset ;uint64_t range ;} VkDescriptorBufferInfo;';
        $this->cdefs[] = 'typedef struct {VkSampler sampler ;VkImageView imageView ;VkImageLayout imageLayout ;} VkDescriptorImageInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSet dstSet ;uint32_t dstBinding ;uint32_t dstArrayElement ;uint32_t descriptorCount ;VkDescriptorType descriptorType ;VkDescriptorImageInfo* pImageInfo ;VkDescriptorBufferInfo* pBufferInfo ;VkBufferView* pTexelBufferView ;} VkWriteDescriptorSet;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSet srcSet ;uint32_t srcBinding ;uint32_t srcArrayElement ;VkDescriptorSet dstSet ;uint32_t dstBinding ;uint32_t dstArrayElement ;uint32_t descriptorCount ;} VkCopyDescriptorSet;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferUsageFlags2KHR usage ;} VkBufferUsageFlags2CreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateFlags flags ;uint64_t size ;VkBufferUsageFlags usage ;VkSharingMode sharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;} VkBufferCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferViewCreateFlags flags ;VkBuffer buffer ;VkFormat format ;uint64_t offset ;uint64_t range ;} VkBufferViewCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkImageAspectFlags aspectMask ;uint32_t mipLevel ;uint32_t arrayLayer ;} VkImageSubresource;';
        $this->cdefs[] = 'typedef struct {VkImageAspectFlags aspectMask ;uint32_t mipLevel ;uint32_t baseArrayLayer ;uint32_t layerCount ;} VkImageSubresourceLayers;';
        $this->cdefs[] = 'typedef struct {VkImageAspectFlags aspectMask ;uint32_t baseMipLevel ;uint32_t levelCount ;uint32_t baseArrayLayer ;uint32_t layerCount ;} VkImageSubresourceRange;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;} VkMemoryBarrier;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;} VkBufferMemoryBarrier;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;VkImageLayout oldLayout ;VkImageLayout newLayout ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkImage image ;VkImageSubresourceRange subresourceRange ;} VkImageMemoryBarrier;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateFlags flags ;VkImageType imageType ;VkFormat format ;VkExtent3D extent ;uint32_t mipLevels ;uint32_t arrayLayers ;VkSampleCountFlagBits samples ;VkImageTiling tiling ;VkImageUsageFlags usage ;VkSharingMode sharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;VkImageLayout initialLayout ;} VkImageCreateInfo;';
        $this->cdefs[] = 'typedef struct {uint64_t offset ;uint64_t size ;uint64_t rowPitch ;uint64_t arrayPitch ;uint64_t depthPitch ;} VkSubresourceLayout;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageViewCreateFlags flags ;VkImage image ;VkImageViewType viewType ;VkFormat format ;VkComponentMapping components ;VkImageSubresourceRange subresourceRange ;} VkImageViewCreateInfo;';
        $this->cdefs[] = 'typedef struct {uint64_t srcOffset ;uint64_t dstOffset ;uint64_t size ;} VkBufferCopy;';
        $this->cdefs[] = 'typedef struct {uint64_t resourceOffset ;uint64_t size ;VkDeviceMemory memory ;uint64_t memoryOffset ;VkSparseMemoryBindFlags flags ;} VkSparseMemoryBind;';
        $this->cdefs[] = 'typedef struct {VkImageSubresource subresource ;VkOffset3D offset ;VkExtent3D extent ;VkDeviceMemory memory ;uint64_t memoryOffset ;VkSparseMemoryBindFlags flags ;} VkSparseImageMemoryBind;';
        $this->cdefs[] = 'typedef struct {VkBuffer buffer ;uint32_t bindCount ;VkSparseMemoryBind* pBinds ;} VkSparseBufferMemoryBindInfo;';
        $this->cdefs[] = 'typedef struct {VkImage image ;uint32_t bindCount ;VkSparseMemoryBind* pBinds ;} VkSparseImageOpaqueMemoryBindInfo;';
        $this->cdefs[] = 'typedef struct {VkImage image ;uint32_t bindCount ;VkSparseImageMemoryBind* pBinds ;} VkSparseImageMemoryBindInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;VkSemaphore* pWaitSemaphores ;uint32_t bufferBindCount ;VkSparseBufferMemoryBindInfo* pBufferBinds ;uint32_t imageOpaqueBindCount ;VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds ;uint32_t imageBindCount ;VkSparseImageMemoryBindInfo* pImageBinds ;uint32_t signalSemaphoreCount ;VkSemaphore* pSignalSemaphores ;} VkBindSparseInfo;';
        $this->cdefs[] = 'typedef struct {VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageCopy;';
        $this->cdefs[] = 'typedef struct {VkImageSubresourceLayers srcSubresource ;void* srcOffsets ;VkImageSubresourceLayers dstSubresource ;void* dstOffsets ;} VkImageBlit;';
        $this->cdefs[] = 'typedef struct {uint64_t bufferOffset ;uint32_t bufferRowLength ;uint32_t bufferImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkBufferImageCopy;';
        $this->cdefs[] = 'typedef struct {uint64_t srcAddress ;uint64_t dstAddress ;uint64_t size ;} VkCopyMemoryIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {uint64_t srcAddress ;uint32_t bufferRowLength ;uint32_t bufferImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkCopyMemoryToImageIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageResolve;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkShaderModuleCreateFlags flags ;size_t codeSize ;uint32_t* pCode ;} VkShaderModuleCreateInfo;';
        $this->cdefs[] = 'typedef struct {uint32_t binding ;VkDescriptorType descriptorType ;uint32_t descriptorCount ;VkShaderStageFlags stageFlags ;VkSampler* pImmutableSamplers ;} VkDescriptorSetLayoutBinding;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSetLayoutCreateFlags flags ;uint32_t bindingCount ;VkDescriptorSetLayoutBinding* pBindings ;} VkDescriptorSetLayoutCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkDescriptorType type ;uint32_t descriptorCount ;} VkDescriptorPoolSize;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorPoolCreateFlags flags ;uint32_t maxSets ;uint32_t poolSizeCount ;VkDescriptorPoolSize* pPoolSizes ;} VkDescriptorPoolCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorPool descriptorPool ;uint32_t descriptorSetCount ;VkDescriptorSetLayout* pSetLayouts ;} VkDescriptorSetAllocateInfo;';
        $this->cdefs[] = 'typedef struct {uint32_t constantID ;uint32_t offset ;size_t size ;} VkSpecializationMapEntry;';
        $this->cdefs[] = 'typedef struct {uint32_t mapEntryCount ;VkSpecializationMapEntry* pMapEntries ;size_t dataSize ;void* pData ;} VkSpecializationInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineShaderStageCreateFlags flags ;VkShaderStageFlagBits stage ;VkShaderModule module ;const char* pName ;VkSpecializationInfo* pSpecializationInfo ;} VkPipelineShaderStageCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;VkPipelineShaderStageCreateInfo stage ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkComputePipelineCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t deviceAddress ;uint64_t size ;uint64_t pipelineDeviceAddressCaptureReplay ;} VkComputePipelineIndirectBufferInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags2KHR flags ;} VkPipelineCreateFlags2CreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {uint32_t binding ;uint32_t stride ;VkVertexInputRate inputRate ;} VkVertexInputBindingDescription;';
        $this->cdefs[] = 'typedef struct {uint32_t location ;uint32_t binding ;VkFormat format ;uint32_t offset ;} VkVertexInputAttributeDescription;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineVertexInputStateCreateFlags flags ;uint32_t vertexBindingDescriptionCount ;VkVertexInputBindingDescription* pVertexBindingDescriptions ;uint32_t vertexAttributeDescriptionCount ;VkVertexInputAttributeDescription* pVertexAttributeDescriptions ;} VkPipelineVertexInputStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineInputAssemblyStateCreateFlags flags ;VkPrimitiveTopology topology ;uint32_t primitiveRestartEnable ;} VkPipelineInputAssemblyStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineTessellationStateCreateFlags flags ;uint32_t patchControlPoints ;} VkPipelineTessellationStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineViewportStateCreateFlags flags ;uint32_t viewportCount ;VkViewport* pViewports ;uint32_t scissorCount ;VkRect2D* pScissors ;} VkPipelineViewportStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationStateCreateFlags flags ;uint32_t depthClampEnable ;uint32_t rasterizerDiscardEnable ;VkPolygonMode polygonMode ;VkCullModeFlags cullMode ;VkFrontFace frontFace ;uint32_t depthBiasEnable ;float depthBiasConstantFactor ;float depthBiasClamp ;float depthBiasSlopeFactor ;float lineWidth ;} VkPipelineRasterizationStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineMultisampleStateCreateFlags flags ;VkSampleCountFlagBits rasterizationSamples ;uint32_t sampleShadingEnable ;float minSampleShading ;void* pSampleMask ;uint32_t alphaToCoverageEnable ;uint32_t alphaToOneEnable ;} VkPipelineMultisampleStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {uint32_t blendEnable ;VkBlendFactor srcColorBlendFactor ;VkBlendFactor dstColorBlendFactor ;VkBlendOp colorBlendOp ;VkBlendFactor srcAlphaBlendFactor ;VkBlendFactor dstAlphaBlendFactor ;VkBlendOp alphaBlendOp ;VkColorComponentFlags colorWriteMask ;} VkPipelineColorBlendAttachmentState;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineColorBlendStateCreateFlags flags ;uint32_t logicOpEnable ;VkLogicOp logicOp ;uint32_t attachmentCount ;VkPipelineColorBlendAttachmentState* pAttachments ;float blendConstants [4];} VkPipelineColorBlendStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineDynamicStateCreateFlags flags ;uint32_t dynamicStateCount ;void* pDynamicStates ;} VkPipelineDynamicStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStencilOp failOp ;VkStencilOp passOp ;VkStencilOp depthFailOp ;VkCompareOp compareOp ;uint32_t compareMask ;uint32_t writeMask ;uint32_t reference ;} VkStencilOpState;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineDepthStencilStateCreateFlags flags ;uint32_t depthTestEnable ;uint32_t depthWriteEnable ;VkCompareOp depthCompareOp ;uint32_t depthBoundsTestEnable ;uint32_t stencilTestEnable ;VkStencilOpState front ;VkStencilOpState back ;float minDepthBounds ;float maxDepthBounds ;} VkPipelineDepthStencilStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;VkPipelineVertexInputStateCreateInfo* pVertexInputState ;VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState ;VkPipelineTessellationStateCreateInfo* pTessellationState ;VkPipelineViewportStateCreateInfo* pViewportState ;VkPipelineRasterizationStateCreateInfo* pRasterizationState ;VkPipelineMultisampleStateCreateInfo* pMultisampleState ;VkPipelineDepthStencilStateCreateInfo* pDepthStencilState ;VkPipelineColorBlendStateCreateInfo* pColorBlendState ;VkPipelineDynamicStateCreateInfo* pDynamicState ;VkPipelineLayout layout ;VkRenderPass renderPass ;uint32_t subpass ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkGraphicsPipelineCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCacheCreateFlags flags ;size_t initialDataSize ;void* pInitialData ;} VkPipelineCacheCreateInfo;';
        $this->cdefs[] = 'typedef struct {uint32_t headerSize ;VkPipelineCacheHeaderVersion headerVersion ;uint32_t vendorID ;uint32_t deviceID ;uint8_t pipelineCacheUUID [16];} VkPipelineCacheHeaderVersionOne;';
        $this->cdefs[] = 'typedef struct {uint64_t codeSize ;uint64_t codeOffset ;} VkPipelineCacheStageValidationIndexEntry;';
        $this->cdefs[] = 'typedef struct {uint8_t pipelineIdentifier [16];uint64_t pipelineMemorySize ;uint64_t jsonSize ;uint64_t jsonOffset ;uint32_t stageIndexCount ;uint32_t stageIndexStride ;uint64_t stageIndexOffset ;} VkPipelineCacheSafetyCriticalIndexEntry;';
        $this->cdefs[] = 'typedef struct {VkPipelineCacheHeaderVersionOne headerVersionOne ;VkPipelineCacheValidationVersion validationVersion ;uint32_t implementationData ;uint32_t pipelineIndexCount ;uint32_t pipelineIndexStride ;uint64_t pipelineIndexOffset ;} VkPipelineCacheHeaderVersionSafetyCriticalOne;';
        $this->cdefs[] = 'typedef struct {VkShaderStageFlags stageFlags ;uint32_t offset ;uint32_t size ;} VkPushConstantRange;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineLayoutCreateFlags flags ;uint32_t setLayoutCount ;VkDescriptorSetLayout* pSetLayouts ;uint32_t pushConstantRangeCount ;VkPushConstantRange* pPushConstantRanges ;} VkPipelineLayoutCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSamplerCreateFlags flags ;VkFilter magFilter ;VkFilter minFilter ;VkSamplerMipmapMode mipmapMode ;VkSamplerAddressMode addressModeU ;VkSamplerAddressMode addressModeV ;VkSamplerAddressMode addressModeW ;float mipLodBias ;uint32_t anisotropyEnable ;float maxAnisotropy ;uint32_t compareEnable ;VkCompareOp compareOp ;float minLod ;float maxLod ;VkBorderColor borderColor ;uint32_t unnormalizedCoordinates ;} VkSamplerCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCommandPoolCreateFlags flags ;uint32_t queueFamilyIndex ;} VkCommandPoolCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCommandPool commandPool ;VkCommandBufferLevel level ;uint32_t commandBufferCount ;} VkCommandBufferAllocateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderPass renderPass ;uint32_t subpass ;VkFramebuffer framebuffer ;uint32_t occlusionQueryEnable ;VkQueryControlFlags queryFlags ;VkQueryPipelineStatisticFlags pipelineStatistics ;} VkCommandBufferInheritanceInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCommandBufferUsageFlags flags ;VkCommandBufferInheritanceInfo* pInheritanceInfo ;} VkCommandBufferBeginInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderPass renderPass ;VkFramebuffer framebuffer ;VkRect2D renderArea ;uint32_t clearValueCount ;void* pClearValues ;} VkRenderPassBeginInfo;';
        $this->cdefs[] = 'typedef struct {float depth ;uint32_t stencil ;} VkClearDepthStencilValue;';
        $this->cdefs[] = 'typedef struct {VkImageAspectFlags aspectMask ;uint32_t colorAttachment ;void* clearValue ;} VkClearAttachment;';
        $this->cdefs[] = 'typedef struct {VkAttachmentDescriptionFlags flags ;VkFormat format ;VkSampleCountFlagBits samples ;VkAttachmentLoadOp loadOp ;VkAttachmentStoreOp storeOp ;VkAttachmentLoadOp stencilLoadOp ;VkAttachmentStoreOp stencilStoreOp ;VkImageLayout initialLayout ;VkImageLayout finalLayout ;} VkAttachmentDescription;';
        $this->cdefs[] = 'typedef struct {uint32_t attachment ;VkImageLayout layout ;} VkAttachmentReference;';
        $this->cdefs[] = 'typedef struct {VkSubpassDescriptionFlags flags ;VkPipelineBindPoint pipelineBindPoint ;uint32_t inputAttachmentCount ;VkAttachmentReference* pInputAttachments ;uint32_t colorAttachmentCount ;VkAttachmentReference* pColorAttachments ;VkAttachmentReference* pResolveAttachments ;VkAttachmentReference* pDepthStencilAttachment ;uint32_t preserveAttachmentCount ;uint32_t* pPreserveAttachments ;} VkSubpassDescription;';
        $this->cdefs[] = 'typedef struct {uint32_t srcSubpass ;uint32_t dstSubpass ;VkPipelineStageFlags srcStageMask ;VkPipelineStageFlags dstStageMask ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;VkDependencyFlags dependencyFlags ;} VkSubpassDependency;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassCreateFlags flags ;uint32_t attachmentCount ;VkAttachmentDescription* pAttachments ;uint32_t subpassCount ;VkSubpassDescription* pSubpasses ;uint32_t dependencyCount ;VkSubpassDependency* pDependencies ;} VkRenderPassCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkEventCreateFlags flags ;} VkEventCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFenceCreateFlags flags ;} VkFenceCreateInfo;';
        $this->cdefs[] = 'typedef struct {uint32_t robustBufferAccess ;uint32_t fullDrawIndexUint32 ;uint32_t imageCubeArray ;uint32_t independentBlend ;uint32_t geometryShader ;uint32_t tessellationShader ;uint32_t sampleRateShading ;uint32_t dualSrcBlend ;uint32_t logicOp ;uint32_t multiDrawIndirect ;uint32_t drawIndirectFirstInstance ;uint32_t depthClamp ;uint32_t depthBiasClamp ;uint32_t fillModeNonSolid ;uint32_t depthBounds ;uint32_t wideLines ;uint32_t largePoints ;uint32_t alphaToOne ;uint32_t multiViewport ;uint32_t samplerAnisotropy ;uint32_t textureCompressionETC2 ;uint32_t textureCompressionASTC_LDR ;uint32_t textureCompressionBC ;uint32_t occlusionQueryPrecise ;uint32_t pipelineStatisticsQuery ;uint32_t vertexPipelineStoresAndAtomics ;uint32_t fragmentStoresAndAtomics ;uint32_t shaderTessellationAndGeometryPointSize ;uint32_t shaderImageGatherExtended ;uint32_t shaderStorageImageExtendedFormats ;uint32_t shaderStorageImageMultisample ;uint32_t shaderStorageImageReadWithoutFormat ;uint32_t shaderStorageImageWriteWithoutFormat ;uint32_t shaderUniformBufferArrayDynamicIndexing ;uint32_t shaderSampledImageArrayDynamicIndexing ;uint32_t shaderStorageBufferArrayDynamicIndexing ;uint32_t shaderStorageImageArrayDynamicIndexing ;uint32_t shaderClipDistance ;uint32_t shaderCullDistance ;uint32_t shaderFloat64 ;uint32_t shaderInt64 ;uint32_t shaderInt16 ;uint32_t shaderResourceResidency ;uint32_t shaderResourceMinLod ;uint32_t sparseBinding ;uint32_t sparseResidencyBuffer ;uint32_t sparseResidencyImage2D ;uint32_t sparseResidencyImage3D ;uint32_t sparseResidency2Samples ;uint32_t sparseResidency4Samples ;uint32_t sparseResidency8Samples ;uint32_t sparseResidency16Samples ;uint32_t sparseResidencyAliased ;uint32_t variableMultisampleRate ;uint32_t inheritedQueries ;} VkPhysicalDeviceFeatures;';
        $this->cdefs[] = 'typedef struct {uint32_t residencyStandard2DBlockShape ;uint32_t residencyStandard2DMultisampleBlockShape ;uint32_t residencyStandard3DBlockShape ;uint32_t residencyAlignedMipSize ;uint32_t residencyNonResidentStrict ;} VkPhysicalDeviceSparseProperties;';
        $this->cdefs[] = 'typedef struct {uint32_t maxImageDimension1D ;uint32_t maxImageDimension2D ;uint32_t maxImageDimension3D ;uint32_t maxImageDimensionCube ;uint32_t maxImageArrayLayers ;uint32_t maxTexelBufferElements ;uint32_t maxUniformBufferRange ;uint32_t maxStorageBufferRange ;uint32_t maxPushConstantsSize ;uint32_t maxMemoryAllocationCount ;uint32_t maxSamplerAllocationCount ;uint64_t bufferImageGranularity ;uint64_t sparseAddressSpaceSize ;uint32_t maxBoundDescriptorSets ;uint32_t maxPerStageDescriptorSamplers ;uint32_t maxPerStageDescriptorUniformBuffers ;uint32_t maxPerStageDescriptorStorageBuffers ;uint32_t maxPerStageDescriptorSampledImages ;uint32_t maxPerStageDescriptorStorageImages ;uint32_t maxPerStageDescriptorInputAttachments ;uint32_t maxPerStageResources ;uint32_t maxDescriptorSetSamplers ;uint32_t maxDescriptorSetUniformBuffers ;uint32_t maxDescriptorSetUniformBuffersDynamic ;uint32_t maxDescriptorSetStorageBuffers ;uint32_t maxDescriptorSetStorageBuffersDynamic ;uint32_t maxDescriptorSetSampledImages ;uint32_t maxDescriptorSetStorageImages ;uint32_t maxDescriptorSetInputAttachments ;uint32_t maxVertexInputAttributes ;uint32_t maxVertexInputBindings ;uint32_t maxVertexInputAttributeOffset ;uint32_t maxVertexInputBindingStride ;uint32_t maxVertexOutputComponents ;uint32_t maxTessellationGenerationLevel ;uint32_t maxTessellationPatchSize ;uint32_t maxTessellationControlPerVertexInputComponents ;uint32_t maxTessellationControlPerVertexOutputComponents ;uint32_t maxTessellationControlPerPatchOutputComponents ;uint32_t maxTessellationControlTotalOutputComponents ;uint32_t maxTessellationEvaluationInputComponents ;uint32_t maxTessellationEvaluationOutputComponents ;uint32_t maxGeometryShaderInvocations ;uint32_t maxGeometryInputComponents ;uint32_t maxGeometryOutputComponents ;uint32_t maxGeometryOutputVertices ;uint32_t maxGeometryTotalOutputComponents ;uint32_t maxFragmentInputComponents ;uint32_t maxFragmentOutputAttachments ;uint32_t maxFragmentDualSrcAttachments ;uint32_t maxFragmentCombinedOutputResources ;uint32_t maxComputeSharedMemorySize ;void* maxComputeWorkGroupCount ;uint32_t maxComputeWorkGroupInvocations ;void* maxComputeWorkGroupSize ;uint32_t subPixelPrecisionBits ;uint32_t subTexelPrecisionBits ;uint32_t mipmapPrecisionBits ;uint32_t maxDrawIndexedIndexValue ;uint32_t maxDrawIndirectCount ;float maxSamplerLodBias ;float maxSamplerAnisotropy ;uint32_t maxViewports ;void* maxViewportDimensions ;void* viewportBoundsRange ;uint32_t viewportSubPixelBits ;size_t minMemoryMapAlignment ;uint64_t minTexelBufferOffsetAlignment ;uint64_t minUniformBufferOffsetAlignment ;uint64_t minStorageBufferOffsetAlignment ;int32_t minTexelOffset ;uint32_t maxTexelOffset ;int32_t minTexelGatherOffset ;uint32_t maxTexelGatherOffset ;float minInterpolationOffset ;float maxInterpolationOffset ;uint32_t subPixelInterpolationOffsetBits ;uint32_t maxFramebufferWidth ;uint32_t maxFramebufferHeight ;uint32_t maxFramebufferLayers ;VkSampleCountFlags framebufferColorSampleCounts ;VkSampleCountFlags framebufferDepthSampleCounts ;VkSampleCountFlags framebufferStencilSampleCounts ;VkSampleCountFlags framebufferNoAttachmentsSampleCounts ;uint32_t maxColorAttachments ;VkSampleCountFlags sampledImageColorSampleCounts ;VkSampleCountFlags sampledImageIntegerSampleCounts ;VkSampleCountFlags sampledImageDepthSampleCounts ;VkSampleCountFlags sampledImageStencilSampleCounts ;VkSampleCountFlags storageImageSampleCounts ;uint32_t maxSampleMaskWords ;uint32_t timestampComputeAndGraphics ;float timestampPeriod ;uint32_t maxClipDistances ;uint32_t maxCullDistances ;uint32_t maxCombinedClipAndCullDistances ;uint32_t discreteQueuePriorities ;void* pointSizeRange ;void* lineWidthRange ;float pointSizeGranularity ;float lineWidthGranularity ;uint32_t strictLines ;uint32_t standardSampleLocations ;uint64_t optimalBufferCopyOffsetAlignment ;uint64_t optimalBufferCopyRowPitchAlignment ;uint64_t nonCoherentAtomSize ;} VkPhysicalDeviceLimits;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreCreateFlags flags ;} VkSemaphoreCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkQueryPoolCreateFlags flags ;VkQueryType queryType ;uint32_t queryCount ;VkQueryPipelineStatisticFlags pipelineStatistics ;} VkQueryPoolCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFramebufferCreateFlags flags ;VkRenderPass renderPass ;uint32_t attachmentCount ;VkImageView* pAttachments ;uint32_t width ;uint32_t height ;uint32_t layers ;} VkFramebufferCreateInfo;';
        $this->cdefs[] = 'typedef struct {uint32_t vertexCount ;uint32_t instanceCount ;uint32_t firstVertex ;uint32_t firstInstance ;} VkDrawIndirectCommand;';
        $this->cdefs[] = 'typedef struct {uint32_t indexCount ;uint32_t instanceCount ;uint32_t firstIndex ;int32_t vertexOffset ;uint32_t firstInstance ;} VkDrawIndexedIndirectCommand;';
        $this->cdefs[] = 'typedef struct {uint32_t x ;uint32_t y ;uint32_t z ;} VkDispatchIndirectCommand;';
        $this->cdefs[] = 'typedef struct {uint32_t firstVertex ;uint32_t vertexCount ;} VkMultiDrawInfoEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t firstIndex ;uint32_t indexCount ;int32_t vertexOffset ;} VkMultiDrawIndexedInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;VkSemaphore* pWaitSemaphores ;void* pWaitDstStageMask ;uint32_t commandBufferCount ;VkCommandBuffer* pCommandBuffers ;uint32_t signalSemaphoreCount ;VkSemaphore* pSignalSemaphores ;} VkSubmitInfo;';
        $this->cdefs[] = 'typedef struct {VkDisplayKHR display ;const char* displayName ;VkExtent2D physicalDimensions ;VkExtent2D physicalResolution ;VkSurfaceTransformFlagsKHR supportedTransforms ;uint32_t planeReorderPossible ;uint32_t persistentContent ;} VkDisplayPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkDisplayKHR currentDisplay ;uint32_t currentStackIndex ;} VkDisplayPlanePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkExtent2D visibleRegion ;uint32_t refreshRate ;} VkDisplayModeParametersKHR;';
        $this->cdefs[] = 'typedef struct {VkDisplayModeKHR displayMode ;VkDisplayModeParametersKHR parameters ;} VkDisplayModePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayModeCreateFlagsKHR flags ;VkDisplayModeParametersKHR parameters ;} VkDisplayModeCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkDisplayPlaneAlphaFlagsKHR supportedAlpha ;VkOffset2D minSrcPosition ;VkOffset2D maxSrcPosition ;VkExtent2D minSrcExtent ;VkExtent2D maxSrcExtent ;VkOffset2D minDstPosition ;VkOffset2D maxDstPosition ;VkExtent2D minDstExtent ;VkExtent2D maxDstExtent ;} VkDisplayPlaneCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplaySurfaceCreateFlagsKHR flags ;VkDisplayModeKHR displayMode ;uint32_t planeIndex ;uint32_t planeStackIndex ;VkSurfaceTransformFlagBitsKHR transform ;float globalAlpha ;VkDisplayPlaneAlphaFlagBitsKHR alphaMode ;VkExtent2D imageExtent ;} VkDisplaySurfaceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRect2D srcRect ;VkRect2D dstRect ;uint32_t persistent ;} VkDisplayPresentInfoKHR;';
        $this->cdefs[] = 'typedef struct {uint32_t minImageCount ;uint32_t maxImageCount ;VkExtent2D currentExtent ;VkExtent2D minImageExtent ;VkExtent2D maxImageExtent ;uint32_t maxImageArrayLayers ;VkSurfaceTransformFlagsKHR supportedTransforms ;VkSurfaceTransformFlagBitsKHR currentTransform ;VkCompositeAlphaFlagsKHR supportedCompositeAlpha ;VkImageUsageFlags supportedUsageFlags ;} VkSurfaceCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAndroidSurfaceCreateFlagsKHR flags ;void* window ;} VkAndroidSurfaceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkViSurfaceCreateFlagsNN flags ;void* window ;} VkViSurfaceCreateInfoNN;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkWaylandSurfaceCreateFlagsKHR flags ;void* display ;void* surface ;} VkWaylandSurfaceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkWin32SurfaceCreateFlagsKHR flags ;void* hinstance ;void* hwnd ;} VkWin32SurfaceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkXlibSurfaceCreateFlagsKHR flags ;void* dpy ;void* window ;} VkXlibSurfaceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkXcbSurfaceCreateFlagsKHR flags ;void* connection ;uint32_t window ;} VkXcbSurfaceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDirectFBSurfaceCreateFlagsEXT flags ;void* dfb ;void* surface ;} VkDirectFBSurfaceCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImagePipeSurfaceCreateFlagsFUCHSIA flags ;uint32_t imagePipeHandle ;} VkImagePipeSurfaceCreateInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkStreamDescriptorSurfaceCreateFlagsGGP flags ;void* streamDescriptor ;} VkStreamDescriptorSurfaceCreateInfoGGP;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkScreenSurfaceCreateFlagsQNX flags ;void* context ;void* window ;} VkScreenSurfaceCreateInfoQNX;';
        $this->cdefs[] = 'typedef struct {VkFormat format ;VkColorSpaceKHR colorSpace ;} VkSurfaceFormatKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainCreateFlagsKHR flags ;VkSurfaceKHR surface ;uint32_t minImageCount ;VkFormat imageFormat ;VkColorSpaceKHR imageColorSpace ;VkExtent2D imageExtent ;uint32_t imageArrayLayers ;VkImageUsageFlags imageUsage ;VkSharingMode imageSharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;VkSurfaceTransformFlagBitsKHR preTransform ;VkCompositeAlphaFlagBitsKHR compositeAlpha ;VkPresentModeKHR presentMode ;uint32_t clipped ;VkSwapchainKHR oldSwapchain ;} VkSwapchainCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;VkSemaphore* pWaitSemaphores ;uint32_t swapchainCount ;VkSwapchainKHR* pSwapchains ;uint32_t* pImageIndices ;void* pResults ;} VkPresentInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDebugReportFlagsEXT flags ;void* pfnCallback ;void* pUserData ;} VkDebugReportCallbackCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t disabledValidationCheckCount ;void* pDisabledValidationChecks ;} VkValidationFlagsEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t enabledValidationFeatureCount ;void* pEnabledValidationFeatures ;uint32_t disabledValidationFeatureCount ;void* pDisabledValidationFeatures ;} VkValidationFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t vendorID ;uint32_t deviceID ;uint32_t key ;uint64_t value ;} VkApplicationParametersEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRasterizationOrderAMD rasterizationOrder ;} VkPipelineRasterizationStateRasterizationOrderAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDebugReportObjectTypeEXT objectType ;uint64_t object ;const char* pObjectName ;} VkDebugMarkerObjectNameInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDebugReportObjectTypeEXT objectType ;uint64_t object ;uint64_t tagName ;size_t tagSize ;void* pTag ;} VkDebugMarkerObjectTagInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;const char* pMarkerName ;float color [4];} VkDebugMarkerMarkerInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t dedicatedAllocation ;} VkDedicatedAllocationImageCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t dedicatedAllocation ;} VkDedicatedAllocationBufferCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkBuffer buffer ;} VkDedicatedAllocationMemoryAllocateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkImageFormatProperties imageFormatProperties ;VkExternalMemoryFeatureFlagsNV externalMemoryFeatures ;VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes ;VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes ;} VkExternalImageFormatPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagsNV handleTypes ;} VkExternalMemoryImageCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagsNV handleTypes ;} VkExportMemoryAllocateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagsNV handleType ;void* handle ;} VkImportMemoryWin32HandleInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;} VkExportMemoryWin32HandleInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;} VkExportMemorySciBufInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;void* handle ;} VkImportMemorySciBufInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetSciBufInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemorySciBufPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t sciBufImport ;uint32_t sciBufExport ;} VkPhysicalDeviceExternalMemorySciBufFeaturesNV;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceExternalSciBufFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t acquireCount ;VkDeviceMemory* pAcquireSyncs ;uint64_t* pAcquireKeys ;uint32_t* pAcquireTimeoutMilliseconds ;uint32_t releaseCount ;VkDeviceMemory* pReleaseSyncs ;uint64_t* pReleaseKeys ;} VkWin32KeyedMutexAcquireReleaseInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceGeneratedCommands ;} VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceGeneratedCompute ;uint32_t deviceGeneratedComputePipelines ;uint32_t deviceGeneratedComputeCaptureReplay ;} VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t privateDataSlotRequestCount ;} VkDevicePrivateDataCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkDevicePrivateDataCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPrivateDataSlotCreateFlags flags ;} VkPrivateDataSlotCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkPrivateDataSlotCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t privateData ;} VkPhysicalDevicePrivateDataFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDevicePrivateDataFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxGraphicsShaderGroupCount ;uint32_t maxIndirectSequenceCount ;uint32_t maxIndirectCommandsTokenCount ;uint32_t maxIndirectCommandsStreamCount ;uint32_t maxIndirectCommandsTokenOffset ;uint32_t maxIndirectCommandsStreamStride ;uint32_t minSequencesCountBufferOffsetAlignment ;uint32_t minSequencesIndexBufferOffsetAlignment ;uint32_t minIndirectCommandsBufferOffsetAlignment ;} VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxMultiDrawCount ;} VkPhysicalDeviceMultiDrawPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;VkPipelineVertexInputStateCreateInfo* pVertexInputState ;VkPipelineTessellationStateCreateInfo* pTessellationState ;} VkGraphicsShaderGroupCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t groupCount ;VkGraphicsShaderGroupCreateInfoNV* pGroups ;uint32_t pipelineCount ;VkPipeline* pPipelines ;} VkGraphicsPipelineShaderGroupsCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {uint32_t groupIndex ;} VkBindShaderGroupIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {uint64_t bufferAddress ;uint32_t size ;VkIndexType indexType ;} VkBindIndexBufferIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {uint64_t bufferAddress ;uint32_t size ;uint32_t stride ;} VkBindVertexBufferIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {uint32_t data ;} VkSetStateFlagsIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {VkBuffer buffer ;uint64_t offset ;} VkIndirectCommandsStreamNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkIndirectCommandsTokenTypeNV tokenType ;uint32_t stream ;uint32_t offset ;uint32_t vertexBindingUnit ;uint32_t vertexDynamicStride ;VkPipelineLayout pushconstantPipelineLayout ;VkShaderStageFlags pushconstantShaderStageFlags ;uint32_t pushconstantOffset ;uint32_t pushconstantSize ;VkIndirectStateFlagsNV indirectStateFlags ;uint32_t indexTypeCount ;void* pIndexTypes ;uint32_t* pIndexTypeValues ;} VkIndirectCommandsLayoutTokenNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkIndirectCommandsLayoutUsageFlagsNV flags ;VkPipelineBindPoint pipelineBindPoint ;uint32_t tokenCount ;VkIndirectCommandsLayoutTokenNV* pTokens ;uint32_t streamCount ;uint32_t* pStreamStrides ;} VkIndirectCommandsLayoutCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineBindPoint pipelineBindPoint ;VkPipeline pipeline ;VkIndirectCommandsLayoutNV indirectCommandsLayout ;uint32_t streamCount ;VkIndirectCommandsStreamNV* pStreams ;uint32_t sequencesCount ;VkBuffer preprocessBuffer ;uint64_t preprocessOffset ;uint64_t preprocessSize ;VkBuffer sequencesCountBuffer ;uint64_t sequencesCountOffset ;VkBuffer sequencesIndexBuffer ;uint64_t sequencesIndexOffset ;} VkGeneratedCommandsInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineBindPoint pipelineBindPoint ;VkPipeline pipeline ;VkIndirectCommandsLayoutNV indirectCommandsLayout ;uint32_t maxSequencesCount ;} VkGeneratedCommandsMemoryRequirementsInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineBindPoint pipelineBindPoint ;VkPipeline pipeline ;} VkPipelineIndirectDeviceAddressInfoNV;';
        $this->cdefs[] = 'typedef struct {uint64_t pipelineAddress ;} VkBindPipelineIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* features ;} VkPhysicalDeviceFeatures2;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceFeatures2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPhysicalDeviceProperties properties ;} VkPhysicalDeviceProperties2;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormatProperties formatProperties ;} VkFormatProperties2;';
        $this->cdefs[] = 'typedef struct {} VkFormatProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageFormatProperties imageFormatProperties ;} VkImageFormatProperties2;';
        $this->cdefs[] = 'typedef struct {} VkImageFormatProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkImageType type ;VkImageTiling tiling ;VkImageUsageFlags usage ;VkImageCreateFlags flags ;} VkPhysicalDeviceImageFormatInfo2;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceImageFormatInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkQueueFamilyProperties queueFamilyProperties ;} VkQueueFamilyProperties2;';
        $this->cdefs[] = 'typedef struct {} VkQueueFamilyProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPhysicalDeviceMemoryProperties memoryProperties ;} VkPhysicalDeviceMemoryProperties2;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceMemoryProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSparseImageFormatProperties properties ;} VkSparseImageFormatProperties2;';
        $this->cdefs[] = 'typedef struct {} VkSparseImageFormatProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkImageType type ;VkSampleCountFlagBits samples ;VkImageUsageFlags usage ;VkImageTiling tiling ;} VkPhysicalDeviceSparseImageFormatInfo2;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceSparseImageFormatInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPushDescriptors ;} VkPhysicalDevicePushDescriptorPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {uint8_t major ;uint8_t minor ;uint8_t subminor ;uint8_t patch ;} VkConformanceVersion;';
        $this->cdefs[] = 'typedef struct {} VkConformanceVersionKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDriverId driverID ;char driverName [256];char driverInfo [256];VkConformanceVersion conformanceVersion ;} VkPhysicalDeviceDriverProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceDriverPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;void* pRegions ;} VkPresentRegionsKHR;';
        $this->cdefs[] = 'typedef struct {uint32_t rectangleCount ;void* pRectangles ;} VkPresentRegionKHR;';
        $this->cdefs[] = 'typedef struct {VkOffset2D offset ;VkExtent2D extent ;uint32_t layer ;} VkRectLayerKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t variablePointersStorageBuffer ;uint32_t variablePointers ;} VkPhysicalDeviceVariablePointersFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceVariablePointersFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceVariablePointerFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceVariablePointerFeatures;';
        $this->cdefs[] = 'typedef struct {VkExternalMemoryFeatureFlags externalMemoryFeatures ;VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes ;VkExternalMemoryHandleTypeFlags compatibleHandleTypes ;} VkExternalMemoryProperties;';
        $this->cdefs[] = 'typedef struct {} VkExternalMemoryPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalImageFormatInfo;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceExternalImageFormatInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryProperties externalMemoryProperties ;} VkExternalImageFormatProperties;';
        $this->cdefs[] = 'typedef struct {} VkExternalImageFormatPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateFlags flags ;VkBufferUsageFlags usage ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalBufferInfo;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceExternalBufferInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryProperties externalMemoryProperties ;} VkExternalBufferProperties;';
        $this->cdefs[] = 'typedef struct {} VkExternalBufferPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint8_t deviceUUID [16];uint8_t driverUUID [16];void* deviceLUID ;uint32_t deviceNodeMask ;uint32_t deviceLUIDValid ;} VkPhysicalDeviceIDProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceIDPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlags handleTypes ;} VkExternalMemoryImageCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkExternalMemoryImageCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlags handleTypes ;} VkExternalMemoryBufferCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkExternalMemoryBufferCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlags handleTypes ;} VkExportMemoryAllocateInfo;';
        $this->cdefs[] = 'typedef struct {} VkExportMemoryAllocateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;void* handle ;void* name ;} VkImportMemoryWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;void* name ;} VkExportMemoryWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;uint32_t handle ;} VkImportMemoryZirconHandleInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryZirconHandlePropertiesFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetZirconHandleInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryWin32HandlePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;int16_t fd ;} VkImportMemoryFdInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryFdPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetFdInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t acquireCount ;VkDeviceMemory* pAcquireSyncs ;uint64_t* pAcquireKeys ;uint32_t* pAcquireTimeouts ;uint32_t releaseCount ;VkDeviceMemory* pReleaseSyncs ;uint64_t* pReleaseKeys ;} VkWin32KeyedMutexAcquireReleaseInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalSemaphoreInfo;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceExternalSemaphoreInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes ;VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes ;VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures ;} VkExternalSemaphoreProperties;';
        $this->cdefs[] = 'typedef struct {} VkExternalSemaphorePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalSemaphoreHandleTypeFlags handleTypes ;} VkExportSemaphoreCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkExportSemaphoreCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkSemaphoreImportFlags flags ;VkExternalSemaphoreHandleTypeFlagBits handleType ;void* handle ;void* name ;} VkImportSemaphoreWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;void* name ;} VkExportSemaphoreWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreValuesCount ;uint64_t* pWaitSemaphoreValues ;uint32_t signalSemaphoreValuesCount ;uint64_t* pSignalSemaphoreValues ;} VkD3D12FenceSubmitInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkSemaphoreImportFlags flags ;VkExternalSemaphoreHandleTypeFlagBits handleType ;int16_t fd ;} VkImportSemaphoreFdInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetFdInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkSemaphoreImportFlags flags ;VkExternalSemaphoreHandleTypeFlagBits handleType ;uint32_t zirconHandle ;} VkImportSemaphoreZirconHandleInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetZirconHandleInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalFenceHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalFenceInfo;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceExternalFenceInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes ;VkExternalFenceHandleTypeFlags compatibleHandleTypes ;VkExternalFenceFeatureFlags externalFenceFeatures ;} VkExternalFenceProperties;';
        $this->cdefs[] = 'typedef struct {} VkExternalFencePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalFenceHandleTypeFlags handleTypes ;} VkExportFenceCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkExportFenceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkFenceImportFlags flags ;VkExternalFenceHandleTypeFlagBits handleType ;void* handle ;void* name ;} VkImportFenceWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;void* name ;} VkExportFenceWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;} VkFenceGetWin32HandleInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkFenceImportFlags flags ;VkExternalFenceHandleTypeFlagBits handleType ;int16_t fd ;} VkImportFenceFdInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;} VkFenceGetFdInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;} VkExportFenceSciSyncInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;void* handle ;} VkImportFenceSciSyncInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;} VkFenceGetSciSyncInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;} VkExportSemaphoreSciSyncInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;void* handle ;} VkImportSemaphoreSciSyncInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetSciSyncInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSciSyncClientTypeNV clientType ;VkSciSyncPrimitiveTypeNV primitiveType ;} VkSciSyncAttributesInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t sciSyncFence ;uint32_t sciSyncSemaphore ;uint32_t sciSyncImport ;uint32_t sciSyncExport ;} VkPhysicalDeviceExternalSciSyncFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t sciSyncFence ;uint32_t sciSyncSemaphore2 ;uint32_t sciSyncImport ;uint32_t sciSyncExport ;} VkPhysicalDeviceExternalSciSync2FeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* handle ;} VkSemaphoreSciSyncPoolCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreSciSyncPoolNV semaphorePool ;void* pFence ;} VkSemaphoreSciSyncCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t semaphoreSciSyncPoolRequestCount ;} VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiview ;uint32_t multiviewGeometryShader ;uint32_t multiviewTessellationShader ;} VkPhysicalDeviceMultiviewFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceMultiviewFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxMultiviewViewCount ;uint32_t maxMultiviewInstanceIndex ;} VkPhysicalDeviceMultiviewProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceMultiviewPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t subpassCount ;uint32_t* pViewMasks ;uint32_t dependencyCount ;void* pViewOffsets ;uint32_t correlationMaskCount ;uint32_t* pCorrelationMasks ;} VkRenderPassMultiviewCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkRenderPassMultiviewCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t minImageCount ;uint32_t maxImageCount ;VkExtent2D currentExtent ;VkExtent2D minImageExtent ;VkExtent2D maxImageExtent ;uint32_t maxImageArrayLayers ;VkSurfaceTransformFlagsKHR supportedTransforms ;VkSurfaceTransformFlagBitsKHR currentTransform ;VkCompositeAlphaFlagsKHR supportedCompositeAlpha ;VkImageUsageFlags supportedUsageFlags ;VkSurfaceCounterFlagsEXT supportedSurfaceCounters ;} VkSurfaceCapabilities2EXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPowerStateEXT powerState ;} VkDisplayPowerInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceEventTypeEXT deviceEvent ;} VkDeviceEventInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayEventTypeEXT displayEvent ;} VkDisplayEventInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceCounterFlagsEXT surfaceCounters ;} VkSwapchainCounterCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t physicalDeviceCount ;void* physicalDevices ;uint32_t subsetAllocation ;} VkPhysicalDeviceGroupProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceGroupPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMemoryAllocateFlags flags ;uint32_t deviceMask ;} VkMemoryAllocateFlagsInfo;';
        $this->cdefs[] = 'typedef struct {} VkMemoryAllocateFlagsInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;VkDeviceMemory memory ;uint64_t memoryOffset ;} VkBindBufferMemoryInfo;';
        $this->cdefs[] = 'typedef struct {} VkBindBufferMemoryInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceIndexCount ;uint32_t* pDeviceIndices ;} VkBindBufferMemoryDeviceGroupInfo;';
        $this->cdefs[] = 'typedef struct {} VkBindBufferMemoryDeviceGroupInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkDeviceMemory memory ;uint64_t memoryOffset ;} VkBindImageMemoryInfo;';
        $this->cdefs[] = 'typedef struct {} VkBindImageMemoryInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceIndexCount ;uint32_t* pDeviceIndices ;uint32_t splitInstanceBindRegionCount ;VkRect2D* pSplitInstanceBindRegions ;} VkBindImageMemoryDeviceGroupInfo;';
        $this->cdefs[] = 'typedef struct {} VkBindImageMemoryDeviceGroupInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceMask ;uint32_t deviceRenderAreaCount ;VkRect2D* pDeviceRenderAreas ;} VkDeviceGroupRenderPassBeginInfo;';
        $this->cdefs[] = 'typedef struct {} VkDeviceGroupRenderPassBeginInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceMask ;} VkDeviceGroupCommandBufferBeginInfo;';
        $this->cdefs[] = 'typedef struct {} VkDeviceGroupCommandBufferBeginInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;uint32_t* pWaitSemaphoreDeviceIndices ;uint32_t commandBufferCount ;uint32_t* pCommandBufferDeviceMasks ;uint32_t signalSemaphoreCount ;uint32_t* pSignalSemaphoreDeviceIndices ;} VkDeviceGroupSubmitInfo;';
        $this->cdefs[] = 'typedef struct {} VkDeviceGroupSubmitInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t resourceDeviceIndex ;uint32_t memoryDeviceIndex ;} VkDeviceGroupBindSparseInfo;';
        $this->cdefs[] = 'typedef struct {} VkDeviceGroupBindSparseInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* presentMask ;VkDeviceGroupPresentModeFlagsKHR modes ;} VkDeviceGroupPresentCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;} VkImageSwapchainCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;uint32_t imageIndex ;} VkBindImageMemorySwapchainInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;uint64_t timeout ;VkSemaphore semaphore ;VkFence fence ;uint32_t deviceMask ;} VkAcquireNextImageInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;uint32_t* pDeviceMasks ;VkDeviceGroupPresentModeFlagBitsKHR mode ;} VkDeviceGroupPresentInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t physicalDeviceCount ;VkPhysicalDevice* pPhysicalDevices ;} VkDeviceGroupDeviceCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkDeviceGroupDeviceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceGroupPresentModeFlagsKHR modes ;} VkDeviceGroupSwapchainCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {uint32_t dstBinding ;uint32_t dstArrayElement ;uint32_t descriptorCount ;VkDescriptorType descriptorType ;size_t offset ;size_t stride ;} VkDescriptorUpdateTemplateEntry;';
        $this->cdefs[] = 'typedef struct {} VkDescriptorUpdateTemplateEntryKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorUpdateTemplateCreateFlags flags ;uint32_t descriptorUpdateEntryCount ;VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries ;VkDescriptorUpdateTemplateType templateType ;VkDescriptorSetLayout descriptorSetLayout ;VkPipelineBindPoint pipelineBindPoint ;VkPipelineLayout pipelineLayout ;uint32_t set ;} VkDescriptorUpdateTemplateCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkDescriptorUpdateTemplateCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {float x ;float y ;} VkXYColorEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentId ;} VkPhysicalDevicePresentIdFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;uint64_t* pPresentIds ;} VkPresentIdKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentWait ;} VkPhysicalDevicePresentWaitFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkXYColorEXT displayPrimaryRed ;VkXYColorEXT displayPrimaryGreen ;VkXYColorEXT displayPrimaryBlue ;VkXYColorEXT whitePoint ;float maxLuminance ;float minLuminance ;float maxContentLightLevel ;float maxFrameAverageLightLevel ;} VkHdrMetadataEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t localDimmingSupport ;} VkDisplayNativeHdrSurfaceCapabilitiesAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t localDimmingEnable ;} VkSwapchainDisplayNativeHdrCreateInfoAMD;';
        $this->cdefs[] = 'typedef struct {uint64_t refreshDuration ;} VkRefreshCycleDurationGOOGLE;';
        $this->cdefs[] = 'typedef struct {uint32_t presentID ;uint64_t desiredPresentTime ;uint64_t actualPresentTime ;uint64_t earliestPresentTime ;uint64_t presentMargin ;} VkPastPresentationTimingGOOGLE;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;void* pTimes ;} VkPresentTimesInfoGOOGLE;';
        $this->cdefs[] = 'typedef struct {uint32_t presentID ;uint64_t desiredPresentTime ;} VkPresentTimeGOOGLE;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkIOSSurfaceCreateFlagsMVK flags ;void* pView ;} VkIOSSurfaceCreateInfoMVK;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMacOSSurfaceCreateFlagsMVK flags ;void* pView ;} VkMacOSSurfaceCreateInfoMVK;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMetalSurfaceCreateFlagsEXT flags ;void* pLayer ;} VkMetalSurfaceCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {float xcoeff ;float ycoeff ;} VkViewportWScalingNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewportWScalingEnable ;uint32_t viewportCount ;VkViewportWScalingNV* pViewportWScalings ;} VkPipelineViewportWScalingStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkViewportCoordinateSwizzleNV x ;VkViewportCoordinateSwizzleNV y ;VkViewportCoordinateSwizzleNV z ;VkViewportCoordinateSwizzleNV w ;} VkViewportSwizzleNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineViewportSwizzleStateCreateFlagsNV flags ;uint32_t viewportCount ;VkViewportSwizzleNV* pViewportSwizzles ;} VkPipelineViewportSwizzleStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxDiscardRectangles ;} VkPhysicalDeviceDiscardRectanglePropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineDiscardRectangleStateCreateFlagsEXT flags ;VkDiscardRectangleModeEXT discardRectangleMode ;uint32_t discardRectangleCount ;VkRect2D* pDiscardRectangles ;} VkPipelineDiscardRectangleStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t perViewPositionAllComponents ;} VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;';
        $this->cdefs[] = 'typedef struct {uint32_t subpass ;uint32_t inputAttachmentIndex ;VkImageAspectFlags aspectMask ;} VkInputAttachmentAspectReference;';
        $this->cdefs[] = 'typedef struct {} VkInputAttachmentAspectReferenceKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t aspectReferenceCount ;VkInputAttachmentAspectReference* pAspectReferences ;} VkRenderPassInputAttachmentAspectCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkRenderPassInputAttachmentAspectCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceKHR surface ;} VkPhysicalDeviceSurfaceInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceCapabilitiesKHR surfaceCapabilities ;} VkSurfaceCapabilities2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceFormatKHR surfaceFormat ;} VkSurfaceFormat2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPropertiesKHR displayProperties ;} VkDisplayProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPlanePropertiesKHR displayPlaneProperties ;} VkDisplayPlaneProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayModePropertiesKHR displayModeProperties ;} VkDisplayModeProperties2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayModeKHR mode ;uint32_t planeIndex ;} VkDisplayPlaneInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPlaneCapabilitiesKHR capabilities ;} VkDisplayPlaneCapabilities2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags sharedPresentSupportedUsageFlags ;} VkSharedPresentSurfaceCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t storageBuffer16BitAccess ;uint32_t uniformAndStorageBuffer16BitAccess ;uint32_t storagePushConstant16 ;uint32_t storageInputOutput16 ;} VkPhysicalDevice16BitStorageFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDevice16BitStorageFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t subgroupSize ;VkShaderStageFlags supportedStages ;VkSubgroupFeatureFlags supportedOperations ;uint32_t quadOperationsInAllStages ;} VkPhysicalDeviceSubgroupProperties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSubgroupExtendedTypes ;} VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkBufferMemoryRequirementsInfo2;';
        $this->cdefs[] = 'typedef struct {} VkBufferMemoryRequirementsInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateInfo* pCreateInfo ;} VkDeviceBufferMemoryRequirements;';
        $this->cdefs[] = 'typedef struct {} VkDeviceBufferMemoryRequirementsKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;} VkImageMemoryRequirementsInfo2;';
        $this->cdefs[] = 'typedef struct {} VkImageMemoryRequirementsInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;} VkImageSparseMemoryRequirementsInfo2;';
        $this->cdefs[] = 'typedef struct {} VkImageSparseMemoryRequirementsInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateInfo* pCreateInfo ;VkImageAspectFlagBits planeAspect ;} VkDeviceImageMemoryRequirements;';
        $this->cdefs[] = 'typedef struct {} VkDeviceImageMemoryRequirementsKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMemoryRequirements memoryRequirements ;} VkMemoryRequirements2;';
        $this->cdefs[] = 'typedef struct {} VkMemoryRequirements2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSparseImageMemoryRequirements memoryRequirements ;} VkSparseImageMemoryRequirements2;';
        $this->cdefs[] = 'typedef struct {} VkSparseImageMemoryRequirements2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPointClippingBehavior pointClippingBehavior ;} VkPhysicalDevicePointClippingProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDevicePointClippingPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t prefersDedicatedAllocation ;uint32_t requiresDedicatedAllocation ;} VkMemoryDedicatedRequirements;';
        $this->cdefs[] = 'typedef struct {} VkMemoryDedicatedRequirementsKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkBuffer buffer ;} VkMemoryDedicatedAllocateInfo;';
        $this->cdefs[] = 'typedef struct {} VkMemoryDedicatedAllocateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags usage ;} VkImageViewUsageCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t sliceOffset ;uint32_t sliceCount ;} VkImageViewSlicedCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {} VkImageViewUsageCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkTessellationDomainOrigin domainOrigin ;} VkPipelineTessellationDomainOriginStateCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkPipelineTessellationDomainOriginStateCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSamplerYcbcrConversion conversion ;} VkSamplerYcbcrConversionInfo;';
        $this->cdefs[] = 'typedef struct {} VkSamplerYcbcrConversionInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkSamplerYcbcrModelConversion ycbcrModel ;VkSamplerYcbcrRange ycbcrRange ;VkComponentMapping components ;VkChromaLocation xChromaOffset ;VkChromaLocation yChromaOffset ;VkFilter chromaFilter ;uint32_t forceExplicitReconstruction ;} VkSamplerYcbcrConversionCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkSamplerYcbcrConversionCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageAspectFlagBits planeAspect ;} VkBindImagePlaneMemoryInfo;';
        $this->cdefs[] = 'typedef struct {} VkBindImagePlaneMemoryInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageAspectFlagBits planeAspect ;} VkImagePlaneMemoryRequirementsInfo;';
        $this->cdefs[] = 'typedef struct {} VkImagePlaneMemoryRequirementsInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t samplerYcbcrConversion ;} VkPhysicalDeviceSamplerYcbcrConversionFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t combinedImageSamplerDescriptorCount ;} VkSamplerYcbcrConversionImageFormatProperties;';
        $this->cdefs[] = 'typedef struct {} VkSamplerYcbcrConversionImageFormatPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t supportsTextureGatherLODBiasAMD ;} VkTextureLODGatherFormatPropertiesAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;uint64_t offset ;VkConditionalRenderingFlagsEXT flags ;} VkConditionalRenderingBeginInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t protectedSubmit ;} VkProtectedSubmitInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t protectedMemory ;} VkPhysicalDeviceProtectedMemoryFeatures;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t protectedNoFault ;} VkPhysicalDeviceProtectedMemoryProperties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceQueueCreateFlags flags ;uint32_t queueFamilyIndex ;uint32_t queueIndex ;} VkDeviceQueueInfo2;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCoverageToColorStateCreateFlagsNV flags ;uint32_t coverageToColorEnable ;uint32_t coverageToColorLocation ;} VkPipelineCoverageToColorStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t filterMinmaxSingleComponentFormats ;uint32_t filterMinmaxImageComponentMapping ;} VkPhysicalDeviceSamplerFilterMinmaxProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {float x ;float y ;} VkSampleLocationEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlagBits sampleLocationsPerPixel ;VkExtent2D sampleLocationGridSize ;uint32_t sampleLocationsCount ;VkSampleLocationEXT* pSampleLocations ;} VkSampleLocationsInfoEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t attachmentIndex ;VkSampleLocationsInfoEXT sampleLocationsInfo ;} VkAttachmentSampleLocationsEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t subpassIndex ;VkSampleLocationsInfoEXT sampleLocationsInfo ;} VkSubpassSampleLocationsEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentInitialSampleLocationsCount ;VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations ;uint32_t postSubpassSampleLocationsCount ;VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations ;} VkRenderPassSampleLocationsBeginInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t sampleLocationsEnable ;VkSampleLocationsInfoEXT sampleLocationsInfo ;} VkPipelineSampleLocationsStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlags sampleLocationSampleCounts ;VkExtent2D maxSampleLocationGridSize ;void* sampleLocationCoordinateRange ;uint32_t sampleLocationSubPixelBits ;uint32_t variableSampleLocations ;} VkPhysicalDeviceSampleLocationsPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D maxSampleLocationGridSize ;} VkMultisamplePropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSamplerReductionMode reductionMode ;} VkSamplerReductionModeCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkSamplerReductionModeCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t advancedBlendCoherentOperations ;} VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiDraw ;} VkPhysicalDeviceMultiDrawFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t advancedBlendMaxColorAttachments ;uint32_t advancedBlendIndependentBlend ;uint32_t advancedBlendNonPremultipliedSrcColor ;uint32_t advancedBlendNonPremultipliedDstColor ;uint32_t advancedBlendCorrelatedOverlap ;uint32_t advancedBlendAllOperations ;} VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t srcPremultiplied ;uint32_t dstPremultiplied ;VkBlendOverlapEXT blendOverlap ;} VkPipelineColorBlendAdvancedStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t inlineUniformBlock ;uint32_t descriptorBindingInlineUniformBlockUpdateAfterBind ;} VkPhysicalDeviceInlineUniformBlockFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceInlineUniformBlockFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxInlineUniformBlockSize ;uint32_t maxPerStageDescriptorInlineUniformBlocks ;uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks ;uint32_t maxDescriptorSetInlineUniformBlocks ;uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks ;} VkPhysicalDeviceInlineUniformBlockProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceInlineUniformBlockPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t dataSize ;void* pData ;} VkWriteDescriptorSetInlineUniformBlock;';
        $this->cdefs[] = 'typedef struct {} VkWriteDescriptorSetInlineUniformBlockEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxInlineUniformBlockBindings ;} VkDescriptorPoolInlineUniformBlockCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkDescriptorPoolInlineUniformBlockCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCoverageModulationStateCreateFlagsNV flags ;VkCoverageModulationModeNV coverageModulationMode ;uint32_t coverageModulationTableEnable ;uint32_t coverageModulationTableCount ;void* pCoverageModulationTable ;} VkPipelineCoverageModulationStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewFormatCount ;void* pViewFormats ;} VkImageFormatListCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkImageFormatListCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkValidationCacheCreateFlagsEXT flags ;size_t initialDataSize ;void* pInitialData ;} VkValidationCacheCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkValidationCacheEXT validationCache ;} VkShaderModuleValidationCacheCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPerSetDescriptors ;uint64_t maxMemoryAllocationSize ;} VkPhysicalDeviceMaintenance3Properties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceMaintenance3PropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maintenance4 ;} VkPhysicalDeviceMaintenance4Features;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceMaintenance4FeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t maxBufferSize ;} VkPhysicalDeviceMaintenance4Properties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceMaintenance4PropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maintenance5 ;} VkPhysicalDeviceMaintenance5FeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t earlyFragmentMultisampleCoverageAfterSampleCounting ;uint32_t earlyFragmentSampleMaskTestBeforeSampleCounting ;uint32_t depthStencilSwizzleOneSupport ;uint32_t polygonModePointSize ;uint32_t nonStrictSinglePixelWideLinesUseParallelogram ;uint32_t nonStrictWideLinesUseParallelogram ;} VkPhysicalDeviceMaintenance5PropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachmentFormats ;VkFormat depthAttachmentFormat ;VkFormat stencilAttachmentFormat ;} VkRenderingAreaInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t supported ;} VkDescriptorSetLayoutSupport;';
        $this->cdefs[] = 'typedef struct {} VkDescriptorSetLayoutSupportKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderDrawParameters ;} VkPhysicalDeviceShaderDrawParametersFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderDrawParameterFeatures;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderFloat16 ;uint32_t shaderInt8 ;} VkPhysicalDeviceShaderFloat16Int8Features;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceFloat16Int8FeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkShaderFloatControlsIndependence denormBehaviorIndependence ;VkShaderFloatControlsIndependence roundingModeIndependence ;uint32_t shaderSignedZeroInfNanPreserveFloat16 ;uint32_t shaderSignedZeroInfNanPreserveFloat32 ;uint32_t shaderSignedZeroInfNanPreserveFloat64 ;uint32_t shaderDenormPreserveFloat16 ;uint32_t shaderDenormPreserveFloat32 ;uint32_t shaderDenormPreserveFloat64 ;uint32_t shaderDenormFlushToZeroFloat16 ;uint32_t shaderDenormFlushToZeroFloat32 ;uint32_t shaderDenormFlushToZeroFloat64 ;uint32_t shaderRoundingModeRTEFloat16 ;uint32_t shaderRoundingModeRTEFloat32 ;uint32_t shaderRoundingModeRTEFloat64 ;uint32_t shaderRoundingModeRTZFloat16 ;uint32_t shaderRoundingModeRTZFloat32 ;uint32_t shaderRoundingModeRTZFloat64 ;} VkPhysicalDeviceFloatControlsProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceFloatControlsPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t hostQueryReset ;} VkPhysicalDeviceHostQueryResetFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceHostQueryResetFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {uint64_t consumer ;uint64_t producer ;} VkNativeBufferUsage2ANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* handle ;int16_t stride ;int16_t format ;int16_t usage ;VkNativeBufferUsage2ANDROID usage2 ;} VkNativeBufferANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainImageUsageFlagsANDROID usage ;} VkSwapchainImageCreateInfoANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t sharedImage ;} VkPhysicalDevicePresentationPropertiesANDROID;';
        $this->cdefs[] = 'typedef struct {uint32_t numUsedVgprs ;uint32_t numUsedSgprs ;uint32_t ldsSizePerLocalWorkGroup ;size_t ldsUsageSizeInBytes ;size_t scratchMemUsageInBytes ;} VkShaderResourceUsageAMD;';
        $this->cdefs[] = 'typedef struct {VkShaderStageFlags shaderStageMask ;VkShaderResourceUsageAMD resourceUsage ;uint32_t numPhysicalVgprs ;uint32_t numPhysicalSgprs ;uint32_t numAvailableVgprs ;uint32_t numAvailableSgprs ;void* computeWorkGroupSize ;} VkShaderStatisticsInfoAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkQueueGlobalPriorityKHR globalPriority ;} VkDeviceQueueGlobalPriorityCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {} VkDeviceQueueGlobalPriorityCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t globalPriorityQuery ;} VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t priorityCount ;void* priorities ;} VkQueueFamilyGlobalPriorityPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {} VkQueueFamilyGlobalPriorityPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkObjectType objectType ;uint64_t objectHandle ;const char* pObjectName ;} VkDebugUtilsObjectNameInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkObjectType objectType ;uint64_t objectHandle ;uint64_t tagName ;size_t tagSize ;void* pTag ;} VkDebugUtilsObjectTagInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;const char* pLabelName ;float color [4];} VkDebugUtilsLabelEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDebugUtilsMessengerCreateFlagsEXT flags ;VkDebugUtilsMessageSeverityFlagsEXT messageSeverity ;VkDebugUtilsMessageTypeFlagsEXT messageType ;void* pfnUserCallback ;void* pUserData ;} VkDebugUtilsMessengerCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDebugUtilsMessengerCallbackDataFlagsEXT flags ;const char* pMessageIdName ;int32_t messageIdNumber ;const char* pMessage ;uint32_t queueLabelCount ;VkDebugUtilsLabelEXT* pQueueLabels ;uint32_t cmdBufLabelCount ;VkDebugUtilsLabelEXT* pCmdBufLabels ;uint32_t objectCount ;VkDebugUtilsObjectNameInfoEXT* pObjects ;} VkDebugUtilsMessengerCallbackDataEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceMemoryReport ;} VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemoryReportFlagsEXT flags ;void* pfnUserCallback ;void* pUserData ;} VkDeviceDeviceMemoryReportCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemoryReportFlagsEXT flags ;VkDeviceMemoryReportEventTypeEXT type ;uint64_t memoryObjectId ;uint64_t size ;VkObjectType objectType ;uint64_t objectHandle ;uint32_t heapIndex ;} VkDeviceMemoryReportCallbackDataEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;void* pHostPointer ;} VkImportMemoryHostPointerInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryHostPointerPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t minImportedHostPointerAlignment ;} VkPhysicalDeviceExternalMemoryHostPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;float primitiveOverestimationSize ;float maxExtraPrimitiveOverestimationSize ;float extraPrimitiveOverestimationSizeGranularity ;uint32_t primitiveUnderestimation ;uint32_t conservativePointAndLineRasterization ;uint32_t degenerateTrianglesRasterized ;uint32_t degenerateLinesRasterized ;uint32_t fullyCoveredFragmentShaderInputVariable ;uint32_t conservativeRasterizationPostDepthCoverage ;} VkPhysicalDeviceConservativeRasterizationPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkTimeDomainEXT timeDomain ;} VkCalibratedTimestampInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderEngineCount ;uint32_t shaderArraysPerEngineCount ;uint32_t computeUnitsPerShaderArray ;uint32_t simdPerComputeUnit ;uint32_t wavefrontsPerSimd ;uint32_t wavefrontSize ;uint32_t sgprsPerSimd ;uint32_t minSgprAllocation ;uint32_t maxSgprAllocation ;uint32_t sgprAllocationGranularity ;uint32_t vgprsPerSimd ;uint32_t minVgprAllocation ;uint32_t maxVgprAllocation ;uint32_t vgprAllocationGranularity ;} VkPhysicalDeviceShaderCorePropertiesAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkShaderCorePropertiesFlagsAMD shaderCoreFeatures ;uint32_t activeComputeUnitCount ;} VkPhysicalDeviceShaderCoreProperties2AMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationConservativeStateCreateFlagsEXT flags ;VkConservativeRasterizationModeEXT conservativeRasterizationMode ;float extraPrimitiveOverestimationSize ;} VkPipelineRasterizationConservativeStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderInputAttachmentArrayDynamicIndexing ;uint32_t shaderUniformTexelBufferArrayDynamicIndexing ;uint32_t shaderStorageTexelBufferArrayDynamicIndexing ;uint32_t shaderUniformBufferArrayNonUniformIndexing ;uint32_t shaderSampledImageArrayNonUniformIndexing ;uint32_t shaderStorageBufferArrayNonUniformIndexing ;uint32_t shaderStorageImageArrayNonUniformIndexing ;uint32_t shaderInputAttachmentArrayNonUniformIndexing ;uint32_t shaderUniformTexelBufferArrayNonUniformIndexing ;uint32_t shaderStorageTexelBufferArrayNonUniformIndexing ;uint32_t descriptorBindingUniformBufferUpdateAfterBind ;uint32_t descriptorBindingSampledImageUpdateAfterBind ;uint32_t descriptorBindingStorageImageUpdateAfterBind ;uint32_t descriptorBindingStorageBufferUpdateAfterBind ;uint32_t descriptorBindingUniformTexelBufferUpdateAfterBind ;uint32_t descriptorBindingStorageTexelBufferUpdateAfterBind ;uint32_t descriptorBindingUpdateUnusedWhilePending ;uint32_t descriptorBindingPartiallyBound ;uint32_t descriptorBindingVariableDescriptorCount ;uint32_t runtimeDescriptorArray ;} VkPhysicalDeviceDescriptorIndexingFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceDescriptorIndexingFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxUpdateAfterBindDescriptorsInAllPools ;uint32_t shaderUniformBufferArrayNonUniformIndexingNative ;uint32_t shaderSampledImageArrayNonUniformIndexingNative ;uint32_t shaderStorageBufferArrayNonUniformIndexingNative ;uint32_t shaderStorageImageArrayNonUniformIndexingNative ;uint32_t shaderInputAttachmentArrayNonUniformIndexingNative ;uint32_t robustBufferAccessUpdateAfterBind ;uint32_t quadDivergentImplicitLod ;uint32_t maxPerStageDescriptorUpdateAfterBindSamplers ;uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages ;uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments ;uint32_t maxPerStageUpdateAfterBindResources ;uint32_t maxDescriptorSetUpdateAfterBindSamplers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindSampledImages ;uint32_t maxDescriptorSetUpdateAfterBindStorageImages ;uint32_t maxDescriptorSetUpdateAfterBindInputAttachments ;} VkPhysicalDeviceDescriptorIndexingProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceDescriptorIndexingPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t bindingCount ;void* pBindingFlags ;} VkDescriptorSetLayoutBindingFlagsCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorSetCount ;uint32_t* pDescriptorCounts ;} VkDescriptorSetVariableDescriptorCountAllocateInfo;';
        $this->cdefs[] = 'typedef struct {} VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxVariableDescriptorCount ;} VkDescriptorSetVariableDescriptorCountLayoutSupport;';
        $this->cdefs[] = 'typedef struct {} VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAttachmentDescriptionFlags flags ;VkFormat format ;VkSampleCountFlagBits samples ;VkAttachmentLoadOp loadOp ;VkAttachmentStoreOp storeOp ;VkAttachmentLoadOp stencilLoadOp ;VkAttachmentStoreOp stencilStoreOp ;VkImageLayout initialLayout ;VkImageLayout finalLayout ;} VkAttachmentDescription2;';
        $this->cdefs[] = 'typedef struct {} VkAttachmentDescription2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachment ;VkImageLayout layout ;VkImageAspectFlags aspectMask ;} VkAttachmentReference2;';
        $this->cdefs[] = 'typedef struct {} VkAttachmentReference2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSubpassDescriptionFlags flags ;VkPipelineBindPoint pipelineBindPoint ;uint32_t viewMask ;uint32_t inputAttachmentCount ;VkAttachmentReference2* pInputAttachments ;uint32_t colorAttachmentCount ;VkAttachmentReference2* pColorAttachments ;VkAttachmentReference2* pResolveAttachments ;VkAttachmentReference2* pDepthStencilAttachment ;uint32_t preserveAttachmentCount ;uint32_t* pPreserveAttachments ;} VkSubpassDescription2;';
        $this->cdefs[] = 'typedef struct {} VkSubpassDescription2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t srcSubpass ;uint32_t dstSubpass ;VkPipelineStageFlags srcStageMask ;VkPipelineStageFlags dstStageMask ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;VkDependencyFlags dependencyFlags ;int32_t viewOffset ;} VkSubpassDependency2;';
        $this->cdefs[] = 'typedef struct {} VkSubpassDependency2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassCreateFlags flags ;uint32_t attachmentCount ;VkAttachmentDescription2* pAttachments ;uint32_t subpassCount ;VkSubpassDescription2* pSubpasses ;uint32_t dependencyCount ;VkSubpassDependency2* pDependencies ;uint32_t correlatedViewMaskCount ;uint32_t* pCorrelatedViewMasks ;} VkRenderPassCreateInfo2;';
        $this->cdefs[] = 'typedef struct {} VkRenderPassCreateInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSubpassContents contents ;} VkSubpassBeginInfo;';
        $this->cdefs[] = 'typedef struct {} VkSubpassBeginInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;} VkSubpassEndInfo;';
        $this->cdefs[] = 'typedef struct {} VkSubpassEndInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t timelineSemaphore ;} VkPhysicalDeviceTimelineSemaphoreFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceTimelineSemaphoreFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t maxTimelineSemaphoreValueDifference ;} VkPhysicalDeviceTimelineSemaphoreProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceTimelineSemaphorePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreType semaphoreType ;uint64_t initialValue ;} VkSemaphoreTypeCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkSemaphoreTypeCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreValueCount ;uint64_t* pWaitSemaphoreValues ;uint32_t signalSemaphoreValueCount ;uint64_t* pSignalSemaphoreValues ;} VkTimelineSemaphoreSubmitInfo;';
        $this->cdefs[] = 'typedef struct {} VkTimelineSemaphoreSubmitInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreWaitFlags flags ;uint32_t semaphoreCount ;VkSemaphore* pSemaphores ;uint64_t* pValues ;} VkSemaphoreWaitInfo;';
        $this->cdefs[] = 'typedef struct {} VkSemaphoreWaitInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;uint64_t value ;} VkSemaphoreSignalInfo;';
        $this->cdefs[] = 'typedef struct {} VkSemaphoreSignalInfoKHR;';
        $this->cdefs[] = 'typedef struct {uint32_t binding ;uint32_t divisor ;} VkVertexInputBindingDivisorDescriptionEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t vertexBindingDivisorCount ;VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors ;} VkPipelineVertexInputDivisorStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxVertexAttribDivisor ;} VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pciDomain ;uint32_t pciBus ;uint32_t pciDevice ;uint32_t pciFunction ;} VkPhysicalDevicePCIBusInfoPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* buffer ;} VkImportAndroidHardwareBufferInfoANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t androidHardwareBufferUsage ;} VkAndroidHardwareBufferUsageANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t allocationSize ;uint32_t memoryTypeBits ;} VkAndroidHardwareBufferPropertiesANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;} VkMemoryGetAndroidHardwareBufferInfoANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;uint64_t externalFormat ;VkFormatFeatureFlags formatFeatures ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkAndroidHardwareBufferFormatPropertiesANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t conditionalRenderingEnable ;} VkCommandBufferInheritanceConditionalRenderingInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t externalFormat ;} VkExternalFormatANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t storageBuffer8BitAccess ;uint32_t uniformAndStorageBuffer8BitAccess ;uint32_t storagePushConstant8 ;} VkPhysicalDevice8BitStorageFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDevice8BitStorageFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t conditionalRendering ;uint32_t inheritedConditionalRendering ;} VkPhysicalDeviceConditionalRenderingFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t vulkanMemoryModel ;uint32_t vulkanMemoryModelDeviceScope ;uint32_t vulkanMemoryModelAvailabilityVisibilityChains ;} VkPhysicalDeviceVulkanMemoryModelFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderBufferInt64Atomics ;uint32_t shaderSharedInt64Atomics ;} VkPhysicalDeviceShaderAtomicInt64Features;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderBufferFloat32Atomics ;uint32_t shaderBufferFloat32AtomicAdd ;uint32_t shaderBufferFloat64Atomics ;uint32_t shaderBufferFloat64AtomicAdd ;uint32_t shaderSharedFloat32Atomics ;uint32_t shaderSharedFloat32AtomicAdd ;uint32_t shaderSharedFloat64Atomics ;uint32_t shaderSharedFloat64AtomicAdd ;uint32_t shaderImageFloat32Atomics ;uint32_t shaderImageFloat32AtomicAdd ;uint32_t sparseImageFloat32Atomics ;uint32_t sparseImageFloat32AtomicAdd ;} VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderBufferFloat16Atomics ;uint32_t shaderBufferFloat16AtomicAdd ;uint32_t shaderBufferFloat16AtomicMinMax ;uint32_t shaderBufferFloat32AtomicMinMax ;uint32_t shaderBufferFloat64AtomicMinMax ;uint32_t shaderSharedFloat16Atomics ;uint32_t shaderSharedFloat16AtomicAdd ;uint32_t shaderSharedFloat16AtomicMinMax ;uint32_t shaderSharedFloat32AtomicMinMax ;uint32_t shaderSharedFloat64AtomicMinMax ;uint32_t shaderImageFloat32AtomicMinMax ;uint32_t sparseImageFloat32AtomicMinMax ;} VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t vertexAttributeInstanceRateDivisor ;uint32_t vertexAttributeInstanceRateZeroDivisor ;} VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags checkpointExecutionStageMask ;} VkQueueFamilyCheckpointPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlagBits stage ;void* pCheckpointMarker ;} VkCheckpointDataNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkResolveModeFlags supportedDepthResolveModes ;VkResolveModeFlags supportedStencilResolveModes ;uint32_t independentResolveNone ;uint32_t independentResolve ;} VkPhysicalDeviceDepthStencilResolveProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceDepthStencilResolvePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkResolveModeFlagBits depthResolveMode ;VkResolveModeFlagBits stencilResolveMode ;VkAttachmentReference2* pDepthStencilResolveAttachment ;} VkSubpassDescriptionDepthStencilResolve;';
        $this->cdefs[] = 'typedef struct {} VkSubpassDescriptionDepthStencilResolveKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat decodeMode ;} VkImageViewASTCDecodeModeEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t decodeModeSharedExponent ;} VkPhysicalDeviceASTCDecodeFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t transformFeedback ;uint32_t geometryStreams ;} VkPhysicalDeviceTransformFeedbackFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxTransformFeedbackStreams ;uint32_t maxTransformFeedbackBuffers ;uint64_t maxTransformFeedbackBufferSize ;uint32_t maxTransformFeedbackStreamDataSize ;uint32_t maxTransformFeedbackBufferDataSize ;uint32_t maxTransformFeedbackBufferDataStride ;uint32_t transformFeedbackQueries ;uint32_t transformFeedbackStreamsLinesTriangles ;uint32_t transformFeedbackRasterizationStreamSelect ;uint32_t transformFeedbackDraw ;} VkPhysicalDeviceTransformFeedbackPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationStateStreamCreateFlagsEXT flags ;uint32_t rasterizationStream ;} VkPipelineRasterizationStateStreamCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t representativeFragmentTest ;} VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t representativeFragmentTestEnable ;} VkPipelineRepresentativeFragmentTestStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t exclusiveScissor ;} VkPhysicalDeviceExclusiveScissorFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t exclusiveScissorCount ;VkRect2D* pExclusiveScissors ;} VkPipelineViewportExclusiveScissorStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t cornerSampledImage ;} VkPhysicalDeviceCornerSampledImageFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t computeDerivativeGroupQuads ;uint32_t computeDerivativeGroupLinear ;} VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageFootprint ;} VkPhysicalDeviceShaderImageFootprintFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t dedicatedAllocationImageAliasing ;} VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t indirectCopy ;} VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkQueueFlags supportedQueues ;} VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryDecompression ;} VkPhysicalDeviceMemoryDecompressionFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMemoryDecompressionMethodFlagsNV decompressionMethods ;uint64_t maxDecompressionIndirectCount ;} VkPhysicalDeviceMemoryDecompressionPropertiesNV;';
        $this->cdefs[] = 'typedef struct {uint32_t shadingRatePaletteEntryCount ;void* pShadingRatePaletteEntries ;} VkShadingRatePaletteNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shadingRateImageEnable ;uint32_t viewportCount ;VkShadingRatePaletteNV* pShadingRatePalettes ;} VkPipelineViewportShadingRateImageStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shadingRateImage ;uint32_t shadingRateCoarseSampleOrder ;} VkPhysicalDeviceShadingRateImageFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D shadingRateTexelSize ;uint32_t shadingRatePaletteSize ;uint32_t shadingRateMaxCoarseSamples ;} VkPhysicalDeviceShadingRateImagePropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t invocationMask ;} VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;';
        $this->cdefs[] = 'typedef struct {uint32_t pixelX ;uint32_t pixelY ;uint32_t sample ;} VkCoarseSampleLocationNV;';
        $this->cdefs[] = 'typedef struct {VkShadingRatePaletteEntryNV shadingRate ;uint32_t sampleCount ;uint32_t sampleLocationCount ;VkCoarseSampleLocationNV* pSampleLocations ;} VkCoarseSampleOrderCustomNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCoarseSampleOrderTypeNV sampleOrderType ;uint32_t customSampleOrderCount ;VkCoarseSampleOrderCustomNV* pCustomSampleOrders ;} VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t taskShader ;uint32_t meshShader ;} VkPhysicalDeviceMeshShaderFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxDrawMeshTasksCount ;uint32_t maxTaskWorkGroupInvocations ;void* maxTaskWorkGroupSize ;uint32_t maxTaskTotalMemorySize ;uint32_t maxTaskOutputCount ;uint32_t maxMeshWorkGroupInvocations ;void* maxMeshWorkGroupSize ;uint32_t maxMeshTotalMemorySize ;uint32_t maxMeshOutputVertices ;uint32_t maxMeshOutputPrimitives ;uint32_t maxMeshMultiviewViewCount ;uint32_t meshOutputPerVertexGranularity ;uint32_t meshOutputPerPrimitiveGranularity ;} VkPhysicalDeviceMeshShaderPropertiesNV;';
        $this->cdefs[] = 'typedef struct {uint32_t taskCount ;uint32_t firstTask ;} VkDrawMeshTasksIndirectCommandNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t taskShader ;uint32_t meshShader ;uint32_t multiviewMeshShader ;uint32_t primitiveFragmentShadingRateMeshShader ;uint32_t meshShaderQueries ;} VkPhysicalDeviceMeshShaderFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxTaskWorkGroupTotalCount ;void* maxTaskWorkGroupCount ;uint32_t maxTaskWorkGroupInvocations ;void* maxTaskWorkGroupSize ;uint32_t maxTaskPayloadSize ;uint32_t maxTaskSharedMemorySize ;uint32_t maxTaskPayloadAndSharedMemorySize ;uint32_t maxMeshWorkGroupTotalCount ;void* maxMeshWorkGroupCount ;uint32_t maxMeshWorkGroupInvocations ;void* maxMeshWorkGroupSize ;uint32_t maxMeshSharedMemorySize ;uint32_t maxMeshPayloadAndSharedMemorySize ;uint32_t maxMeshOutputMemorySize ;uint32_t maxMeshPayloadAndOutputMemorySize ;uint32_t maxMeshOutputComponents ;uint32_t maxMeshOutputVertices ;uint32_t maxMeshOutputPrimitives ;uint32_t maxMeshOutputLayers ;uint32_t maxMeshMultiviewViewCount ;uint32_t meshOutputPerVertexGranularity ;uint32_t meshOutputPerPrimitiveGranularity ;uint32_t maxPreferredTaskWorkGroupInvocations ;uint32_t maxPreferredMeshWorkGroupInvocations ;uint32_t prefersLocalInvocationVertexOutput ;uint32_t prefersLocalInvocationPrimitiveOutput ;uint32_t prefersCompactVertexOutput ;uint32_t prefersCompactPrimitiveOutput ;} VkPhysicalDeviceMeshShaderPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t groupCountX ;uint32_t groupCountY ;uint32_t groupCountZ ;} VkDrawMeshTasksIndirectCommandEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRayTracingShaderGroupTypeKHR type ;uint32_t generalShader ;uint32_t closestHitShader ;uint32_t anyHitShader ;uint32_t intersectionShader ;} VkRayTracingShaderGroupCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRayTracingShaderGroupTypeKHR type ;uint32_t generalShader ;uint32_t closestHitShader ;uint32_t anyHitShader ;uint32_t intersectionShader ;void* pShaderGroupCaptureReplayHandle ;} VkRayTracingShaderGroupCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;uint32_t groupCount ;VkRayTracingShaderGroupCreateInfoNV* pGroups ;uint32_t maxRecursionDepth ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkRayTracingPipelineCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;uint32_t groupCount ;VkRayTracingShaderGroupCreateInfoKHR* pGroups ;uint32_t maxPipelineRayRecursionDepth ;void* pLibraryInfo ;void* pLibraryInterface ;VkPipelineDynamicStateCreateInfo* pDynamicState ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkRayTracingPipelineCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer vertexData ;uint64_t vertexOffset ;uint32_t vertexCount ;uint64_t vertexStride ;VkFormat vertexFormat ;VkBuffer indexData ;uint64_t indexOffset ;uint32_t indexCount ;VkIndexType indexType ;VkBuffer transformData ;uint64_t transformOffset ;} VkGeometryTrianglesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer aabbData ;uint32_t numAABBs ;uint32_t stride ;uint64_t offset ;} VkGeometryAABBNV;';
        $this->cdefs[] = 'typedef struct {VkGeometryTrianglesNV triangles ;VkGeometryAABBNV aabbs ;} VkGeometryDataNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkGeometryTypeKHR geometryType ;VkGeometryDataNV geometry ;VkGeometryFlagsKHR flags ;} VkGeometryNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* type ;VkBuildAccelerationStructureFlagsNV flags ;uint32_t instanceCount ;uint32_t geometryCount ;VkGeometryNV* pGeometries ;} VkAccelerationStructureInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t compactedSize ;VkAccelerationStructureInfoNV info ;} VkAccelerationStructureCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureNV accelerationStructure ;VkDeviceMemory memory ;uint64_t memoryOffset ;uint32_t deviceIndexCount ;uint32_t* pDeviceIndices ;} VkBindAccelerationStructureMemoryInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t accelerationStructureCount ;VkAccelerationStructureKHR* pAccelerationStructures ;} VkWriteDescriptorSetAccelerationStructureKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t accelerationStructureCount ;VkAccelerationStructureNV* pAccelerationStructures ;} VkWriteDescriptorSetAccelerationStructureNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureMemoryRequirementsTypeNV type ;VkAccelerationStructureNV accelerationStructure ;} VkAccelerationStructureMemoryRequirementsInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t accelerationStructure ;uint32_t accelerationStructureCaptureReplay ;uint32_t accelerationStructureIndirectBuild ;uint32_t accelerationStructureHostCommands ;uint32_t descriptorBindingAccelerationStructureUpdateAfterBind ;} VkPhysicalDeviceAccelerationStructureFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingPipeline ;uint32_t rayTracingPipelineShaderGroupHandleCaptureReplay ;uint32_t rayTracingPipelineShaderGroupHandleCaptureReplayMixed ;uint32_t rayTracingPipelineTraceRaysIndirect ;uint32_t rayTraversalPrimitiveCulling ;} VkPhysicalDeviceRayTracingPipelineFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayQuery ;} VkPhysicalDeviceRayQueryFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t maxGeometryCount ;uint64_t maxInstanceCount ;uint64_t maxPrimitiveCount ;uint32_t maxPerStageDescriptorAccelerationStructures ;uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures ;uint32_t maxDescriptorSetAccelerationStructures ;uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures ;uint32_t minAccelerationStructureScratchOffsetAlignment ;} VkPhysicalDeviceAccelerationStructurePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderGroupHandleSize ;uint32_t maxRayRecursionDepth ;uint32_t maxShaderGroupStride ;uint32_t shaderGroupBaseAlignment ;uint32_t shaderGroupHandleCaptureReplaySize ;uint32_t maxRayDispatchInvocationCount ;uint32_t shaderGroupHandleAlignment ;uint32_t maxRayHitAttributeSize ;} VkPhysicalDeviceRayTracingPipelinePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderGroupHandleSize ;uint32_t maxRecursionDepth ;uint32_t maxShaderGroupStride ;uint32_t shaderGroupBaseAlignment ;uint64_t maxGeometryCount ;uint64_t maxInstanceCount ;uint64_t maxTriangleCount ;uint32_t maxDescriptorSetAccelerationStructures ;} VkPhysicalDeviceRayTracingPropertiesNV;';
        $this->cdefs[] = 'typedef struct {uint64_t deviceAddress ;uint64_t stride ;uint64_t size ;} VkStridedDeviceAddressRegionKHR;';
        $this->cdefs[] = 'typedef struct {uint32_t width ;uint32_t height ;uint32_t depth ;} VkTraceRaysIndirectCommandKHR;';
        $this->cdefs[] = 'typedef struct {uint64_t raygenShaderRecordAddress ;uint64_t raygenShaderRecordSize ;uint64_t missShaderBindingTableAddress ;uint64_t missShaderBindingTableSize ;uint64_t missShaderBindingTableStride ;uint64_t hitShaderBindingTableAddress ;uint64_t hitShaderBindingTableSize ;uint64_t hitShaderBindingTableStride ;uint64_t callableShaderBindingTableAddress ;uint64_t callableShaderBindingTableSize ;uint64_t callableShaderBindingTableStride ;uint32_t width ;uint32_t height ;uint32_t depth ;} VkTraceRaysIndirectCommand2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingMaintenance1 ;uint32_t rayTracingPipelineTraceRaysIndirect2 ;} VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t drmFormatModifierCount ;void* pDrmFormatModifierProperties ;} VkDrmFormatModifierPropertiesListEXT;';
        $this->cdefs[] = 'typedef struct {uint64_t drmFormatModifier ;uint32_t drmFormatModifierPlaneCount ;VkFormatFeatureFlags drmFormatModifierTilingFeatures ;} VkDrmFormatModifierPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t drmFormatModifier ;VkSharingMode sharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;} VkPhysicalDeviceImageDrmFormatModifierInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t drmFormatModifierCount ;uint64_t* pDrmFormatModifiers ;} VkImageDrmFormatModifierListCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t drmFormatModifier ;uint32_t drmFormatModifierPlaneCount ;VkSubresourceLayout* pPlaneLayouts ;} VkImageDrmFormatModifierExplicitCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t drmFormatModifier ;} VkImageDrmFormatModifierPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags stencilUsage ;} VkImageStencilUsageCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkImageStencilUsageCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMemoryOverallocationBehaviorAMD overallocationBehavior ;} VkDeviceMemoryOverallocationCreateInfoAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityMap ;uint32_t fragmentDensityMapDynamic ;uint32_t fragmentDensityMapNonSubsampledImages ;} VkPhysicalDeviceFragmentDensityMapFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityMapDeferred ;} VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityMapOffset ;} VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D minFragmentDensityTexelSize ;VkExtent2D maxFragmentDensityTexelSize ;uint32_t fragmentDensityInvocations ;} VkPhysicalDeviceFragmentDensityMapPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t subsampledLoads ;uint32_t subsampledCoarseReconstructionEarlyAccess ;uint32_t maxSubsampledArrayLayers ;uint32_t maxDescriptorSetSubsampledSamplers ;} VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D fragmentDensityOffsetGranularity ;} VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAttachmentReference fragmentDensityMapAttachment ;} VkRenderPassFragmentDensityMapCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityOffsetCount ;VkOffset2D* pFragmentDensityOffsets ;} VkSubpassFragmentDensityMapOffsetEndInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t scalarBlockLayout ;} VkPhysicalDeviceScalarBlockLayoutFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t supportsProtected ;} VkSurfaceProtectedCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t uniformBufferStandardLayout ;} VkPhysicalDeviceUniformBufferStandardLayoutFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthClipEnable ;} VkPhysicalDeviceDepthClipEnableFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags ;uint32_t depthClipEnable ;} VkPipelineRasterizationDepthClipStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* heapBudget ;void* heapUsage ;} VkPhysicalDeviceMemoryBudgetPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryPriority ;} VkPhysicalDeviceMemoryPriorityFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;float priority ;} VkMemoryPriorityAllocateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pageableDeviceLocalMemory ;} VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t bufferDeviceAddress ;uint32_t bufferDeviceAddressCaptureReplay ;uint32_t bufferDeviceAddressMultiDevice ;} VkPhysicalDeviceBufferDeviceAddressFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceBufferDeviceAddressFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t bufferDeviceAddress ;uint32_t bufferDeviceAddressCaptureReplay ;uint32_t bufferDeviceAddressMultiDevice ;} VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceBufferAddressFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkBufferDeviceAddressInfo;';
        $this->cdefs[] = 'typedef struct {} VkBufferDeviceAddressInfoKHR;';
        $this->cdefs[] = 'typedef struct {} VkBufferDeviceAddressInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t opaqueCaptureAddress ;} VkBufferOpaqueCaptureAddressCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkBufferOpaqueCaptureAddressCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t deviceAddress ;} VkBufferDeviceAddressCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageViewType imageViewType ;} VkPhysicalDeviceImageViewImageFormatInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t filterCubic ;uint32_t filterCubicMinmax ;} VkFilterCubicImageViewImageFormatPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t imagelessFramebuffer ;} VkPhysicalDeviceImagelessFramebufferFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceImagelessFramebufferFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentImageInfoCount ;void* pAttachmentImageInfos ;} VkFramebufferAttachmentsCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkFramebufferAttachmentsCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateFlags flags ;VkImageUsageFlags usage ;uint32_t width ;uint32_t height ;uint32_t layerCount ;uint32_t viewFormatCount ;void* pViewFormats ;} VkFramebufferAttachmentImageInfo;';
        $this->cdefs[] = 'typedef struct {} VkFramebufferAttachmentImageInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentCount ;VkImageView* pAttachments ;} VkRenderPassAttachmentBeginInfo;';
        $this->cdefs[] = 'typedef struct {} VkRenderPassAttachmentBeginInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t textureCompressionASTC_HDR ;} VkPhysicalDeviceTextureCompressionASTCHDRFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t cooperativeMatrix ;uint32_t cooperativeMatrixRobustBufferAccess ;} VkPhysicalDeviceCooperativeMatrixFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags cooperativeMatrixSupportedStages ;} VkPhysicalDeviceCooperativeMatrixPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t MSize ;uint32_t NSize ;uint32_t KSize ;void* AType ;void* BType ;void* CType ;void* DType ;void* scope ;} VkCooperativeMatrixPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t ycbcrImageArrays ;} VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkDescriptorType descriptorType ;VkSampler sampler ;} VkImageViewHandleInfoNVX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t deviceAddress ;uint64_t size ;} VkImageViewAddressPropertiesNVX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* frameToken ;} VkPresentFrameTokenGGP;';
        $this->cdefs[] = 'typedef struct {VkPipelineCreationFeedbackFlags flags ;uint64_t duration ;} VkPipelineCreationFeedback;';
        $this->cdefs[] = 'typedef struct {} VkPipelineCreationFeedbackEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreationFeedback* pPipelineCreationFeedback ;uint32_t pipelineStageCreationFeedbackCount ;VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks ;} VkPipelineCreationFeedbackCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkPipelineCreationFeedbackCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFullScreenExclusiveEXT fullScreenExclusive ;} VkSurfaceFullScreenExclusiveInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* hmonitor ;} VkSurfaceFullScreenExclusiveWin32InfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fullScreenExclusiveSupported ;} VkSurfaceCapabilitiesFullScreenExclusiveEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentBarrier ;} VkPhysicalDevicePresentBarrierFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentBarrierSupported ;} VkSurfaceCapabilitiesPresentBarrierNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentBarrierEnable ;} VkSwapchainPresentBarrierCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t performanceCounterQueryPools ;uint32_t performanceCounterMultipleQueryPools ;} VkPhysicalDevicePerformanceQueryFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t allowCommandBufferQueryCopies ;} VkPhysicalDevicePerformanceQueryPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceCounterUnitKHR unit ;VkPerformanceCounterScopeKHR scope ;VkPerformanceCounterStorageKHR storage ;uint8_t uuid [16];} VkPerformanceCounterKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceCounterDescriptionFlagsKHR flags ;char name [256];char category [256];char description [256];} VkPerformanceCounterDescriptionKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t queueFamilyIndex ;uint32_t counterIndexCount ;uint32_t* pCounterIndices ;} VkQueryPoolPerformanceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAcquireProfilingLockFlagsKHR flags ;uint64_t timeout ;} VkAcquireProfilingLockInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t counterPassIndex ;} VkPerformanceQuerySubmitInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPerformanceQueriesPerPool ;} VkPerformanceQueryReservationInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkHeadlessSurfaceCreateFlagsEXT flags ;} VkHeadlessSurfaceCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t coverageReductionMode ;} VkPhysicalDeviceCoverageReductionModeFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCoverageReductionStateCreateFlagsNV flags ;VkCoverageReductionModeNV coverageReductionMode ;} VkPipelineCoverageReductionStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCoverageReductionModeNV coverageReductionMode ;VkSampleCountFlagBits rasterizationSamples ;VkSampleCountFlags depthStencilSamples ;VkSampleCountFlags colorSamples ;} VkFramebufferMixedSamplesCombinationNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderIntegerFunctions2 ;} VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;';
        $this->cdefs[] = 'typedef struct {VkPerformanceValueTypeINTEL type ;void* data ;} VkPerformanceValueINTEL;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pUserData ;} VkInitializePerformanceApiInfoINTEL;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkQueryPoolSamplingModeINTEL performanceCountersSampling ;} VkQueryPoolPerformanceQueryCreateInfoINTEL;';
        $this->cdefs[] = 'typedef struct {} VkQueryPoolCreateInfoINTEL;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t marker ;} VkPerformanceMarkerInfoINTEL;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t marker ;} VkPerformanceStreamMarkerInfoINTEL;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceOverrideTypeINTEL type ;uint32_t enable ;uint64_t parameter ;} VkPerformanceOverrideInfoINTEL;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceConfigurationTypeINTEL type ;} VkPerformanceConfigurationAcquireInfoINTEL;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSubgroupClock ;uint32_t shaderDeviceClock ;} VkPhysicalDeviceShaderClockFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t indexTypeUint8 ;} VkPhysicalDeviceIndexTypeUint8FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSMCount ;uint32_t shaderWarpsPerSM ;} VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSMBuiltins ;} VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentShaderSampleInterlock ;uint32_t fragmentShaderPixelInterlock ;uint32_t fragmentShaderShadingRateInterlock ;} VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t separateDepthStencilLayouts ;} VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageLayout stencilLayout ;} VkAttachmentReferenceStencilLayout;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t primitiveTopologyListRestart ;uint32_t primitiveTopologyPatchListRestart ;} VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {} VkAttachmentReferenceStencilLayoutKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageLayout stencilInitialLayout ;VkImageLayout stencilFinalLayout ;} VkAttachmentDescriptionStencilLayout;';
        $this->cdefs[] = 'typedef struct {} VkAttachmentDescriptionStencilLayoutKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineExecutableInfo ;} VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipeline pipeline ;} VkPipelineInfoKHR;';
        $this->cdefs[] = 'typedef struct {} VkPipelineInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags stages ;char name [256];char description [256];uint32_t subgroupSize ;} VkPipelineExecutablePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipeline pipeline ;uint32_t executableIndex ;} VkPipelineExecutableInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;char name [256];char description [256];VkPipelineExecutableStatisticFormatKHR format ;void* value ;} VkPipelineExecutableStatisticKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;char name [256];char description [256];uint32_t isText ;size_t dataSize ;void* pData ;} VkPipelineExecutableInternalRepresentationKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderDemoteToHelperInvocation ;} VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t texelBufferAlignment ;} VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t storageTexelBufferOffsetAlignmentBytes ;uint32_t storageTexelBufferOffsetSingleTexelAlignment ;uint64_t uniformTexelBufferOffsetAlignmentBytes ;uint32_t uniformTexelBufferOffsetSingleTexelAlignment ;} VkPhysicalDeviceTexelBufferAlignmentProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t subgroupSizeControl ;uint32_t computeFullSubgroups ;} VkPhysicalDeviceSubgroupSizeControlFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t minSubgroupSize ;uint32_t maxSubgroupSize ;uint32_t maxComputeWorkgroupSubgroups ;VkShaderStageFlags requiredSubgroupSizeStages ;} VkPhysicalDeviceSubgroupSizeControlProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t requiredSubgroupSize ;} VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {} VkShaderRequiredSubgroupSizeCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderPass renderPass ;uint32_t subpass ;} VkSubpassShadingPipelineCreateInfoHUAWEI;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxSubpassShadingWorkgroupSizeAspectRatio ;} VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* maxWorkGroupCount ;void* maxWorkGroupSize ;uint32_t maxOutputClusterCount ;uint64_t indirectBufferOffsetAlignment ;} VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t opaqueCaptureAddress ;} VkMemoryOpaqueCaptureAddressAllocateInfo;';
        $this->cdefs[] = 'typedef struct {} VkMemoryOpaqueCaptureAddressAllocateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;} VkDeviceMemoryOpaqueCaptureAddressInfo;';
        $this->cdefs[] = 'typedef struct {} VkDeviceMemoryOpaqueCaptureAddressInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rectangularLines ;uint32_t bresenhamLines ;uint32_t smoothLines ;uint32_t stippledRectangularLines ;uint32_t stippledBresenhamLines ;uint32_t stippledSmoothLines ;} VkPhysicalDeviceLineRasterizationFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t lineSubPixelPrecisionBits ;} VkPhysicalDeviceLineRasterizationPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkLineRasterizationModeEXT lineRasterizationMode ;uint32_t stippledLineEnable ;uint32_t lineStippleFactor ;uint16_t lineStipplePattern ;} VkPipelineRasterizationLineStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineCreationCacheControl ;} VkPhysicalDevicePipelineCreationCacheControlFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t storageBuffer16BitAccess ;uint32_t uniformAndStorageBuffer16BitAccess ;uint32_t storagePushConstant16 ;uint32_t storageInputOutput16 ;uint32_t multiview ;uint32_t multiviewGeometryShader ;uint32_t multiviewTessellationShader ;uint32_t variablePointersStorageBuffer ;uint32_t variablePointers ;uint32_t protectedMemory ;uint32_t samplerYcbcrConversion ;uint32_t shaderDrawParameters ;} VkPhysicalDeviceVulkan11Features;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint8_t deviceUUID [16];uint8_t driverUUID [16];void* deviceLUID ;uint32_t deviceNodeMask ;uint32_t deviceLUIDValid ;uint32_t subgroupSize ;VkShaderStageFlags subgroupSupportedStages ;VkSubgroupFeatureFlags subgroupSupportedOperations ;uint32_t subgroupQuadOperationsInAllStages ;VkPointClippingBehavior pointClippingBehavior ;uint32_t maxMultiviewViewCount ;uint32_t maxMultiviewInstanceIndex ;uint32_t protectedNoFault ;uint32_t maxPerSetDescriptors ;uint64_t maxMemoryAllocationSize ;} VkPhysicalDeviceVulkan11Properties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t samplerMirrorClampToEdge ;uint32_t drawIndirectCount ;uint32_t storageBuffer8BitAccess ;uint32_t uniformAndStorageBuffer8BitAccess ;uint32_t storagePushConstant8 ;uint32_t shaderBufferInt64Atomics ;uint32_t shaderSharedInt64Atomics ;uint32_t shaderFloat16 ;uint32_t shaderInt8 ;uint32_t descriptorIndexing ;uint32_t shaderInputAttachmentArrayDynamicIndexing ;uint32_t shaderUniformTexelBufferArrayDynamicIndexing ;uint32_t shaderStorageTexelBufferArrayDynamicIndexing ;uint32_t shaderUniformBufferArrayNonUniformIndexing ;uint32_t shaderSampledImageArrayNonUniformIndexing ;uint32_t shaderStorageBufferArrayNonUniformIndexing ;uint32_t shaderStorageImageArrayNonUniformIndexing ;uint32_t shaderInputAttachmentArrayNonUniformIndexing ;uint32_t shaderUniformTexelBufferArrayNonUniformIndexing ;uint32_t shaderStorageTexelBufferArrayNonUniformIndexing ;uint32_t descriptorBindingUniformBufferUpdateAfterBind ;uint32_t descriptorBindingSampledImageUpdateAfterBind ;uint32_t descriptorBindingStorageImageUpdateAfterBind ;uint32_t descriptorBindingStorageBufferUpdateAfterBind ;uint32_t descriptorBindingUniformTexelBufferUpdateAfterBind ;uint32_t descriptorBindingStorageTexelBufferUpdateAfterBind ;uint32_t descriptorBindingUpdateUnusedWhilePending ;uint32_t descriptorBindingPartiallyBound ;uint32_t descriptorBindingVariableDescriptorCount ;uint32_t runtimeDescriptorArray ;uint32_t samplerFilterMinmax ;uint32_t scalarBlockLayout ;uint32_t imagelessFramebuffer ;uint32_t uniformBufferStandardLayout ;uint32_t shaderSubgroupExtendedTypes ;uint32_t separateDepthStencilLayouts ;uint32_t hostQueryReset ;uint32_t timelineSemaphore ;uint32_t bufferDeviceAddress ;uint32_t bufferDeviceAddressCaptureReplay ;uint32_t bufferDeviceAddressMultiDevice ;uint32_t vulkanMemoryModel ;uint32_t vulkanMemoryModelDeviceScope ;uint32_t vulkanMemoryModelAvailabilityVisibilityChains ;uint32_t shaderOutputViewportIndex ;uint32_t shaderOutputLayer ;uint32_t subgroupBroadcastDynamicId ;} VkPhysicalDeviceVulkan12Features;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDriverId driverID ;char driverName [256];char driverInfo [256];VkConformanceVersion conformanceVersion ;VkShaderFloatControlsIndependence denormBehaviorIndependence ;VkShaderFloatControlsIndependence roundingModeIndependence ;uint32_t shaderSignedZeroInfNanPreserveFloat16 ;uint32_t shaderSignedZeroInfNanPreserveFloat32 ;uint32_t shaderSignedZeroInfNanPreserveFloat64 ;uint32_t shaderDenormPreserveFloat16 ;uint32_t shaderDenormPreserveFloat32 ;uint32_t shaderDenormPreserveFloat64 ;uint32_t shaderDenormFlushToZeroFloat16 ;uint32_t shaderDenormFlushToZeroFloat32 ;uint32_t shaderDenormFlushToZeroFloat64 ;uint32_t shaderRoundingModeRTEFloat16 ;uint32_t shaderRoundingModeRTEFloat32 ;uint32_t shaderRoundingModeRTEFloat64 ;uint32_t shaderRoundingModeRTZFloat16 ;uint32_t shaderRoundingModeRTZFloat32 ;uint32_t shaderRoundingModeRTZFloat64 ;uint32_t maxUpdateAfterBindDescriptorsInAllPools ;uint32_t shaderUniformBufferArrayNonUniformIndexingNative ;uint32_t shaderSampledImageArrayNonUniformIndexingNative ;uint32_t shaderStorageBufferArrayNonUniformIndexingNative ;uint32_t shaderStorageImageArrayNonUniformIndexingNative ;uint32_t shaderInputAttachmentArrayNonUniformIndexingNative ;uint32_t robustBufferAccessUpdateAfterBind ;uint32_t quadDivergentImplicitLod ;uint32_t maxPerStageDescriptorUpdateAfterBindSamplers ;uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages ;uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments ;uint32_t maxPerStageUpdateAfterBindResources ;uint32_t maxDescriptorSetUpdateAfterBindSamplers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindSampledImages ;uint32_t maxDescriptorSetUpdateAfterBindStorageImages ;uint32_t maxDescriptorSetUpdateAfterBindInputAttachments ;VkResolveModeFlags supportedDepthResolveModes ;VkResolveModeFlags supportedStencilResolveModes ;uint32_t independentResolveNone ;uint32_t independentResolve ;uint32_t filterMinmaxSingleComponentFormats ;uint32_t filterMinmaxImageComponentMapping ;uint64_t maxTimelineSemaphoreValueDifference ;VkSampleCountFlags framebufferIntegerColorSampleCounts ;} VkPhysicalDeviceVulkan12Properties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t robustImageAccess ;uint32_t inlineUniformBlock ;uint32_t descriptorBindingInlineUniformBlockUpdateAfterBind ;uint32_t pipelineCreationCacheControl ;uint32_t privateData ;uint32_t shaderDemoteToHelperInvocation ;uint32_t shaderTerminateInvocation ;uint32_t subgroupSizeControl ;uint32_t computeFullSubgroups ;uint32_t synchronization2 ;uint32_t textureCompressionASTC_HDR ;uint32_t shaderZeroInitializeWorkgroupMemory ;uint32_t dynamicRendering ;uint32_t shaderIntegerDotProduct ;uint32_t maintenance4 ;} VkPhysicalDeviceVulkan13Features;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t minSubgroupSize ;uint32_t maxSubgroupSize ;uint32_t maxComputeWorkgroupSubgroups ;VkShaderStageFlags requiredSubgroupSizeStages ;uint32_t maxInlineUniformBlockSize ;uint32_t maxPerStageDescriptorInlineUniformBlocks ;uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks ;uint32_t maxDescriptorSetInlineUniformBlocks ;uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks ;uint32_t maxInlineUniformTotalSize ;uint32_t integerDotProduct8BitUnsignedAccelerated ;uint32_t integerDotProduct8BitSignedAccelerated ;uint32_t integerDotProduct8BitMixedSignednessAccelerated ;uint32_t integerDotProduct4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProduct4x8BitPackedSignedAccelerated ;uint32_t integerDotProduct4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProduct16BitUnsignedAccelerated ;uint32_t integerDotProduct16BitSignedAccelerated ;uint32_t integerDotProduct16BitMixedSignednessAccelerated ;uint32_t integerDotProduct32BitUnsignedAccelerated ;uint32_t integerDotProduct32BitSignedAccelerated ;uint32_t integerDotProduct32BitMixedSignednessAccelerated ;uint32_t integerDotProduct64BitUnsignedAccelerated ;uint32_t integerDotProduct64BitSignedAccelerated ;uint32_t integerDotProduct64BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated ;uint64_t storageTexelBufferOffsetAlignmentBytes ;uint32_t storageTexelBufferOffsetSingleTexelAlignment ;uint64_t uniformTexelBufferOffsetAlignmentBytes ;uint32_t uniformTexelBufferOffsetSingleTexelAlignment ;uint64_t maxBufferSize ;} VkPhysicalDeviceVulkan13Properties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCompilerControlFlagsAMD compilerControlFlags ;} VkPipelineCompilerControlCreateInfoAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceCoherentMemory ;} VkPhysicalDeviceCoherentMemoryFeaturesAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFaultLevel faultLevel ;VkFaultType faultType ;} VkFaultData;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t faultCount ;VkFaultData* pFaults ;void* pfnFaultCallback ;} VkFaultCallbackInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;char name [256];char version [256];VkToolPurposeFlags purposes ;char description [256];char layer [256];} VkPhysicalDeviceToolProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceToolPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* customBorderColor ;VkFormat format ;} VkSamplerCustomBorderColorCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxCustomBorderColorSamplers ;} VkPhysicalDeviceCustomBorderColorPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t customBorderColors ;uint32_t customBorderColorWithoutFormat ;} VkPhysicalDeviceCustomBorderColorFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkComponentMapping components ;uint32_t srgb ;} VkSamplerBorderColorComponentMappingCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t borderColorSwizzle ;uint32_t borderColorSwizzleFromImage ;} VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat vertexFormat ;void* vertexData ;uint64_t vertexStride ;uint32_t maxVertex ;VkIndexType indexType ;void* indexData ;void* transformData ;} VkAccelerationStructureGeometryTrianglesDataKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* data ;uint64_t stride ;} VkAccelerationStructureGeometryAabbsDataKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t arrayOfPointers ;void* data ;} VkAccelerationStructureGeometryInstancesDataKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkGeometryTypeKHR geometryType ;void* geometry ;VkGeometryFlagsKHR flags ;} VkAccelerationStructureGeometryKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureTypeKHR type ;VkBuildAccelerationStructureFlagsKHR flags ;VkBuildAccelerationStructureModeKHR mode ;VkAccelerationStructureKHR srcAccelerationStructure ;VkAccelerationStructureKHR dstAccelerationStructure ;uint32_t geometryCount ;VkAccelerationStructureGeometryKHR* pGeometries ;void* ppGeometries ;void* scratchData ;} VkAccelerationStructureBuildGeometryInfoKHR;';
        $this->cdefs[] = 'typedef struct {uint32_t primitiveCount ;uint32_t primitiveOffset ;uint32_t firstVertex ;uint32_t transformOffset ;} VkAccelerationStructureBuildRangeInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureCreateFlagsKHR createFlags ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;VkAccelerationStructureTypeKHR type ;uint64_t deviceAddress ;} VkAccelerationStructureCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {float minX ;float minY ;float minZ ;float maxX ;float maxY ;float maxZ ;} VkAabbPositionsKHR;';
        $this->cdefs[] = 'typedef struct {} VkAabbPositionsNV;';
        $this->cdefs[] = 'typedef struct {void* matrix ;} VkTransformMatrixKHR;';
        $this->cdefs[] = 'typedef struct {} VkTransformMatrixNV;';
        $this->cdefs[] = 'typedef struct {VkTransformMatrixKHR transform ;uint32_t instanceCustomIndex :24;uint32_t mask :8;uint32_t instanceShaderBindingTableRecordOffset :24;void* flags ;uint64_t accelerationStructureReference ;} VkAccelerationStructureInstanceKHR;';
        $this->cdefs[] = 'typedef struct {} VkAccelerationStructureInstanceNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR accelerationStructure ;} VkAccelerationStructureDeviceAddressInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pVersionData ;} VkAccelerationStructureVersionInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR src ;VkAccelerationStructureKHR dst ;VkCopyAccelerationStructureModeKHR mode ;} VkCopyAccelerationStructureInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR src ;void* dst ;VkCopyAccelerationStructureModeKHR mode ;} VkCopyAccelerationStructureToMemoryInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* src ;VkAccelerationStructureKHR dst ;VkCopyAccelerationStructureModeKHR mode ;} VkCopyMemoryToAccelerationStructureInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPipelineRayPayloadSize ;uint32_t maxPipelineRayHitAttributeSize ;} VkRayTracingPipelineInterfaceCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t libraryCount ;VkPipeline* pLibraries ;} VkPipelineLibraryCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkObjectType objectType ;uint64_t objectHandle ;VkRefreshObjectFlagsKHR flags ;} VkRefreshObjectKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t objectCount ;VkRefreshObjectKHR* pObjects ;} VkRefreshObjectListKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t extendedDynamicState ;} VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t extendedDynamicState2 ;uint32_t extendedDynamicState2LogicOp ;uint32_t extendedDynamicState2PatchControlPoints ;} VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t extendedDynamicState3TessellationDomainOrigin ;uint32_t extendedDynamicState3DepthClampEnable ;uint32_t extendedDynamicState3PolygonMode ;uint32_t extendedDynamicState3RasterizationSamples ;uint32_t extendedDynamicState3SampleMask ;uint32_t extendedDynamicState3AlphaToCoverageEnable ;uint32_t extendedDynamicState3AlphaToOneEnable ;uint32_t extendedDynamicState3LogicOpEnable ;uint32_t extendedDynamicState3ColorBlendEnable ;uint32_t extendedDynamicState3ColorBlendEquation ;uint32_t extendedDynamicState3ColorWriteMask ;uint32_t extendedDynamicState3RasterizationStream ;uint32_t extendedDynamicState3ConservativeRasterizationMode ;uint32_t extendedDynamicState3ExtraPrimitiveOverestimationSize ;uint32_t extendedDynamicState3DepthClipEnable ;uint32_t extendedDynamicState3SampleLocationsEnable ;uint32_t extendedDynamicState3ColorBlendAdvanced ;uint32_t extendedDynamicState3ProvokingVertexMode ;uint32_t extendedDynamicState3LineRasterizationMode ;uint32_t extendedDynamicState3LineStippleEnable ;uint32_t extendedDynamicState3DepthClipNegativeOneToOne ;uint32_t extendedDynamicState3ViewportWScalingEnable ;uint32_t extendedDynamicState3ViewportSwizzle ;uint32_t extendedDynamicState3CoverageToColorEnable ;uint32_t extendedDynamicState3CoverageToColorLocation ;uint32_t extendedDynamicState3CoverageModulationMode ;uint32_t extendedDynamicState3CoverageModulationTableEnable ;uint32_t extendedDynamicState3CoverageModulationTable ;uint32_t extendedDynamicState3CoverageReductionMode ;uint32_t extendedDynamicState3RepresentativeFragmentTestEnable ;uint32_t extendedDynamicState3ShadingRateImageEnable ;} VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t dynamicPrimitiveTopologyUnrestricted ;} VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkBlendFactor srcColorBlendFactor ;VkBlendFactor dstColorBlendFactor ;VkBlendOp colorBlendOp ;VkBlendFactor srcAlphaBlendFactor ;VkBlendFactor dstAlphaBlendFactor ;VkBlendOp alphaBlendOp ;} VkColorBlendEquationEXT;';
        $this->cdefs[] = 'typedef struct {VkBlendOp advancedBlendOp ;uint32_t srcPremultiplied ;uint32_t dstPremultiplied ;VkBlendOverlapEXT blendOverlap ;uint32_t clampResults ;} VkColorBlendAdvancedEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceTransformFlagBitsKHR transform ;} VkRenderPassTransformBeginInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceTransformFlagBitsKHR transform ;} VkCopyCommandTransformInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceTransformFlagBitsKHR transform ;VkRect2D renderArea ;} VkCommandBufferInheritanceRenderPassTransformInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t diagnosticsConfig ;} VkPhysicalDeviceDiagnosticsConfigFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceDiagnosticsConfigFlagsNV flags ;} VkDeviceDiagnosticsConfigCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint8_t pipelineIdentifier [16];VkPipelineMatchControl matchControl ;uint64_t poolEntrySize ;} VkPipelineOfflineCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderZeroInitializeWorkgroupMemory ;} VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSubgroupUniformControlFlow ;} VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t robustBufferAccess2 ;uint32_t robustImageAccess2 ;uint32_t nullDescriptor ;} VkPhysicalDeviceRobustness2FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t robustStorageBufferAccessSizeAlignment ;uint64_t robustUniformBufferAccessSizeAlignment ;} VkPhysicalDeviceRobustness2PropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t robustImageAccess ;} VkPhysicalDeviceImageRobustnessFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceImageRobustnessFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t workgroupMemoryExplicitLayout ;uint32_t workgroupMemoryExplicitLayoutScalarBlockLayout ;uint32_t workgroupMemoryExplicitLayout8BitAccess ;uint32_t workgroupMemoryExplicitLayout16BitAccess ;} VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t constantAlphaColorBlendFactors ;uint32_t events ;uint32_t imageViewFormatReinterpretation ;uint32_t imageViewFormatSwizzle ;uint32_t imageView2DOn3DImage ;uint32_t multisampleArrayImage ;uint32_t mutableComparisonSamplers ;uint32_t pointPolygons ;uint32_t samplerMipLodBias ;uint32_t separateStencilMaskRef ;uint32_t shaderSampleRateInterpolationFunctions ;uint32_t tessellationIsolines ;uint32_t tessellationPointMode ;uint32_t triangleFans ;uint32_t vertexAttributeAccessBeyondStride ;} VkPhysicalDevicePortabilitySubsetFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t minVertexInputBindingStrideAlignment ;} VkPhysicalDevicePortabilitySubsetPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t formatA4R4G4B4 ;uint32_t formatA4B4G4R4 ;} VkPhysicalDevice4444FormatsFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t subpassShading ;} VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t clustercullingShader ;uint32_t multiviewClusterCullingShader ;} VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t srcOffset ;uint64_t dstOffset ;uint64_t size ;} VkBufferCopy2;';
        $this->cdefs[] = 'typedef struct {} VkBufferCopy2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageCopy2;';
        $this->cdefs[] = 'typedef struct {} VkImageCopy2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresourceLayers srcSubresource ;void* srcOffsets ;VkImageSubresourceLayers dstSubresource ;void* dstOffsets ;} VkImageBlit2;';
        $this->cdefs[] = 'typedef struct {} VkImageBlit2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t bufferOffset ;uint32_t bufferRowLength ;uint32_t bufferImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkBufferImageCopy2;';
        $this->cdefs[] = 'typedef struct {} VkBufferImageCopy2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageResolve2;';
        $this->cdefs[] = 'typedef struct {} VkImageResolve2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer srcBuffer ;VkBuffer dstBuffer ;uint32_t regionCount ;VkBufferCopy2* pRegions ;} VkCopyBufferInfo2;';
        $this->cdefs[] = 'typedef struct {} VkCopyBufferInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageCopy2* pRegions ;} VkCopyImageInfo2;';
        $this->cdefs[] = 'typedef struct {} VkCopyImageInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageBlit2* pRegions ;VkFilter filter ;} VkBlitImageInfo2;';
        $this->cdefs[] = 'typedef struct {} VkBlitImageInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer srcBuffer ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkBufferImageCopy2* pRegions ;} VkCopyBufferToImageInfo2;';
        $this->cdefs[] = 'typedef struct {} VkCopyBufferToImageInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkBuffer dstBuffer ;uint32_t regionCount ;VkBufferImageCopy2* pRegions ;} VkCopyImageToBufferInfo2;';
        $this->cdefs[] = 'typedef struct {} VkCopyImageToBufferInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageResolve2* pRegions ;} VkResolveImageInfo2;';
        $this->cdefs[] = 'typedef struct {} VkResolveImageInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderImageInt64Atomics ;uint32_t sparseImageInt64Atomics ;} VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAttachmentReference2* pFragmentShadingRateAttachment ;VkExtent2D shadingRateAttachmentTexelSize ;} VkFragmentShadingRateAttachmentInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D fragmentSize ;void* combinerOps ;} VkPipelineFragmentShadingRateStateCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineFragmentShadingRate ;uint32_t primitiveFragmentShadingRate ;uint32_t attachmentFragmentShadingRate ;} VkPhysicalDeviceFragmentShadingRateFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D minFragmentShadingRateAttachmentTexelSize ;VkExtent2D maxFragmentShadingRateAttachmentTexelSize ;uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio ;uint32_t primitiveFragmentShadingRateWithMultipleViewports ;uint32_t layeredShadingRateAttachments ;uint32_t fragmentShadingRateNonTrivialCombinerOps ;VkExtent2D maxFragmentSize ;uint32_t maxFragmentSizeAspectRatio ;uint32_t maxFragmentShadingRateCoverageSamples ;VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples ;uint32_t fragmentShadingRateWithShaderDepthStencilWrites ;uint32_t fragmentShadingRateWithSampleMask ;uint32_t fragmentShadingRateWithShaderSampleMask ;uint32_t fragmentShadingRateWithConservativeRasterization ;uint32_t fragmentShadingRateWithFragmentShaderInterlock ;uint32_t fragmentShadingRateWithCustomSampleLocations ;uint32_t fragmentShadingRateStrictMultiplyCombiner ;} VkPhysicalDeviceFragmentShadingRatePropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlags sampleCounts ;VkExtent2D fragmentSize ;} VkPhysicalDeviceFragmentShadingRateKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderTerminateInvocation ;} VkPhysicalDeviceShaderTerminateInvocationFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentShadingRateEnums ;uint32_t supersampleFragmentShadingRates ;uint32_t noInvocationFragmentShadingRates ;} VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlagBits maxFragmentShadingRateInvocationCount ;} VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFragmentShadingRateTypeNV shadingRateType ;VkFragmentShadingRateNV shadingRate ;void* combinerOps ;} VkPipelineFragmentShadingRateEnumStateCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t accelerationStructureSize ;uint64_t updateScratchSize ;uint64_t buildScratchSize ;} VkAccelerationStructureBuildSizesInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t image2DViewOf3D ;uint32_t sampler2DViewOf3D ;} VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageSlicedViewOf3D ;} VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentFeedbackLoopDynamicState ;} VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t mutableDescriptorType ;} VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE;';
        $this->cdefs[] = 'typedef struct {uint32_t descriptorTypeCount ;void* pDescriptorTypes ;} VkMutableDescriptorTypeListEXT;';
        $this->cdefs[] = 'typedef struct {} VkMutableDescriptorTypeListVALVE;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t mutableDescriptorTypeListCount ;VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists ;} VkMutableDescriptorTypeCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {} VkMutableDescriptorTypeCreateInfoVALVE;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthClipControl ;} VkPhysicalDeviceDepthClipControlFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t negativeOneToOne ;} VkPipelineViewportDepthClipControlCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t vertexInputDynamicState ;} VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t externalMemoryRDMA ;} VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t binding ;uint32_t stride ;VkVertexInputRate inputRate ;uint32_t divisor ;} VkVertexInputBindingDescription2EXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t location ;uint32_t binding ;VkFormat format ;uint32_t offset ;} VkVertexInputAttributeDescription2EXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t colorWriteEnable ;} VkPhysicalDeviceColorWriteEnableFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentCount ;void* pColorWriteEnables ;} VkPipelineColorWriteCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 srcStageMask ;VkAccessFlags2 srcAccessMask ;VkPipelineStageFlags2 dstStageMask ;VkAccessFlags2 dstAccessMask ;} VkMemoryBarrier2;';
        $this->cdefs[] = 'typedef struct {} VkMemoryBarrier2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 srcStageMask ;VkAccessFlags2 srcAccessMask ;VkPipelineStageFlags2 dstStageMask ;VkAccessFlags2 dstAccessMask ;VkImageLayout oldLayout ;VkImageLayout newLayout ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkImage image ;VkImageSubresourceRange subresourceRange ;} VkImageMemoryBarrier2;';
        $this->cdefs[] = 'typedef struct {} VkImageMemoryBarrier2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 srcStageMask ;VkAccessFlags2 srcAccessMask ;VkPipelineStageFlags2 dstStageMask ;VkAccessFlags2 dstAccessMask ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;} VkBufferMemoryBarrier2;';
        $this->cdefs[] = 'typedef struct {} VkBufferMemoryBarrier2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDependencyFlags dependencyFlags ;uint32_t memoryBarrierCount ;VkMemoryBarrier2* pMemoryBarriers ;uint32_t bufferMemoryBarrierCount ;VkBufferMemoryBarrier2* pBufferMemoryBarriers ;uint32_t imageMemoryBarrierCount ;VkImageMemoryBarrier2* pImageMemoryBarriers ;} VkDependencyInfo;';
        $this->cdefs[] = 'typedef struct {} VkDependencyInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;uint64_t value ;VkPipelineStageFlags2 stageMask ;uint32_t deviceIndex ;} VkSemaphoreSubmitInfo;';
        $this->cdefs[] = 'typedef struct {} VkSemaphoreSubmitInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCommandBuffer commandBuffer ;uint32_t deviceMask ;} VkCommandBufferSubmitInfo;';
        $this->cdefs[] = 'typedef struct {} VkCommandBufferSubmitInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSubmitFlags flags ;uint32_t waitSemaphoreInfoCount ;VkSemaphoreSubmitInfo* pWaitSemaphoreInfos ;uint32_t commandBufferInfoCount ;VkCommandBufferSubmitInfo* pCommandBufferInfos ;uint32_t signalSemaphoreInfoCount ;VkSemaphoreSubmitInfo* pSignalSemaphoreInfos ;} VkSubmitInfo2;';
        $this->cdefs[] = 'typedef struct {} VkSubmitInfo2KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 checkpointExecutionStageMask ;} VkQueueFamilyCheckpointProperties2NV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 stage ;void* pCheckpointMarker ;} VkCheckpointData2NV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t synchronization2 ;} VkPhysicalDeviceSynchronization2Features;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceSynchronization2FeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t hostImageCopy ;} VkPhysicalDeviceHostImageCopyFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t copySrcLayoutCount ;void* pCopySrcLayouts ;uint32_t copyDstLayoutCount ;void* pCopyDstLayouts ;uint8_t optimalTilingLayoutUUID [16];uint32_t identicalMemoryTypeRequirements ;} VkPhysicalDeviceHostImageCopyPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pHostPointer ;uint32_t memoryRowLength ;uint32_t memoryImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkMemoryToImageCopyEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pHostPointer ;uint32_t memoryRowLength ;uint32_t memoryImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkImageToMemoryCopyEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkHostImageCopyFlagsEXT flags ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkMemoryToImageCopyEXT* pRegions ;} VkCopyMemoryToImageInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkHostImageCopyFlagsEXT flags ;VkImage srcImage ;VkImageLayout srcImageLayout ;uint32_t regionCount ;VkImageToMemoryCopyEXT* pRegions ;} VkCopyImageToMemoryInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkHostImageCopyFlagsEXT flags ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageCopy2* pRegions ;} VkCopyImageToImageInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkImageLayout oldLayout ;VkImageLayout newLayout ;VkImageSubresourceRange subresourceRange ;} VkHostImageLayoutTransitionInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t size ;} VkSubresourceHostMemcpySizeEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t optimalDeviceAccess ;uint32_t identicalMemoryLayout ;} VkHostImageCopyDevicePerformanceQueryEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceNoDynamicHostAllocations ;uint32_t deviceDestroyFreesMemory ;uint32_t commandPoolMultipleCommandBuffersRecording ;uint32_t commandPoolResetCommandBuffer ;uint32_t commandBufferSimultaneousUse ;uint32_t secondaryCommandBufferNullOrImagelessFramebuffer ;uint32_t recycleDescriptorSetMemory ;uint32_t recyclePipelineMemory ;uint32_t maxRenderPassSubpasses ;uint32_t maxRenderPassDependencies ;uint32_t maxSubpassInputAttachments ;uint32_t maxSubpassPreserveAttachments ;uint32_t maxFramebufferAttachments ;uint32_t maxDescriptorSetLayoutBindings ;uint32_t maxQueryFaultCount ;uint32_t maxCallbackFaultCount ;uint32_t maxCommandPoolCommandBuffers ;uint64_t maxCommandBufferSize ;} VkPhysicalDeviceVulkanSC10Properties;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t poolEntrySize ;uint32_t poolEntryCount ;} VkPipelinePoolSize;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineCacheCreateInfoCount ;VkPipelineCacheCreateInfo* pPipelineCacheCreateInfos ;uint32_t pipelinePoolSizeCount ;VkPipelinePoolSize* pPipelinePoolSizes ;uint32_t semaphoreRequestCount ;uint32_t commandBufferRequestCount ;uint32_t fenceRequestCount ;uint32_t deviceMemoryRequestCount ;uint32_t bufferRequestCount ;uint32_t imageRequestCount ;uint32_t eventRequestCount ;uint32_t queryPoolRequestCount ;uint32_t bufferViewRequestCount ;uint32_t imageViewRequestCount ;uint32_t layeredImageViewRequestCount ;uint32_t pipelineCacheRequestCount ;uint32_t pipelineLayoutRequestCount ;uint32_t renderPassRequestCount ;uint32_t graphicsPipelineRequestCount ;uint32_t computePipelineRequestCount ;uint32_t descriptorSetLayoutRequestCount ;uint32_t samplerRequestCount ;uint32_t descriptorPoolRequestCount ;uint32_t descriptorSetRequestCount ;uint32_t framebufferRequestCount ;uint32_t commandPoolRequestCount ;uint32_t samplerYcbcrConversionRequestCount ;uint32_t surfaceRequestCount ;uint32_t swapchainRequestCount ;uint32_t displayModeRequestCount ;uint32_t subpassDescriptionRequestCount ;uint32_t attachmentDescriptionRequestCount ;uint32_t descriptorSetLayoutBindingRequestCount ;uint32_t descriptorSetLayoutBindingLimit ;uint32_t maxImageViewMipLevels ;uint32_t maxImageViewArrayLayers ;uint32_t maxLayeredImageViewMipLevels ;uint32_t maxOcclusionQueriesPerPool ;uint32_t maxPipelineStatisticsQueriesPerPool ;uint32_t maxTimestampQueriesPerPool ;uint32_t maxImmutableSamplersPerDescriptorSetLayout ;} VkDeviceObjectReservationCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t commandPoolReservedSize ;uint32_t commandPoolMaxCommandBuffers ;} VkCommandPoolMemoryReservationCreateInfo;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t commandPoolAllocated ;uint64_t commandPoolReservedSize ;uint64_t commandBufferAllocated ;} VkCommandPoolMemoryConsumption;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderAtomicInstructions ;} VkPhysicalDeviceVulkanSC10Features;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t primitivesGeneratedQuery ;uint32_t primitivesGeneratedQueryWithRasterizerDiscard ;uint32_t primitivesGeneratedQueryWithNonZeroStreams ;} VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t legacyDithering ;} VkPhysicalDeviceLegacyDitheringFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t multisampledRenderToSingleSampled ;} VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t optimal ;} VkSubpassResolvePerformanceQueryEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t multisampledRenderToSingleSampledEnable ;VkSampleCountFlagBits rasterizationSamples ;} VkMultisampledRenderToSingleSampledInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineProtectedAccess ;} VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoCodecOperationFlagsKHR videoCodecOperations ;} VkQueueFamilyVideoPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t queryResultStatusSupport ;} VkQueueFamilyQueryResultStatusPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t profileCount ;void* pProfiles ;} VkVideoProfileListInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags imageUsage ;} VkPhysicalDeviceVideoFormatInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkComponentMapping componentMapping ;VkImageCreateFlags imageCreateFlags ;VkImageType imageType ;VkImageTiling imageTiling ;VkImageUsageFlags imageUsageFlags ;} VkVideoFormatPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoCodecOperationFlagBitsKHR videoCodecOperation ;VkVideoChromaSubsamplingFlagsKHR chromaSubsampling ;VkVideoComponentBitDepthFlagsKHR lumaBitDepth ;VkVideoComponentBitDepthFlagsKHR chromaBitDepth ;} VkVideoProfileInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoCapabilityFlagsKHR flags ;uint64_t minBitstreamBufferOffsetAlignment ;uint64_t minBitstreamBufferSizeAlignment ;VkExtent2D pictureAccessGranularity ;VkExtent2D minCodedExtent ;VkExtent2D maxCodedExtent ;uint32_t maxDpbSlots ;uint32_t maxActiveReferencePictures ;VkExtensionProperties stdHeaderVersion ;} VkVideoCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryBindIndex ;VkMemoryRequirements memoryRequirements ;} VkVideoSessionMemoryRequirementsKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryBindIndex ;VkDeviceMemory memory ;uint64_t memoryOffset ;uint64_t memorySize ;} VkBindVideoSessionMemoryInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkOffset2D codedOffset ;VkExtent2D codedExtent ;uint32_t baseArrayLayer ;VkImageView imageViewBinding ;} VkVideoPictureResourceInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;int32_t slotIndex ;VkVideoPictureResourceInfoKHR* pPictureResource ;} VkVideoReferenceSlotInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoDecodeCapabilityFlagsKHR flags ;} VkVideoDecodeCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoDecodeUsageFlagsKHR videoUsageHints ;} VkVideoDecodeUsageInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoDecodeFlagsKHR flags ;VkBuffer srcBuffer ;uint64_t srcBufferOffset ;uint64_t srcBufferRange ;VkVideoPictureResourceInfoKHR dstPictureResource ;VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot ;uint32_t referenceSlotCount ;VkVideoReferenceSlotInfoKHR* pReferenceSlots ;} VkVideoDecodeInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout ;} VkVideoDecodeH264ProfileInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* maxLevelIdc ;VkOffset2D fieldOffsetGranularity ;} VkVideoDecodeH264CapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoDecodeH264SessionParametersAddInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo ;} VkVideoDecodeH264SessionParametersCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pStdPictureInfo ;uint32_t sliceCount ;uint32_t* pSliceOffsets ;} VkVideoDecodeH264PictureInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoDecodeH264DpbSlotInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;} VkVideoDecodeH265ProfileInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* maxLevelIdc ;} VkVideoDecodeH265CapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdVPSCount ;void* pStdVPSs ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoDecodeH265SessionParametersAddInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdVPSCount ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo ;} VkVideoDecodeH265SessionParametersCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pStdPictureInfo ;uint32_t sliceSegmentCount ;uint32_t* pSliceSegmentOffsets ;} VkVideoDecodeH265PictureInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoDecodeH265DpbSlotInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t queueFamilyIndex ;VkVideoSessionCreateFlagsKHR flags ;void* pVideoProfile ;VkFormat pictureFormat ;VkExtent2D maxCodedExtent ;VkFormat referencePictureFormat ;uint32_t maxDpbSlots ;uint32_t maxActiveReferencePictures ;VkExtensionProperties* pStdHeaderVersion ;} VkVideoSessionCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoSessionParametersCreateFlagsKHR flags ;VkVideoSessionParametersKHR videoSessionParametersTemplate ;VkVideoSessionKHR videoSession ;} VkVideoSessionParametersCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t updateSequenceCount ;} VkVideoSessionParametersUpdateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoSessionParametersKHR videoSessionParameters ;} VkVideoEncodeSessionParametersGetInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasOverrides ;} VkVideoEncodeSessionParametersFeedbackInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoBeginCodingFlagsKHR flags ;VkVideoSessionKHR videoSession ;VkVideoSessionParametersKHR videoSessionParameters ;uint32_t referenceSlotCount ;VkVideoReferenceSlotInfoKHR* pReferenceSlots ;} VkVideoBeginCodingInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEndCodingFlagsKHR flags ;} VkVideoEndCodingInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoCodingControlFlagsKHR flags ;} VkVideoCodingControlInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeUsageFlagsKHR videoUsageHints ;VkVideoEncodeContentFlagsKHR videoContentHints ;VkVideoEncodeTuningModeKHR tuningMode ;} VkVideoEncodeUsageInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeFlagsKHR flags ;VkBuffer dstBuffer ;uint64_t dstBufferOffset ;uint64_t dstBufferRange ;VkVideoPictureResourceInfoKHR srcPictureResource ;VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot ;uint32_t referenceSlotCount ;VkVideoReferenceSlotInfoKHR* pReferenceSlots ;uint32_t precedingExternallyEncodedBytes ;} VkVideoEncodeInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags ;} VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t qualityLevel ;} VkVideoEncodeQualityLevelInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pVideoProfile ;uint32_t qualityLevel ;} VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode ;uint32_t preferredRateControlLayerCount ;} VkVideoEncodeQualityLevelPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeRateControlFlagsKHR flags ;VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode ;uint32_t layerCount ;void* pLayers ;uint32_t virtualBufferSizeInMs ;uint32_t initialVirtualBufferSizeInMs ;} VkVideoEncodeRateControlInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t averageBitrate ;uint64_t maxBitrate ;uint32_t frameRateNumerator ;uint32_t frameRateDenominator ;} VkVideoEncodeRateControlLayerInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeCapabilityFlagsKHR flags ;VkVideoEncodeRateControlModeFlagsKHR rateControlModes ;uint32_t maxRateControlLayers ;uint64_t maxBitrate ;uint32_t maxQualityLevels ;VkExtent2D encodeInputPictureGranularity ;VkVideoEncodeFeedbackFlagsKHR supportedEncodeFeedbackFlags ;} VkVideoEncodeCapabilitiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH264CapabilityFlagsEXT flags ;void* maxLevelIdc ;uint32_t maxSliceCount ;uint32_t maxPPictureL0ReferenceCount ;uint32_t maxBPictureL0ReferenceCount ;uint32_t maxL1ReferenceCount ;uint32_t maxTemporalLayerCount ;uint32_t expectDyadicTemporalLayerPattern ;int32_t minQp ;int32_t maxQp ;uint32_t prefersGopRemainingFrames ;uint32_t requiresGopRemainingFrames ;VkVideoEncodeH264StdFlagsEXT stdSyntaxFlags ;} VkVideoEncodeH264CapabilitiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH264RateControlFlagsEXT preferredRateControlFlags ;uint32_t preferredGopFrameCount ;uint32_t preferredIdrPeriod ;uint32_t preferredConsecutiveBFrameCount ;uint32_t preferredTemporalLayerCount ;void* preferredConstantQp ;uint32_t preferredMaxL0ReferenceCount ;uint32_t preferredMaxL1ReferenceCount ;uint32_t preferredStdEntropyCodingModeFlag ;} VkVideoEncodeH264QualityLevelPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMaxLevelIdc ;void* maxLevelIdc ;} VkVideoEncodeH264SessionCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoEncodeH264SessionParametersAddInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoEncodeH264SessionParametersAddInfoEXT* pParametersAddInfo ;} VkVideoEncodeH264SessionParametersCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t writeStdSPS ;uint32_t writeStdPPS ;uint32_t stdSPSId ;uint32_t stdPPSId ;} VkVideoEncodeH264SessionParametersGetInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasStdSPSOverrides ;uint32_t hasStdPPSOverrides ;} VkVideoEncodeH264SessionParametersFeedbackInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoEncodeH264DpbSlotInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t naluSliceEntryCount ;void* pNaluSliceEntries ;void* pStdPictureInfo ;uint32_t generatePrefixNalu ;} VkVideoEncodeH264PictureInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;} VkVideoEncodeH264ProfileInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;int32_t constantQp ;void* pStdSliceHeader ;} VkVideoEncodeH264NaluSliceInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH264RateControlFlagsEXT flags ;uint32_t gopFrameCount ;uint32_t idrPeriod ;uint32_t consecutiveBFrameCount ;uint32_t temporalLayerCount ;} VkVideoEncodeH264RateControlInfoEXT;';
        $this->cdefs[] = 'typedef struct {int32_t qpI ;int32_t qpP ;int32_t qpB ;} VkVideoEncodeH264QpEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t frameISize ;uint32_t framePSize ;uint32_t frameBSize ;} VkVideoEncodeH264FrameSizeEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t useGopRemainingFrames ;uint32_t gopRemainingI ;uint32_t gopRemainingP ;uint32_t gopRemainingB ;} VkVideoEncodeH264GopRemainingFrameInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMinQp ;void* minQp ;uint32_t useMaxQp ;void* maxQp ;uint32_t useMaxFrameSize ;VkVideoEncodeH264FrameSizeEXT maxFrameSize ;} VkVideoEncodeH264RateControlLayerInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH265CapabilityFlagsEXT flags ;void* maxLevelIdc ;uint32_t maxSliceSegmentCount ;VkExtent2D maxTiles ;VkVideoEncodeH265CtbSizeFlagsEXT ctbSizes ;VkVideoEncodeH265TransformBlockSizeFlagsEXT transformBlockSizes ;uint32_t maxPPictureL0ReferenceCount ;uint32_t maxBPictureL0ReferenceCount ;uint32_t maxL1ReferenceCount ;uint32_t maxSubLayerCount ;uint32_t expectDyadicTemporalSubLayerPattern ;int32_t minQp ;int32_t maxQp ;uint32_t prefersGopRemainingFrames ;uint32_t requiresGopRemainingFrames ;VkVideoEncodeH265StdFlagsEXT stdSyntaxFlags ;} VkVideoEncodeH265CapabilitiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH265RateControlFlagsEXT preferredRateControlFlags ;uint32_t preferredGopFrameCount ;uint32_t preferredIdrPeriod ;uint32_t preferredConsecutiveBFrameCount ;uint32_t preferredSubLayerCount ;void* preferredConstantQp ;uint32_t preferredMaxL0ReferenceCount ;uint32_t preferredMaxL1ReferenceCount ;} VkVideoEncodeH265QualityLevelPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMaxLevelIdc ;void* maxLevelIdc ;} VkVideoEncodeH265SessionCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdVPSCount ;void* pStdVPSs ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoEncodeH265SessionParametersAddInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdVPSCount ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoEncodeH265SessionParametersAddInfoEXT* pParametersAddInfo ;} VkVideoEncodeH265SessionParametersCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t writeStdVPS ;uint32_t writeStdSPS ;uint32_t writeStdPPS ;uint32_t stdVPSId ;uint32_t stdSPSId ;uint32_t stdPPSId ;} VkVideoEncodeH265SessionParametersGetInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasStdVPSOverrides ;uint32_t hasStdSPSOverrides ;uint32_t hasStdPPSOverrides ;} VkVideoEncodeH265SessionParametersFeedbackInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t naluSliceSegmentEntryCount ;void* pNaluSliceSegmentEntries ;void* pStdPictureInfo ;} VkVideoEncodeH265PictureInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;int32_t constantQp ;void* pStdSliceSegmentHeader ;} VkVideoEncodeH265NaluSliceSegmentInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH265RateControlFlagsEXT flags ;uint32_t gopFrameCount ;uint32_t idrPeriod ;uint32_t consecutiveBFrameCount ;uint32_t subLayerCount ;} VkVideoEncodeH265RateControlInfoEXT;';
        $this->cdefs[] = 'typedef struct {int32_t qpI ;int32_t qpP ;int32_t qpB ;} VkVideoEncodeH265QpEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t frameISize ;uint32_t framePSize ;uint32_t frameBSize ;} VkVideoEncodeH265FrameSizeEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t useGopRemainingFrames ;uint32_t gopRemainingI ;uint32_t gopRemainingP ;uint32_t gopRemainingB ;} VkVideoEncodeH265GopRemainingFrameInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMinQp ;void* minQp ;uint32_t useMaxQp ;void* maxQp ;uint32_t useMaxFrameSize ;VkVideoEncodeH265FrameSizeEXT maxFrameSize ;} VkVideoEncodeH265RateControlLayerInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;} VkVideoEncodeH265ProfileInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoEncodeH265DpbSlotInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t inheritedViewportScissor2D ;} VkPhysicalDeviceInheritedViewportScissorFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewportScissor2D ;uint32_t viewportDepthCount ;VkViewport* pViewportDepths ;} VkCommandBufferInheritanceViewportScissorInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t ycbcr2plane444Formats ;} VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t provokingVertexLast ;uint32_t transformFeedbackPreservesProvokingVertex ;} VkPhysicalDeviceProvokingVertexFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t provokingVertexModePerPipeline ;uint32_t transformFeedbackPreservesTriangleFanProvokingVertex ;} VkPhysicalDeviceProvokingVertexPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkProvokingVertexModeEXT provokingVertexMode ;} VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;size_t dataSize ;void* pData ;} VkCuModuleCreateInfoNVX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCuModuleNVX module ;const char* pName ;} VkCuFunctionCreateInfoNVX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCuFunctionNVX function ;uint32_t gridDimX ;uint32_t gridDimY ;uint32_t gridDimZ ;uint32_t blockDimX ;uint32_t blockDimY ;uint32_t blockDimZ ;uint32_t sharedMemBytes ;size_t paramCount ;void* pParams ;size_t extraCount ;void* pExtras ;} VkCuLaunchInfoNVX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorBuffer ;uint32_t descriptorBufferCaptureReplay ;uint32_t descriptorBufferImageLayoutIgnored ;uint32_t descriptorBufferPushDescriptors ;} VkPhysicalDeviceDescriptorBufferFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t combinedImageSamplerDescriptorSingleArray ;uint32_t bufferlessPushDescriptors ;uint32_t allowSamplerImageViewPostSubmitCreation ;uint64_t descriptorBufferOffsetAlignment ;uint32_t maxDescriptorBufferBindings ;uint32_t maxResourceDescriptorBufferBindings ;uint32_t maxSamplerDescriptorBufferBindings ;uint32_t maxEmbeddedImmutableSamplerBindings ;uint32_t maxEmbeddedImmutableSamplers ;size_t bufferCaptureReplayDescriptorDataSize ;size_t imageCaptureReplayDescriptorDataSize ;size_t imageViewCaptureReplayDescriptorDataSize ;size_t samplerCaptureReplayDescriptorDataSize ;size_t accelerationStructureCaptureReplayDescriptorDataSize ;size_t samplerDescriptorSize ;size_t combinedImageSamplerDescriptorSize ;size_t sampledImageDescriptorSize ;size_t storageImageDescriptorSize ;size_t uniformTexelBufferDescriptorSize ;size_t robustUniformTexelBufferDescriptorSize ;size_t storageTexelBufferDescriptorSize ;size_t robustStorageTexelBufferDescriptorSize ;size_t uniformBufferDescriptorSize ;size_t robustUniformBufferDescriptorSize ;size_t storageBufferDescriptorSize ;size_t robustStorageBufferDescriptorSize ;size_t inputAttachmentDescriptorSize ;size_t accelerationStructureDescriptorSize ;uint64_t maxSamplerDescriptorBufferRange ;uint64_t maxResourceDescriptorBufferRange ;uint64_t samplerDescriptorBufferAddressSpaceSize ;uint64_t resourceDescriptorBufferAddressSpaceSize ;uint64_t descriptorBufferAddressSpaceSize ;} VkPhysicalDeviceDescriptorBufferPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;size_t combinedImageSamplerDensityMapDescriptorSize ;} VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t address ;uint64_t range ;VkFormat format ;} VkDescriptorAddressInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t address ;VkBufferUsageFlags usage ;} VkDescriptorBufferBindingInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorType type ;void* data ;} VkDescriptorGetInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkBufferCaptureDescriptorDataInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;} VkImageCaptureDescriptorDataInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;} VkImageViewCaptureDescriptorDataInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSampler sampler ;} VkSamplerCaptureDescriptorDataInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR accelerationStructure ;VkAccelerationStructureNV accelerationStructureNV ;} VkAccelerationStructureCaptureDescriptorDataInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* opaqueCaptureDescriptorData ;} VkOpaqueCaptureDescriptorDataCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderIntegerDotProduct ;} VkPhysicalDeviceShaderIntegerDotProductFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t integerDotProduct8BitUnsignedAccelerated ;uint32_t integerDotProduct8BitSignedAccelerated ;uint32_t integerDotProduct8BitMixedSignednessAccelerated ;uint32_t integerDotProduct4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProduct4x8BitPackedSignedAccelerated ;uint32_t integerDotProduct4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProduct16BitUnsignedAccelerated ;uint32_t integerDotProduct16BitSignedAccelerated ;uint32_t integerDotProduct16BitMixedSignednessAccelerated ;uint32_t integerDotProduct32BitUnsignedAccelerated ;uint32_t integerDotProduct32BitSignedAccelerated ;uint32_t integerDotProduct32BitMixedSignednessAccelerated ;uint32_t integerDotProduct64BitUnsignedAccelerated ;uint32_t integerDotProduct64BitSignedAccelerated ;uint32_t integerDotProduct64BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated ;} VkPhysicalDeviceShaderIntegerDotProductProperties;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasPrimary ;uint32_t hasRender ;int64_t primaryMajor ;int64_t primaryMinor ;int64_t renderMajor ;int64_t renderMinor ;} VkPhysicalDeviceDrmPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentShaderBarycentric ;} VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t triStripVertexOrderIndependentOfProvokingVertex ;} VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingMotionBlur ;uint32_t rayTracingMotionBlurPipelineTraceRaysIndirect ;} VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* vertexData ;} VkAccelerationStructureGeometryMotionTrianglesDataNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxInstances ;VkAccelerationStructureMotionInfoFlagsNV flags ;} VkAccelerationStructureMotionInfoNV;';
        $this->cdefs[] = 'typedef struct {float sx ;float a ;float b ;float pvx ;float sy ;float c ;float pvy ;float sz ;float pvz ;float qx ;float qy ;float qz ;float qw ;float tx ;float ty ;float tz ;} VkSRTDataNV;';
        $this->cdefs[] = 'typedef struct {VkSRTDataNV transformT0 ;VkSRTDataNV transformT1 ;uint32_t instanceCustomIndex :24;uint32_t mask :8;uint32_t instanceShaderBindingTableRecordOffset :24;void* flags ;uint64_t accelerationStructureReference ;} VkAccelerationStructureSRTMotionInstanceNV;';
        $this->cdefs[] = 'typedef struct {VkTransformMatrixKHR transformT0 ;VkTransformMatrixKHR transformT1 ;uint32_t instanceCustomIndex :24;uint32_t mask :8;uint32_t instanceShaderBindingTableRecordOffset :24;void* flags ;uint64_t accelerationStructureReference ;} VkAccelerationStructureMatrixMotionInstanceNV;';
        $this->cdefs[] = 'typedef struct {VkAccelerationStructureMotionInstanceTypeNV type ;VkAccelerationStructureMotionInstanceFlagsNV flags ;void* data ;} VkAccelerationStructureMotionInstanceNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetRemoteAddressInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferCollectionFUCHSIA collection ;uint32_t index ;} VkImportMemoryBufferCollectionFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferCollectionFUCHSIA collection ;uint32_t index ;} VkBufferCollectionImageCreateInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferCollectionFUCHSIA collection ;uint32_t index ;} VkBufferCollectionBufferCreateInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t collectionToken ;} VkBufferCollectionCreateInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;uint32_t bufferCount ;uint32_t createInfoIndex ;uint64_t sysmemPixelFormat ;VkFormatFeatureFlags formatFeatures ;void* sysmemColorSpaceIndex ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkBufferCollectionPropertiesFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateInfo createInfo ;VkFormatFeatureFlags requiredFormatFeatures ;void* bufferCollectionConstraints ;} VkBufferConstraintsInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t colorSpace ;} VkSysmemColorSpaceFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateInfo imageCreateInfo ;VkFormatFeatureFlags requiredFormatFeatures ;VkImageFormatConstraintsFlagsFUCHSIA flags ;uint64_t sysmemPixelFormat ;uint32_t colorSpaceCount ;void* pColorSpaces ;} VkImageFormatConstraintsInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t formatConstraintsCount ;VkImageFormatConstraintsInfoFUCHSIA* pFormatConstraints ;void* bufferCollectionConstraints ;VkImageConstraintsInfoFlagsFUCHSIA flags ;} VkImageConstraintsInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t minBufferCount ;uint32_t maxBufferCount ;uint32_t minBufferCountForCamping ;uint32_t minBufferCountForDedicatedSlack ;uint32_t minBufferCountForSharedSlack ;} VkBufferCollectionConstraintsInfoFUCHSIA;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t formatRgba10x6WithoutYCbCrSampler ;} VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormatFeatureFlags2 linearTilingFeatures ;VkFormatFeatureFlags2 optimalTilingFeatures ;VkFormatFeatureFlags2 bufferFeatures ;} VkFormatProperties3;';
        $this->cdefs[] = 'typedef struct {} VkFormatProperties3KHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t drmFormatModifierCount ;void* pDrmFormatModifierProperties ;} VkDrmFormatModifierPropertiesList2EXT;';
        $this->cdefs[] = 'typedef struct {uint64_t drmFormatModifier ;uint32_t drmFormatModifierPlaneCount ;VkFormatFeatureFlags2 drmFormatModifierTilingFeatures ;} VkDrmFormatModifierProperties2EXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;uint64_t externalFormat ;VkFormatFeatureFlags2 formatFeatures ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkAndroidHardwareBufferFormatProperties2ANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachmentFormats ;VkFormat depthAttachmentFormat ;VkFormat stencilAttachmentFormat ;} VkPipelineRenderingCreateInfo;';
        $this->cdefs[] = 'typedef struct {} VkPipelineRenderingCreateInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderingFlags flags ;VkRect2D renderArea ;uint32_t layerCount ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachments ;void* pDepthAttachment ;void* pStencilAttachment ;} VkRenderingInfo;';
        $this->cdefs[] = 'typedef struct {} VkRenderingInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkImageLayout imageLayout ;VkResolveModeFlagBits resolveMode ;VkImageView resolveImageView ;VkImageLayout resolveImageLayout ;VkAttachmentLoadOp loadOp ;VkAttachmentStoreOp storeOp ;void* clearValue ;} VkRenderingAttachmentInfo;';
        $this->cdefs[] = 'typedef struct {} VkRenderingAttachmentInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkImageLayout imageLayout ;VkExtent2D shadingRateAttachmentTexelSize ;} VkRenderingFragmentShadingRateAttachmentInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkImageLayout imageLayout ;} VkRenderingFragmentDensityMapAttachmentInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t dynamicRendering ;} VkPhysicalDeviceDynamicRenderingFeatures;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceDynamicRenderingFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderingFlags flags ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachmentFormats ;VkFormat depthAttachmentFormat ;VkFormat stencilAttachmentFormat ;VkSampleCountFlagBits rasterizationSamples ;} VkCommandBufferInheritanceRenderingInfo;';
        $this->cdefs[] = 'typedef struct {} VkCommandBufferInheritanceRenderingInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t colorAttachmentCount ;void* pColorAttachmentSamples ;VkSampleCountFlagBits depthStencilAttachmentSamples ;} VkAttachmentSampleCountInfoAMD;';
        $this->cdefs[] = 'typedef struct {} VkAttachmentSampleCountInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t perViewAttributes ;uint32_t perViewAttributesPositionXOnly ;} VkMultiviewPerViewAttributesInfoNVX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t minLod ;} VkPhysicalDeviceImageViewMinLodFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;float minLod ;} VkImageViewMinLodCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rasterizationOrderColorAttachmentAccess ;uint32_t rasterizationOrderDepthAttachmentAccess ;uint32_t rasterizationOrderStencilAttachmentAccess ;} VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {} VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t linearColorAttachment ;} VkPhysicalDeviceLinearColorAttachmentFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t graphicsPipelineLibrary ;} VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t graphicsPipelineLibraryFastLinking ;uint32_t graphicsPipelineLibraryIndependentInterpolationDecoration ;} VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkGraphicsPipelineLibraryFlagsEXT flags ;} VkGraphicsPipelineLibraryCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorSetHostMapping ;} VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSetLayout descriptorSetLayout ;uint32_t binding ;} VkDescriptorSetBindingReferenceVALVE;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;size_t descriptorOffset ;uint32_t descriptorSize ;} VkDescriptorSetLayoutHostMappingInfoVALVE;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderModuleIdentifier ;} VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint8_t shaderModuleIdentifierAlgorithmUUID [16];} VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t identifierSize ;void* pIdentifier ;} VkPipelineShaderStageModuleIdentifierCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t identifierSize ;void* identifier ;} VkShaderModuleIdentifierEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageCompressionFlagsEXT flags ;uint32_t compressionControlPlaneCount ;void* pFixedRateFlags ;} VkImageCompressionControlEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageCompressionControl ;} VkPhysicalDeviceImageCompressionControlFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageCompressionFlagsEXT imageCompressionFlags ;VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags ;} VkImageCompressionPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageCompressionControlSwapchain ;} VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresource imageSubresource ;} VkImageSubresource2KHR;';
        $this->cdefs[] = 'typedef struct {} VkImageSubresource2EXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSubresourceLayout subresourceLayout ;} VkSubresourceLayout2KHR;';
        $this->cdefs[] = 'typedef struct {} VkSubresourceLayout2EXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t disallowMerging ;} VkRenderPassCreationControlEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t postMergeSubpassCount ;} VkRenderPassCreationFeedbackInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback ;} VkRenderPassCreationFeedbackCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkSubpassMergeStatusEXT subpassMergeStatus ;char description [256];uint32_t postMergeIndex ;} VkRenderPassSubpassFeedbackInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback ;} VkRenderPassSubpassFeedbackCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t subpassMergeFeedback ;} VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMicromapTypeEXT type ;VkBuildMicromapFlagsEXT flags ;VkBuildMicromapModeEXT mode ;VkMicromapEXT dstMicromap ;uint32_t usageCountsCount ;void* pUsageCounts ;void* ppUsageCounts ;void* data ;void* scratchData ;void* triangleArray ;uint64_t triangleArrayStride ;} VkMicromapBuildInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMicromapCreateFlagsEXT createFlags ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;VkMicromapTypeEXT type ;uint64_t deviceAddress ;} VkMicromapCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pVersionData ;} VkMicromapVersionInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMicromapEXT src ;VkMicromapEXT dst ;VkCopyMicromapModeEXT mode ;} VkCopyMicromapInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMicromapEXT src ;void* dst ;VkCopyMicromapModeEXT mode ;} VkCopyMicromapToMemoryInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* src ;VkMicromapEXT dst ;VkCopyMicromapModeEXT mode ;} VkCopyMemoryToMicromapInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t micromapSize ;uint64_t buildScratchSize ;uint32_t discardable ;} VkMicromapBuildSizesInfoEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t count ;uint32_t subdivisionLevel ;uint32_t format ;} VkMicromapUsageEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t dataOffset ;uint16_t subdivisionLevel ;uint16_t format ;} VkMicromapTriangleEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t micromap ;uint32_t micromapCaptureReplay ;uint32_t micromapHostCommands ;} VkPhysicalDeviceOpacityMicromapFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxOpacity2StateSubdivisionLevel ;uint32_t maxOpacity4StateSubdivisionLevel ;} VkPhysicalDeviceOpacityMicromapPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkIndexType indexType ;void* indexBuffer ;uint64_t indexStride ;uint32_t baseTriangle ;uint32_t usageCountsCount ;void* pUsageCounts ;void* ppUsageCounts ;VkMicromapEXT micromap ;} VkAccelerationStructureTrianglesOpacityMicromapEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t displacementMicromap ;} VkPhysicalDeviceDisplacementMicromapFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxDisplacementMicromapSubdivisionLevel ;} VkPhysicalDeviceDisplacementMicromapPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat displacementBiasAndScaleFormat ;VkFormat displacementVectorFormat ;void* displacementBiasAndScaleBuffer ;uint64_t displacementBiasAndScaleStride ;void* displacementVectorBuffer ;uint64_t displacementVectorStride ;void* displacedMicromapPrimitiveFlags ;uint64_t displacedMicromapPrimitiveFlagsStride ;VkIndexType indexType ;void* indexBuffer ;uint64_t indexStride ;uint32_t baseTriangle ;uint32_t usageCountsCount ;void* pUsageCounts ;void* ppUsageCounts ;VkMicromapEXT micromap ;} VkAccelerationStructureTrianglesDisplacementMicromapNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint8_t pipelineIdentifier [16];} VkPipelinePropertiesIdentifierEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelinePropertiesIdentifier ;} VkPhysicalDevicePipelinePropertiesFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderEarlyAndLateFragmentTests ;} VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t acquireUnmodifiedMemory ;} VkExternalMemoryAcquireUnmodifiedEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExportMetalObjectTypeFlagBitsEXT exportObjectType ;} VkExportMetalObjectCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;} VkExportMetalObjectsInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* mtlDevice ;} VkExportMetalDeviceInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkQueue queue ;void* mtlCommandQueue ;} VkExportMetalCommandQueueInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;void* mtlBuffer ;} VkExportMetalBufferInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* mtlBuffer ;} VkImportMetalBufferInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkImageView imageView ;VkBufferView bufferView ;VkImageAspectFlagBits plane ;void* mtlTexture ;} VkExportMetalTextureInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageAspectFlagBits plane ;void* mtlTexture ;} VkImportMetalTextureInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;void* ioSurface ;} VkExportMetalIOSurfaceInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* ioSurface ;} VkImportMetalIOSurfaceInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkEvent event ;void* mtlSharedEvent ;} VkExportMetalSharedEventInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* mtlSharedEvent ;} VkImportMetalSharedEventInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t nonSeamlessCubeMap ;} VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineRobustness ;} VkPhysicalDevicePipelineRobustnessFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRobustnessBufferBehaviorEXT storageBuffers ;VkPipelineRobustnessBufferBehaviorEXT uniformBuffers ;VkPipelineRobustnessBufferBehaviorEXT vertexInputs ;VkPipelineRobustnessImageBehaviorEXT images ;} VkPipelineRobustnessCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers ;VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers ;VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs ;VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages ;} VkPhysicalDevicePipelineRobustnessPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkOffset2D filterCenter ;VkExtent2D filterSize ;uint32_t numPhases ;} VkImageViewSampleWeightCreateInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t textureSampleWeighted ;uint32_t textureBoxFilter ;uint32_t textureBlockMatch ;} VkPhysicalDeviceImageProcessingFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxWeightFilterPhases ;VkExtent2D maxWeightFilterDimension ;VkExtent2D maxBlockMatchRegion ;VkExtent2D maxBoxFilterBlockSize ;} VkPhysicalDeviceImageProcessingPropertiesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t tileProperties ;} VkPhysicalDeviceTilePropertiesFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent3D tileSize ;VkExtent2D apronSize ;VkOffset2D origin ;} VkTilePropertiesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t amigoProfiling ;} VkPhysicalDeviceAmigoProfilingFeaturesSEC;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t firstDrawTimestamp ;uint64_t swapBufferTimestamp ;} VkAmigoProfilingSubmitInfoSEC;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentFeedbackLoopLayout ;} VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthClampZeroOne ;} VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t reportAddressBinding ;} VkPhysicalDeviceAddressBindingReportFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDeviceAddressBindingFlagsEXT flags ;uint64_t baseAddress ;uint64_t size ;VkDeviceAddressBindingTypeEXT bindingType ;} VkDeviceAddressBindingCallbackDataEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t opticalFlow ;} VkPhysicalDeviceOpticalFlowFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes ;VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes ;uint32_t hintSupported ;uint32_t costSupported ;uint32_t bidirectionalFlowSupported ;uint32_t globalFlowSupported ;uint32_t minWidth ;uint32_t minHeight ;uint32_t maxWidth ;uint32_t maxHeight ;uint32_t maxNumRegionsOfInterest ;} VkPhysicalDeviceOpticalFlowPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkOpticalFlowUsageFlagsNV usage ;} VkOpticalFlowImageFormatInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;} VkOpticalFlowImageFormatPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t width ;uint32_t height ;VkFormat imageFormat ;VkFormat flowVectorFormat ;VkFormat costFormat ;VkOpticalFlowGridSizeFlagsNV outputGridSize ;VkOpticalFlowGridSizeFlagsNV hintGridSize ;VkOpticalFlowPerformanceLevelNV performanceLevel ;VkOpticalFlowSessionCreateFlagsNV flags ;} VkOpticalFlowSessionCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t id ;uint32_t size ;void* pPrivateData ;} VkOpticalFlowSessionCreatePrivateDataInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkOpticalFlowExecuteFlagsNV flags ;uint32_t regionCount ;VkRect2D* pRegions ;} VkOpticalFlowExecuteInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceFault ;uint32_t deviceFaultVendorBinary ;} VkPhysicalDeviceFaultFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkDeviceFaultAddressTypeEXT addressType ;uint64_t reportedAddress ;uint64_t addressPrecision ;} VkDeviceFaultAddressInfoEXT;';
        $this->cdefs[] = 'typedef struct {char description [256];uint64_t vendorFaultCode ;uint64_t vendorFaultData ;} VkDeviceFaultVendorInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t addressInfoCount ;uint32_t vendorInfoCount ;uint64_t vendorBinarySize ;} VkDeviceFaultCountsEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;char description [256];VkDeviceFaultAddressInfoEXT* pAddressInfos ;VkDeviceFaultVendorInfoEXT* pVendorInfos ;void* pVendorBinaryData ;} VkDeviceFaultInfoEXT;';
        $this->cdefs[] = 'typedef struct {uint32_t headerSize ;VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion ;uint32_t vendorID ;uint32_t deviceID ;uint32_t driverVersion ;uint8_t pipelineCacheUUID [16];uint32_t applicationNameOffset ;uint32_t applicationVersion ;uint32_t engineNameOffset ;uint32_t engineVersion ;uint32_t apiVersion ;} VkDeviceFaultVendorBinaryHeaderVersionOneEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineLibraryGroupHandles ;} VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;float depthBiasConstantFactor ;float depthBiasClamp ;float depthBiasSlopeFactor ;} VkDepthBiasInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDepthBiasRepresentationEXT depthBiasRepresentation ;uint32_t depthBiasExact ;} VkDepthBiasRepresentationInfoEXT;';
        $this->cdefs[] = 'typedef struct {uint64_t srcAddress ;uint64_t dstAddress ;uint64_t compressedSize ;uint64_t decompressedSize ;VkMemoryDecompressionMethodFlagsNV decompressionMethod ;} VkDecompressMemoryRegionNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t shaderCoreMask ;uint32_t shaderCoreCount ;uint32_t shaderWarpsPerCore ;} VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderCoreBuiltins ;} VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFrameBoundaryFlagsEXT flags ;uint64_t frameID ;uint32_t imageCount ;VkImage* pImages ;uint32_t bufferCount ;VkBuffer* pBuffers ;uint64_t tagName ;size_t tagSize ;void* pTag ;} VkFrameBoundaryEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t frameBoundary ;} VkPhysicalDeviceFrameBoundaryFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t dynamicRenderingUnusedAttachments ;} VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPresentModeKHR presentMode ;} VkSurfacePresentModeEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPresentScalingFlagsEXT supportedPresentScaling ;VkPresentGravityFlagsEXT supportedPresentGravityX ;VkPresentGravityFlagsEXT supportedPresentGravityY ;VkExtent2D minScaledImageExtent ;VkExtent2D maxScaledImageExtent ;} VkSurfacePresentScalingCapabilitiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentModeCount ;void* pPresentModes ;} VkSurfacePresentModeCompatibilityEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainMaintenance1 ;} VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;VkFence* pFences ;} VkSwapchainPresentFenceInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentModeCount ;void* pPresentModes ;} VkSwapchainPresentModesCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;void* pPresentModes ;} VkSwapchainPresentModeInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPresentScalingFlagsEXT scalingBehavior ;VkPresentGravityFlagsEXT presentGravityX ;VkPresentGravityFlagsEXT presentGravityY ;} VkSwapchainPresentScalingCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;uint32_t imageIndexCount ;uint32_t* pImageIndices ;} VkReleaseSwapchainImagesInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthBiasControl ;uint32_t leastRepresentableValueForceUnormRepresentation ;uint32_t floatRepresentation ;uint32_t depthBiasExact ;} VkPhysicalDeviceDepthBiasControlFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingInvocationReorder ;} VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint ;} VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDirectDriverLoadingFlagsLUNARG flags ;void* pfnGetInstanceProcAddr ;} VkDirectDriverLoadingInfoLUNARG;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkDirectDriverLoadingModeLUNARG mode ;uint32_t driverCount ;VkDirectDriverLoadingInfoLUNARG* pDrivers ;} VkDirectDriverLoadingListLUNARG;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiviewPerViewViewports ;} VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingPositionFetch ;} VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateInfo* pCreateInfo ;VkImageSubresource2KHR* pSubresource ;} VkDeviceImageSubresourceInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t pixelRate ;uint32_t texelRate ;uint32_t fmaRate ;} VkPhysicalDeviceShaderCorePropertiesARM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiviewPerViewRenderAreas ;} VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t perViewRenderAreaCount ;VkRect2D* pPerViewRenderAreas ;} VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pQueriedLowLatencyData ;} VkQueryLowLatencySupportNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMemoryMapFlags flags ;VkDeviceMemory memory ;uint64_t offset ;uint64_t size ;} VkMemoryMapInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkMemoryUnmapFlagsKHR flags ;VkDeviceMemory memory ;} VkMemoryUnmapInfoKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderObject ;} VkPhysicalDeviceShaderObjectFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint8_t shaderBinaryUUID [16];uint32_t shaderBinaryVersion ;} VkPhysicalDeviceShaderObjectPropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkShaderCreateFlagsEXT flags ;VkShaderStageFlagBits stage ;VkShaderStageFlags nextStage ;VkShaderCodeTypeEXT codeType ;size_t codeSize ;void* pCode ;const char* pName ;uint32_t setLayoutCount ;VkDescriptorSetLayout* pSetLayouts ;uint32_t pushConstantRangeCount ;VkPushConstantRange* pPushConstantRanges ;VkSpecializationInfo* pSpecializationInfo ;} VkShaderCreateInfoEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderTileImageColorReadAccess ;uint32_t shaderTileImageDepthReadAccess ;uint32_t shaderTileImageStencilReadAccess ;} VkPhysicalDeviceShaderTileImageFeaturesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderTileImageCoherentReadAccelerated ;uint32_t shaderTileImageReadSampleFromPixelRateInvocation ;uint32_t shaderTileImageReadFromHelperInvocation ;} VkPhysicalDeviceShaderTileImagePropertiesEXT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* buffer ;} VkImportScreenBufferInfoQNX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t allocationSize ;uint32_t memoryTypeBits ;} VkScreenBufferPropertiesQNX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;uint64_t externalFormat ;uint64_t screenUsage ;VkFormatFeatureFlags formatFeatures ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkScreenBufferFormatPropertiesQNX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t externalFormat ;} VkExternalFormatQNX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t screenBufferImport ;} VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t cooperativeMatrix ;uint32_t cooperativeMatrixRobustBufferAccess ;} VkPhysicalDeviceCooperativeMatrixFeaturesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t MSize ;uint32_t NSize ;uint32_t KSize ;VkComponentTypeKHR AType ;VkComponentTypeKHR BType ;VkComponentTypeKHR CType ;VkComponentTypeKHR ResultType ;uint32_t saturatingAccumulation ;VkScopeKHR scope ;} VkCooperativeMatrixPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags cooperativeMatrixSupportedStages ;} VkPhysicalDeviceCooperativeMatrixPropertiesKHR;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxExecutionGraphDepth ;uint32_t maxExecutionGraphShaderOutputNodes ;uint32_t maxExecutionGraphShaderPayloadSize ;uint32_t maxExecutionGraphShaderPayloadCount ;uint32_t executionGraphDispatchAddressAlignment ;} VkPhysicalDeviceShaderEnqueuePropertiesAMDX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderEnqueue ;} VkPhysicalDeviceShaderEnqueueFeaturesAMDX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;void* pLibraryInfo ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkExecutionGraphPipelineCreateInfoAMDX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;const char* pName ;uint32_t index ;} VkPipelineShaderStageNodeCreateInfoAMDX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t size ;} VkExecutionGraphPipelineScratchSizeAMDX;';
        $this->cdefs[] = 'typedef struct {uint32_t nodeIndex ;uint32_t payloadCount ;void* payloads ;uint64_t payloadStride ;} VkDispatchGraphInfoAMDX;';
        $this->cdefs[] = 'typedef struct {uint32_t count ;void* infos ;uint64_t stride ;} VkDispatchGraphCountInfoAMDX;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t cubicRangeClamp ;} VkPhysicalDeviceCubicClampFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t ycbcrDegamma ;} VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t enableYDegamma ;uint32_t enableCbCrDegamma ;} VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t selectableCubicWeights ;} VkPhysicalDeviceCubicWeightsFeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCubicFilterWeightsQCOM cubicWeights ;} VkSamplerCubicWeightsCreateInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkCubicFilterWeightsQCOM cubicWeights ;} VkBlitImageCubicWeightsInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t textureBlockMatch2 ;} VkPhysicalDeviceImageProcessing2FeaturesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D maxBlockMatchWindow ;} VkPhysicalDeviceImageProcessing2PropertiesQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D windowExtent ;VkBlockMatchWindowCompareModeQCOM windowCompareMode ;} VkSamplerBlockMatchWindowCreateInfoQCOM;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorPoolOverallocation ;} VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkLayeredDriverUnderlyingApiMSFT underlyingAPI ;} VkPhysicalDeviceLayeredDriverPropertiesMSFT;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t externalFormatResolve ;} VkPhysicalDeviceExternalFormatResolveFeaturesANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t nullColorAttachmentWithExternalFormatResolve ;VkChromaLocation externalFormatResolveChromaOffsetX ;VkChromaLocation externalFormatResolveChromaOffsetY ;} VkPhysicalDeviceExternalFormatResolvePropertiesANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkFormat colorAttachmentFormat ;} VkAndroidHardwareBufferFormatResolvePropertiesANDROID;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t lowLatencyMode ;uint32_t lowLatencyBoost ;uint32_t minimumIntervalUs ;} VkLatencySleepModeInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore signalSemaphore ;uint64_t value ;} VkLatencySleepInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t presentID ;VkLatencyMarkerNV marker ;} VkSetLatencyMarkerInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;void* pTimings ;} VkGetLatencyMarkerInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t presentID ;uint64_t inputSampleTimeUs ;uint64_t simStartTimeUs ;uint64_t simEndTimeUs ;uint64_t renderSubmitStartTimeUs ;uint64_t renderSubmitEndTimeUs ;uint64_t presentStartTimeUs ;uint64_t presentEndTimeUs ;uint64_t driverStartTimeUs ;uint64_t driverEndTimeUs ;uint64_t osRenderQueueStartTimeUs ;uint64_t osRenderQueueEndTimeUs ;uint64_t gpuRenderStartTimeUs ;uint64_t gpuRenderEndTimeUs ;} VkLatencyTimingsFrameReportNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;VkOutOfBandQueueTypeNV queueType ;} VkOutOfBandQueueTypeInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint64_t presentID ;} VkLatencySubmissionPresentIdNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t latencyModeEnable ;} VkSwapchainLatencyCreateInfoNV;';
        $this->cdefs[] = 'typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentModeCount ;void* pPresentModes ;} VkLatencySurfaceCapabilitiesNV;';
    }

    public function addExtension(string $extension): void
    {
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateInstance(VkInstanceCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkInstance* pInstance);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyInstance(VkInstance instance,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkEnumeratePhysicalDevices(VkInstance instance,uint32_t* pPhysicalDeviceCount,VkPhysicalDevice* pPhysicalDevices);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void* vkGetDeviceProcAddr(VkDevice device,const char* pName);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void* vkGetInstanceProcAddr(VkInstance instance,const char* pName);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice,VkPhysicalDeviceProperties* pProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice,uint32_t* pQueueFamilyPropertyCount,VkQueueFamilyProperties* pQueueFamilyProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice,VkPhysicalDeviceMemoryProperties* pMemoryProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice,void* pFeatures);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice,VkFormat format,VkFormatProperties* pFormatProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkImageTiling tiling,VkImageUsageFlags usage,VkImageCreateFlags flags,VkImageFormatProperties* pImageFormatProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateDevice(VkPhysicalDevice physicalDevice,VkDeviceCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDevice* pDevice);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyDevice(VkDevice device,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'VkResult vkEnumerateInstanceVersion(uint32_t* pApiVersion);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkEnumerateInstanceLayerProperties(uint32_t* pPropertyCount,VkLayerProperties* pProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkEnumerateInstanceExtensionProperties(const char* pLayerName,uint32_t* pPropertyCount,VkExtensionProperties* pProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkLayerProperties* pProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice,const char* pLayerName,uint32_t* pPropertyCount,VkExtensionProperties* pProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetDeviceQueue(VkDevice device,uint32_t queueFamilyIndex,uint32_t queueIndex,VkQueue* pQueue);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkQueueSubmit(VkQueue queue,uint32_t submitCount,VkSubmitInfo* pSubmits,VkFence fence);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkQueueWaitIdle(VkQueue queue);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkDeviceWaitIdle(VkDevice device);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkAllocateMemory(VkDevice device,VkMemoryAllocateInfo* pAllocateInfo,VkAllocationCallbacks* pAllocator,VkDeviceMemory* pMemory);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkFreeMemory(VkDevice device,VkDeviceMemory memory,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkMapMemory(VkDevice device,VkDeviceMemory memory,uint64_t offset,uint64_t size,VkMemoryMapFlags flags,void* ppData);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkUnmapMemory(VkDevice device,VkDeviceMemory memory);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkFlushMappedMemoryRanges(VkDevice device,uint32_t memoryRangeCount,VkMappedMemoryRange* pMemoryRanges);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkInvalidateMappedMemoryRanges(VkDevice device,uint32_t memoryRangeCount,VkMappedMemoryRange* pMemoryRanges);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetDeviceMemoryCommitment(VkDevice device,VkDeviceMemory memory,void* pCommittedMemoryInBytes);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetBufferMemoryRequirements(VkDevice device,VkBuffer buffer,VkMemoryRequirements* pMemoryRequirements);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkBindBufferMemory(VkDevice device,VkBuffer buffer,VkDeviceMemory memory,uint64_t memoryOffset);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetImageMemoryRequirements(VkDevice device,VkImage image,VkMemoryRequirements* pMemoryRequirements);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkBindImageMemory(VkDevice device,VkImage image,VkDeviceMemory memory,uint64_t memoryOffset);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetImageSparseMemoryRequirements(VkDevice device,VkImage image,uint32_t* pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements* pSparseMemoryRequirements);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkSampleCountFlagBits samples,VkImageUsageFlags usage,VkImageTiling tiling,uint32_t* pPropertyCount,VkSparseImageFormatProperties* pProperties);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkQueueBindSparse(VkQueue queue,uint32_t bindInfoCount,VkBindSparseInfo* pBindInfo,VkFence fence);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateFence(VkDevice device,VkFenceCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkFence* pFence);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyFence(VkDevice device,VkFence fence,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkResetFences(VkDevice device,uint32_t fenceCount,VkFence* pFences);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkGetFenceStatus(VkDevice device,VkFence fence);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkWaitForFences(VkDevice device,uint32_t fenceCount,VkFence* pFences,uint32_t waitAll,uint64_t timeout);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateSemaphore(VkDevice device,VkSemaphoreCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSemaphore* pSemaphore);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroySemaphore(VkDevice device,VkSemaphore semaphore,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateEvent(VkDevice device,VkEventCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkEvent* pEvent);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyEvent(VkDevice device,VkEvent event,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkGetEventStatus(VkDevice device,VkEvent event);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkSetEvent(VkDevice device,VkEvent event);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkResetEvent(VkDevice device,VkEvent event);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateQueryPool(VkDevice device,VkQueryPoolCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkQueryPool* pQueryPool);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyQueryPool(VkDevice device,VkQueryPool queryPool,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkGetQueryPoolResults(VkDevice device,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount,size_t dataSize,void* pData,uint64_t stride,VkQueryResultFlags flags);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'void vkResetQueryPool(VkDevice device,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateBuffer(VkDevice device,VkBufferCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkBuffer* pBuffer);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyBuffer(VkDevice device,VkBuffer buffer,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateBufferView(VkDevice device,VkBufferViewCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkBufferView* pView);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyBufferView(VkDevice device,VkBufferView bufferView,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateImage(VkDevice device,VkImageCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkImage* pImage);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyImage(VkDevice device,VkImage image,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetImageSubresourceLayout(VkDevice device,VkImage image,VkImageSubresource* pSubresource,VkSubresourceLayout* pLayout);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateImageView(VkDevice device,VkImageViewCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkImageView* pView);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyImageView(VkDevice device,VkImageView imageView,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateShaderModule(VkDevice device,VkShaderModuleCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkShaderModule* pShaderModule);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyShaderModule(VkDevice device,VkShaderModule shaderModule,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreatePipelineCache(VkDevice device,VkPipelineCacheCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkPipelineCache* pPipelineCache);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyPipelineCache(VkDevice device,VkPipelineCache pipelineCache,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkGetPipelineCacheData(VkDevice device,VkPipelineCache pipelineCache,size_t* pDataSize,void* pData);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkMergePipelineCaches(VkDevice device,VkPipelineCache dstCache,uint32_t srcCacheCount,VkPipelineCache* pSrcCaches);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateGraphicsPipelines(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkGraphicsPipelineCreateInfo* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateComputePipelines(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkComputePipelineCreateInfo* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);';
        if($extension === 'VK_HUAWEI_subpass_shading') $this->cdefs[] = 'VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device,VkRenderPass renderpass,VkExtent2D* pMaxWorkgroupSize);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyPipeline(VkDevice device,VkPipeline pipeline,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreatePipelineLayout(VkDevice device,VkPipelineLayoutCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkPipelineLayout* pPipelineLayout);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyPipelineLayout(VkDevice device,VkPipelineLayout pipelineLayout,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateSampler(VkDevice device,VkSamplerCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSampler* pSampler);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroySampler(VkDevice device,VkSampler sampler,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateDescriptorSetLayout(VkDevice device,VkDescriptorSetLayoutCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDescriptorSetLayout* pSetLayout);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyDescriptorSetLayout(VkDevice device,VkDescriptorSetLayout descriptorSetLayout,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateDescriptorPool(VkDevice device,VkDescriptorPoolCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDescriptorPool* pDescriptorPool);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyDescriptorPool(VkDevice device,VkDescriptorPool descriptorPool,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkResetDescriptorPool(VkDevice device,VkDescriptorPool descriptorPool,VkDescriptorPoolResetFlags flags);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkAllocateDescriptorSets(VkDevice device,VkDescriptorSetAllocateInfo* pAllocateInfo,VkDescriptorSet* pDescriptorSets);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkFreeDescriptorSets(VkDevice device,VkDescriptorPool descriptorPool,uint32_t descriptorSetCount,VkDescriptorSet* pDescriptorSets);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkUpdateDescriptorSets(VkDevice device,uint32_t descriptorWriteCount,VkWriteDescriptorSet* pDescriptorWrites,uint32_t descriptorCopyCount,VkCopyDescriptorSet* pDescriptorCopies);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateFramebuffer(VkDevice device,VkFramebufferCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkFramebuffer* pFramebuffer);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyFramebuffer(VkDevice device,VkFramebuffer framebuffer,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateRenderPass(VkDevice device,VkRenderPassCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkRenderPass* pRenderPass);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyRenderPass(VkDevice device,VkRenderPass renderPass,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkGetRenderAreaGranularity(VkDevice device,VkRenderPass renderPass,VkExtent2D* pGranularity);';
        if($extension === 'VK_KHR_maintenance5') $this->cdefs[] = 'void vkGetRenderingAreaGranularityKHR(VkDevice device,VkRenderingAreaInfoKHR* pRenderingAreaInfo,VkExtent2D* pGranularity);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkCreateCommandPool(VkDevice device,VkCommandPoolCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCommandPool* pCommandPool);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkDestroyCommandPool(VkDevice device,VkCommandPool commandPool,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkResetCommandPool(VkDevice device,VkCommandPool commandPool,VkCommandPoolResetFlags flags);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkAllocateCommandBuffers(VkDevice device,VkCommandBufferAllocateInfo* pAllocateInfo,VkCommandBuffer* pCommandBuffers);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkFreeCommandBuffers(VkDevice device,VkCommandPool commandPool,uint32_t commandBufferCount,VkCommandBuffer* pCommandBuffers);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer,VkCommandBufferBeginInfo* pBeginInfo);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer,VkCommandBufferResetFlags flags);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdBindPipeline(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipeline pipeline);';
        if($extension === 'VK_EXT_attachment_feedback_loop_dynamic_state') $this->cdefs[] = 'void vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer,VkImageAspectFlags aspectMask);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetViewport(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkViewport* pViewports);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetScissor(VkCommandBuffer commandBuffer,uint32_t firstScissor,uint32_t scissorCount,VkRect2D* pScissors);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetLineWidth(VkCommandBuffer commandBuffer,float lineWidth);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetDepthBias(VkCommandBuffer commandBuffer,float depthBiasConstantFactor,float depthBiasClamp,float depthBiasSlopeFactor);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer,void* blendConstants);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer,float minDepthBounds,float maxDepthBounds);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t compareMask);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t writeMask);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetStencilReference(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t reference);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t firstSet,uint32_t descriptorSetCount,VkDescriptorSet* pDescriptorSets,uint32_t dynamicOffsetCount,uint32_t* pDynamicOffsets);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkIndexType indexType);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer,uint32_t firstBinding,uint32_t bindingCount,VkBuffer* pBuffers,void* pOffsets);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdDraw(VkCommandBuffer commandBuffer,uint32_t vertexCount,uint32_t instanceCount,uint32_t firstVertex,uint32_t firstInstance);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdDrawIndexed(VkCommandBuffer commandBuffer,uint32_t indexCount,uint32_t instanceCount,uint32_t firstIndex,int32_t vertexOffset,uint32_t firstInstance);';
        if($extension === 'VK_EXT_multi_draw') $this->cdefs[] = 'void vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer,uint32_t drawCount,VkMultiDrawInfoEXT* pVertexInfo,uint32_t instanceCount,uint32_t firstInstance,uint32_t stride);';
        if($extension === 'VK_EXT_multi_draw') $this->cdefs[] = 'void vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer,uint32_t drawCount,VkMultiDrawIndexedInfoEXT* pIndexInfo,uint32_t instanceCount,uint32_t firstInstance,uint32_t stride,void* pVertexOffset);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdDrawIndirect(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdDispatch(VkCommandBuffer commandBuffer,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset);';
        if($extension === 'VK_HUAWEI_subpass_shading') $this->cdefs[] = 'void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer);';
        if($extension === 'VK_HUAWEI_cluster_culling_shader') $this->cdefs[] = 'void vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);';
        if($extension === 'VK_HUAWEI_cluster_culling_shader') $this->cdefs[] = 'void vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset);';
        if($extension === 'VK_NV_device_generated_commands_compute') $this->cdefs[] = 'void vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipeline pipeline);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdCopyBuffer(VkCommandBuffer commandBuffer,VkBuffer srcBuffer,VkBuffer dstBuffer,uint32_t regionCount,VkBufferCopy* pRegions);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdCopyImage(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkImageCopy* pRegions);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdBlitImage(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkImageBlit* pRegions,VkFilter filter);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer,VkBuffer srcBuffer,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkBufferImageCopy* pRegions);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkBuffer dstBuffer,uint32_t regionCount,VkBufferImageCopy* pRegions);';
        if($extension === 'VK_NV_copy_memory_indirect') $this->cdefs[] = 'void vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer,uint64_t copyBufferAddress,uint32_t copyCount,uint32_t stride);';
        if($extension === 'VK_NV_copy_memory_indirect') $this->cdefs[] = 'void vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer,uint64_t copyBufferAddress,uint32_t copyCount,uint32_t stride,VkImage dstImage,VkImageLayout dstImageLayout,VkImageSubresourceLayers* pImageSubresources);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer,VkBuffer dstBuffer,uint64_t dstOffset,uint64_t dataSize,void* pData);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdFillBuffer(VkCommandBuffer commandBuffer,VkBuffer dstBuffer,uint64_t dstOffset,uint64_t size,uint32_t data);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdClearColorImage(VkCommandBuffer commandBuffer,VkImage image,VkImageLayout imageLayout,void* pColor,uint32_t rangeCount,VkImageSubresourceRange* pRanges);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer,VkImage image,VkImageLayout imageLayout,VkClearDepthStencilValue* pDepthStencil,uint32_t rangeCount,VkImageSubresourceRange* pRanges);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdClearAttachments(VkCommandBuffer commandBuffer,uint32_t attachmentCount,VkClearAttachment* pAttachments,uint32_t rectCount,VkClearRect* pRects);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdResolveImage(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkImageResolve* pRegions);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdSetEvent(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags stageMask);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdResetEvent(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags stageMask);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdWaitEvents(VkCommandBuffer commandBuffer,uint32_t eventCount,VkEvent* pEvents,VkPipelineStageFlags srcStageMask,VkPipelineStageFlags dstStageMask,uint32_t memoryBarrierCount,VkMemoryBarrier* pMemoryBarriers,uint32_t bufferMemoryBarrierCount,VkBufferMemoryBarrier* pBufferMemoryBarriers,uint32_t imageMemoryBarrierCount,VkImageMemoryBarrier* pImageMemoryBarriers);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer,VkPipelineStageFlags srcStageMask,VkPipelineStageFlags dstStageMask,VkDependencyFlags dependencyFlags,uint32_t memoryBarrierCount,VkMemoryBarrier* pMemoryBarriers,uint32_t bufferMemoryBarrierCount,VkBufferMemoryBarrier* pBufferMemoryBarriers,uint32_t imageMemoryBarrierCount,VkImageMemoryBarrier* pImageMemoryBarriers);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdBeginQuery(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query,VkQueryControlFlags flags);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdEndQuery(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query);';
        if($extension === 'VK_EXT_conditional_rendering') $this->cdefs[] = 'void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer,VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);';
        if($extension === 'VK_EXT_conditional_rendering') $this->cdefs[] = 'void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdResetQueryPool(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer,VkPipelineStageFlagBits pipelineStage,VkQueryPool queryPool,uint32_t query);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount,VkBuffer dstBuffer,uint64_t dstOffset,uint64_t stride,VkQueryResultFlags flags);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdPushConstants(VkCommandBuffer commandBuffer,VkPipelineLayout layout,VkShaderStageFlags stageFlags,uint32_t offset,uint32_t size,void* pValues);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer,VkRenderPassBeginInfo* pRenderPassBegin,VkSubpassContents contents);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdNextSubpass(VkCommandBuffer commandBuffer,VkSubpassContents contents);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdEndRenderPass(VkCommandBuffer commandBuffer);';
        if($extension === 'VK_VERSION_1_0') $this->cdefs[] = 'void vkCmdExecuteCommands(VkCommandBuffer commandBuffer,uint32_t commandBufferCount,VkCommandBuffer* pCommandBuffers);';
        if($extension === 'VK_KHR_android_surface') $this->cdefs[] = 'VkResult vkCreateAndroidSurfaceKHR(VkInstance instance,VkAndroidSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_KHR_display') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPropertiesKHR* pProperties);';
        if($extension === 'VK_KHR_display') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPlanePropertiesKHR* pProperties);';
        if($extension === 'VK_KHR_display') $this->cdefs[] = 'VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice,uint32_t planeIndex,uint32_t* pDisplayCount,VkDisplayKHR* pDisplays);';
        if($extension === 'VK_KHR_display') $this->cdefs[] = 'VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice,VkDisplayKHR display,uint32_t* pPropertyCount,VkDisplayModePropertiesKHR* pProperties);';
        if($extension === 'VK_KHR_display') $this->cdefs[] = 'VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice,VkDisplayKHR display,VkDisplayModeCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDisplayModeKHR* pMode);';
        if($extension === 'VK_KHR_display') $this->cdefs[] = 'VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice,VkDisplayModeKHR mode,uint32_t planeIndex,VkDisplayPlaneCapabilitiesKHR* pCapabilities);';
        if($extension === 'VK_KHR_display') $this->cdefs[] = 'VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance,VkDisplaySurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_KHR_display_swapchain') $this->cdefs[] = 'VkResult vkCreateSharedSwapchainsKHR(VkDevice device,uint32_t swapchainCount,VkSwapchainCreateInfoKHR* pCreateInfos,VkAllocationCallbacks* pAllocator,VkSwapchainKHR* pSwapchains);';
        if($extension === 'VK_KHR_surface') $this->cdefs[] = 'void vkDestroySurfaceKHR(VkInstance instance,VkSurfaceKHR surface,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_KHR_surface') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,VkSurfaceKHR surface,void* pSupported);';
        if($extension === 'VK_KHR_surface') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);';
        if($extension === 'VK_KHR_surface') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pSurfaceFormatCount,VkSurfaceFormatKHR* pSurfaceFormats);';
        if($extension === 'VK_KHR_surface') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pPresentModeCount,void* pPresentModes);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkCreateSwapchainKHR(VkDevice device,VkSwapchainCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSwapchainKHR* pSwapchain);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'void vkDestroySwapchainKHR(VkDevice device,VkSwapchainKHR swapchain,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkGetSwapchainImagesKHR(VkDevice device,VkSwapchainKHR swapchain,uint32_t* pSwapchainImageCount,VkImage* pSwapchainImages);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkAcquireNextImageKHR(VkDevice device,VkSwapchainKHR swapchain,uint64_t timeout,VkSemaphore semaphore,VkFence fence,uint32_t* pImageIndex);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkQueuePresentKHR(VkQueue queue,VkPresentInfoKHR* pPresentInfo);';
        if($extension === 'VK_NN_vi_surface') $this->cdefs[] = 'VkResult vkCreateViSurfaceNN(VkInstance instance,VkViSurfaceCreateInfoNN* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_KHR_wayland_surface') $this->cdefs[] = 'VkResult vkCreateWaylandSurfaceKHR(VkInstance instance,VkWaylandSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_KHR_wayland_surface') $this->cdefs[] = 'uint32_t vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* display);';
        if($extension === 'VK_KHR_win32_surface') $this->cdefs[] = 'VkResult vkCreateWin32SurfaceKHR(VkInstance instance,VkWin32SurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_KHR_win32_surface') $this->cdefs[] = 'uint32_t vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex);';
        if($extension === 'VK_KHR_xlib_surface') $this->cdefs[] = 'VkResult vkCreateXlibSurfaceKHR(VkInstance instance,VkXlibSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_KHR_xlib_surface') $this->cdefs[] = 'uint32_t vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* dpy,void* visualID);';
        if($extension === 'VK_KHR_xcb_surface') $this->cdefs[] = 'VkResult vkCreateXcbSurfaceKHR(VkInstance instance,VkXcbSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_KHR_xcb_surface') $this->cdefs[] = 'uint32_t vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* connection,void* visual_id);';
        if($extension === 'VK_EXT_directfb_surface') $this->cdefs[] = 'VkResult vkCreateDirectFBSurfaceEXT(VkInstance instance,VkDirectFBSurfaceCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_EXT_directfb_surface') $this->cdefs[] = 'uint32_t vkGetPhysicalDeviceDirectFBPresentationSupportEXT(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* dfb);';
        if($extension === 'VK_FUCHSIA_imagepipe_surface') $this->cdefs[] = 'VkResult vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance,VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_GGP_stream_descriptor_surface') $this->cdefs[] = 'VkResult vkCreateStreamDescriptorSurfaceGGP(VkInstance instance,VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_QNX_screen_surface') $this->cdefs[] = 'VkResult vkCreateScreenSurfaceQNX(VkInstance instance,VkScreenSurfaceCreateInfoQNX* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_QNX_screen_surface') $this->cdefs[] = 'uint32_t vkGetPhysicalDeviceScreenPresentationSupportQNX(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* window);';
        if($extension === 'VK_EXT_debug_report') $this->cdefs[] = 'VkResult vkCreateDebugReportCallbackEXT(VkInstance instance,VkDebugReportCallbackCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDebugReportCallbackEXT* pCallback);';
        if($extension === 'VK_EXT_debug_report') $this->cdefs[] = 'void vkDestroyDebugReportCallbackEXT(VkInstance instance,VkDebugReportCallbackEXT callback,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_EXT_debug_report') $this->cdefs[] = 'void vkDebugReportMessageEXT(VkInstance instance,VkDebugReportFlagsEXT flags,VkDebugReportObjectTypeEXT objectType,uint64_t object,size_t location,int32_t messageCode,const char* pLayerPrefix,const char* pMessage);';
        if($extension === 'VK_EXT_debug_marker') $this->cdefs[] = 'VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device,VkDebugMarkerObjectNameInfoEXT* pNameInfo);';
        if($extension === 'VK_EXT_debug_marker') $this->cdefs[] = 'VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device,VkDebugMarkerObjectTagInfoEXT* pTagInfo);';
        if($extension === 'VK_EXT_debug_marker') $this->cdefs[] = 'void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer,VkDebugMarkerMarkerInfoEXT* pMarkerInfo);';
        if($extension === 'VK_EXT_debug_marker') $this->cdefs[] = 'void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer);';
        if($extension === 'VK_EXT_debug_marker') $this->cdefs[] = 'void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer,VkDebugMarkerMarkerInfoEXT* pMarkerInfo);';
        if($extension === 'VK_NV_external_memory_capabilities') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkImageTiling tiling,VkImageUsageFlags usage,VkImageCreateFlags flags,VkExternalMemoryHandleTypeFlagsNV externalHandleType,VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);';
        if($extension === 'VK_NV_external_memory_win32') $this->cdefs[] = 'VkResult vkGetMemoryWin32HandleNV(VkDevice device,VkDeviceMemory memory,VkExternalMemoryHandleTypeFlagsNV handleType,void* pHandle);';
        if($extension === 'VK_NV_device_generated_commands') $this->cdefs[] = 'void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer,uint32_t isPreprocessed,VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);';
        if($extension === 'VK_NV_device_generated_commands') $this->cdefs[] = 'void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer,VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);';
        if($extension === 'VK_NV_device_generated_commands') $this->cdefs[] = 'void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipeline pipeline,uint32_t groupIndex);';
        if($extension === 'VK_NV_device_generated_commands') $this->cdefs[] = 'void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device,VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,VkMemoryRequirements2* pMemoryRequirements);';
        if($extension === 'VK_NV_device_generated_commands') $this->cdefs[] = 'VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device,VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkIndirectCommandsLayoutNV* pIndirectCommandsLayout);';
        if($extension === 'VK_NV_device_generated_commands') $this->cdefs[] = 'void vkDestroyIndirectCommandsLayoutNV(VkDevice device,VkIndirectCommandsLayoutNV indirectCommandsLayout,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice,VkPhysicalDeviceFeatures2* pFeatures);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice,VkPhysicalDeviceProperties2* pProperties);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice,VkFormat format,VkFormatProperties2* pFormatProperties);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice,VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,VkImageFormatProperties2* pImageFormatProperties);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice,uint32_t* pQueueFamilyPropertyCount,VkQueueFamilyProperties2* pQueueFamilyProperties);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice,VkPhysicalDeviceMemoryProperties2* pMemoryProperties);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,uint32_t* pPropertyCount,VkSparseImageFormatProperties2* pProperties);';
        if($extension === 'VK_KHR_push_descriptor') $this->cdefs[] = 'void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t set,uint32_t descriptorWriteCount,VkWriteDescriptorSet* pDescriptorWrites);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkTrimCommandPool(VkDevice device,VkCommandPool commandPool,VkCommandPoolTrimFlags flags);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice,VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,VkExternalBufferProperties* pExternalBufferProperties);';
        if($extension === 'VK_KHR_external_memory_win32') $this->cdefs[] = 'VkResult vkGetMemoryWin32HandleKHR(VkDevice device,VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,void* pHandle);';
        if($extension === 'VK_KHR_external_memory_win32') $this->cdefs[] = 'VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,void* handle,VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);';
        if($extension === 'VK_KHR_external_memory_fd') $this->cdefs[] = 'VkResult vkGetMemoryFdKHR(VkDevice device,VkMemoryGetFdInfoKHR* pGetFdInfo,int* pFd);';
        if($extension === 'VK_KHR_external_memory_fd') $this->cdefs[] = 'VkResult vkGetMemoryFdPropertiesKHR(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,int16_t fd,VkMemoryFdPropertiesKHR* pMemoryFdProperties);';
        if($extension === 'VK_FUCHSIA_external_memory') $this->cdefs[] = 'VkResult vkGetMemoryZirconHandleFUCHSIA(VkDevice device,VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,void* pZirconHandle);';
        if($extension === 'VK_FUCHSIA_external_memory') $this->cdefs[] = 'VkResult vkGetMemoryZirconHandlePropertiesFUCHSIA(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,uint32_t zirconHandle,VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties);';
        if($extension === 'VK_NV_external_memory_rdma') $this->cdefs[] = 'VkResult vkGetMemoryRemoteAddressNV(VkDevice device,VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,void* pAddress);';
        if($extension === 'VK_NV_external_memory_sci_buf') $this->cdefs[] = 'VkResult vkGetMemorySciBufNV(VkDevice device,VkMemoryGetSciBufInfoNV* pGetSciBufInfo,void* pHandle);';
        if($extension === 'VK_NV_external_memory_sci_buf') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(VkPhysicalDevice physicalDevice,VkExternalMemoryHandleTypeFlagBits handleType,void* handle,VkMemorySciBufPropertiesNV* pMemorySciBufProperties);';
        if($extension === 'VK_NV_external_memory_sci_buf') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSciBufAttributesNV(VkPhysicalDevice physicalDevice,void* pAttributes);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice,VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,VkExternalSemaphoreProperties* pExternalSemaphoreProperties);';
        if($extension === 'VK_KHR_external_semaphore_win32') $this->cdefs[] = 'VkResult vkGetSemaphoreWin32HandleKHR(VkDevice device,VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,void* pHandle);';
        if($extension === 'VK_KHR_external_semaphore_win32') $this->cdefs[] = 'VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device,VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);';
        if($extension === 'VK_KHR_external_semaphore_fd') $this->cdefs[] = 'VkResult vkGetSemaphoreFdKHR(VkDevice device,VkSemaphoreGetFdInfoKHR* pGetFdInfo,int* pFd);';
        if($extension === 'VK_KHR_external_semaphore_fd') $this->cdefs[] = 'VkResult vkImportSemaphoreFdKHR(VkDevice device,VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);';
        if($extension === 'VK_FUCHSIA_external_semaphore') $this->cdefs[] = 'VkResult vkGetSemaphoreZirconHandleFUCHSIA(VkDevice device,VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,void* pZirconHandle);';
        if($extension === 'VK_FUCHSIA_external_semaphore') $this->cdefs[] = 'VkResult vkImportSemaphoreZirconHandleFUCHSIA(VkDevice device,VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice,VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,VkExternalFenceProperties* pExternalFenceProperties);';
        if($extension === 'VK_KHR_external_fence_win32') $this->cdefs[] = 'VkResult vkGetFenceWin32HandleKHR(VkDevice device,VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,void* pHandle);';
        if($extension === 'VK_KHR_external_fence_win32') $this->cdefs[] = 'VkResult vkImportFenceWin32HandleKHR(VkDevice device,VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);';
        if($extension === 'VK_KHR_external_fence_fd') $this->cdefs[] = 'VkResult vkGetFenceFdKHR(VkDevice device,VkFenceGetFdInfoKHR* pGetFdInfo,int* pFd);';
        if($extension === 'VK_KHR_external_fence_fd') $this->cdefs[] = 'VkResult vkImportFenceFdKHR(VkDevice device,VkImportFenceFdInfoKHR* pImportFenceFdInfo);';
        if($extension === 'VK_NV_external_sci_sync') $this->cdefs[] = 'VkResult vkGetFenceSciSyncFenceNV(VkDevice device,VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo,void* pHandle);';
        if($extension === 'VK_NV_external_sci_sync2') $this->cdefs[] = 'VkResult vkGetFenceSciSyncFenceNV(VkDevice device,VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo,void* pHandle);';
        if($extension === 'VK_NV_external_sci_sync') $this->cdefs[] = 'VkResult vkGetFenceSciSyncObjNV(VkDevice device,VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo,void* pHandle);';
        if($extension === 'VK_NV_external_sci_sync2') $this->cdefs[] = 'VkResult vkGetFenceSciSyncObjNV(VkDevice device,VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo,void* pHandle);';
        if($extension === 'VK_NV_external_sci_sync') $this->cdefs[] = 'VkResult vkImportFenceSciSyncFenceNV(VkDevice device,VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo);';
        if($extension === 'VK_NV_external_sci_sync2') $this->cdefs[] = 'VkResult vkImportFenceSciSyncFenceNV(VkDevice device,VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo);';
        if($extension === 'VK_NV_external_sci_sync') $this->cdefs[] = 'VkResult vkImportFenceSciSyncObjNV(VkDevice device,VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo);';
        if($extension === 'VK_NV_external_sci_sync2') $this->cdefs[] = 'VkResult vkImportFenceSciSyncObjNV(VkDevice device,VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo);';
        if($extension === 'VK_NV_external_sci_sync') $this->cdefs[] = 'VkResult vkGetSemaphoreSciSyncObjNV(VkDevice device,VkSemaphoreGetSciSyncInfoNV* pGetSciSyncInfo,void* pHandle);';
        if($extension === 'VK_NV_external_sci_sync') $this->cdefs[] = 'VkResult vkImportSemaphoreSciSyncObjNV(VkDevice device,VkImportSemaphoreSciSyncInfoNV* pImportSemaphoreSciSyncInfo);';
        if($extension === 'VK_NV_external_sci_sync') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSciSyncAttributesNV(VkPhysicalDevice physicalDevice,VkSciSyncAttributesInfoNV* pSciSyncAttributesInfo,void* pAttributes);';
        if($extension === 'VK_NV_external_sci_sync2') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSciSyncAttributesNV(VkPhysicalDevice physicalDevice,VkSciSyncAttributesInfoNV* pSciSyncAttributesInfo,void* pAttributes);';
        if($extension === 'VK_NV_external_sci_sync2') $this->cdefs[] = 'VkResult vkCreateSemaphoreSciSyncPoolNV(VkDevice device,VkSemaphoreSciSyncPoolCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSemaphoreSciSyncPoolNV* pSemaphorePool);';
        if($extension === 'VK_NV_external_sci_sync2') $this->cdefs[] = 'void vkDestroySemaphoreSciSyncPoolNV(VkDevice device,VkSemaphoreSciSyncPoolNV semaphorePool,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_EXT_direct_mode_display') $this->cdefs[] = 'VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice,VkDisplayKHR display);';
        if($extension === 'VK_EXT_acquire_xlib_display') $this->cdefs[] = 'VkResult vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice,void* dpy,VkDisplayKHR display);';
        if($extension === 'VK_EXT_acquire_xlib_display') $this->cdefs[] = 'VkResult vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice,void* dpy,void* rrOutput,VkDisplayKHR* pDisplay);';
        if($extension === 'VK_NV_acquire_winrt_display') $this->cdefs[] = 'VkResult vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice,VkDisplayKHR display);';
        if($extension === 'VK_NV_acquire_winrt_display') $this->cdefs[] = 'VkResult vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice,uint32_t deviceRelativeId,VkDisplayKHR* pDisplay);';
        if($extension === 'VK_EXT_display_control') $this->cdefs[] = 'VkResult vkDisplayPowerControlEXT(VkDevice device,VkDisplayKHR display,VkDisplayPowerInfoEXT* pDisplayPowerInfo);';
        if($extension === 'VK_EXT_display_control') $this->cdefs[] = 'VkResult vkRegisterDeviceEventEXT(VkDevice device,VkDeviceEventInfoEXT* pDeviceEventInfo,VkAllocationCallbacks* pAllocator,VkFence* pFence);';
        if($extension === 'VK_EXT_display_control') $this->cdefs[] = 'VkResult vkRegisterDisplayEventEXT(VkDevice device,VkDisplayKHR display,VkDisplayEventInfoEXT* pDisplayEventInfo,VkAllocationCallbacks* pAllocator,VkFence* pFence);';
        if($extension === 'VK_EXT_display_control') $this->cdefs[] = 'VkResult vkGetSwapchainCounterEXT(VkDevice device,VkSwapchainKHR swapchain,VkSurfaceCounterFlagBitsEXT counter,uint64_t* pCounterValue);';
        if($extension === 'VK_EXT_display_surface_counter') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,VkSurfaceCapabilities2EXT* pSurfaceCapabilities);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance,uint32_t* pPhysicalDeviceGroupCount,VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device,uint32_t heapIndex,uint32_t localDeviceIndex,uint32_t remoteDeviceIndex,void* pPeerMemoryFeatures);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'VkResult vkBindBufferMemory2(VkDevice device,uint32_t bindInfoCount,VkBindBufferMemoryInfo* pBindInfos);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'VkResult vkBindImageMemory2(VkDevice device,uint32_t bindInfoCount,VkBindImageMemoryInfo* pBindInfos);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer,uint32_t deviceMask);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device,VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);';
        if($extension === 'VK_KHR_device_group') $this->cdefs[] = 'VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device,VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device,VkSurfaceKHR surface,void* pModes);';
        if($extension === 'VK_KHR_device_group') $this->cdefs[] = 'VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device,VkSurfaceKHR surface,void* pModes);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkAcquireNextImage2KHR(VkDevice device,VkAcquireNextImageInfoKHR* pAcquireInfo,uint32_t* pImageIndex);';
        if($extension === 'VK_KHR_device_group') $this->cdefs[] = 'VkResult vkAcquireNextImage2KHR(VkDevice device,VkAcquireNextImageInfoKHR* pAcquireInfo,uint32_t* pImageIndex);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkCmdDispatchBase(VkCommandBuffer commandBuffer,uint32_t baseGroupX,uint32_t baseGroupY,uint32_t baseGroupZ,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);';
        if($extension === 'VK_KHR_swapchain') $this->cdefs[] = 'VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pRectCount,VkRect2D* pRects);';
        if($extension === 'VK_KHR_device_group') $this->cdefs[] = 'VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pRectCount,VkRect2D* pRects);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'VkResult vkCreateDescriptorUpdateTemplate(VkDevice device,VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkDestroyDescriptorUpdateTemplate(VkDevice device,VkDescriptorUpdateTemplate descriptorUpdateTemplate,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkUpdateDescriptorSetWithTemplate(VkDevice device,VkDescriptorSet descriptorSet,VkDescriptorUpdateTemplate descriptorUpdateTemplate,void* pData);';
        if($extension === 'VK_KHR_push_descriptor') $this->cdefs[] = 'void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer,VkDescriptorUpdateTemplate descriptorUpdateTemplate,VkPipelineLayout layout,uint32_t set,void* pData);';
        if($extension === 'VK_KHR_push_descriptor') $this->cdefs[] = 'void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer,VkDescriptorUpdateTemplate descriptorUpdateTemplate,VkPipelineLayout layout,uint32_t set,void* pData);';
        if($extension === 'VK_KHR_descriptor_update_template') $this->cdefs[] = 'void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer,VkDescriptorUpdateTemplate descriptorUpdateTemplate,VkPipelineLayout layout,uint32_t set,void* pData);';
        if($extension === 'VK_EXT_hdr_metadata') $this->cdefs[] = 'void vkSetHdrMetadataEXT(VkDevice device,uint32_t swapchainCount,VkSwapchainKHR* pSwapchains,VkHdrMetadataEXT* pMetadata);';
        if($extension === 'VK_KHR_shared_presentable_image') $this->cdefs[] = 'VkResult vkGetSwapchainStatusKHR(VkDevice device,VkSwapchainKHR swapchain);';
        if($extension === 'VK_GOOGLE_display_timing') $this->cdefs[] = 'VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device,VkSwapchainKHR swapchain,VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);';
        if($extension === 'VK_GOOGLE_display_timing') $this->cdefs[] = 'VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device,VkSwapchainKHR swapchain,uint32_t* pPresentationTimingCount,VkPastPresentationTimingGOOGLE* pPresentationTimings);';
        if($extension === 'VK_MVK_ios_surface') $this->cdefs[] = 'VkResult vkCreateIOSSurfaceMVK(VkInstance instance,VkIOSSurfaceCreateInfoMVK* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_MVK_macos_surface') $this->cdefs[] = 'VkResult vkCreateMacOSSurfaceMVK(VkInstance instance,VkMacOSSurfaceCreateInfoMVK* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_EXT_metal_surface') $this->cdefs[] = 'VkResult vkCreateMetalSurfaceEXT(VkInstance instance,VkMetalSurfaceCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_NV_clip_space_w_scaling') $this->cdefs[] = 'void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkViewportWScalingNV* pViewportWScalings);';
        if($extension === 'VK_EXT_discard_rectangles') $this->cdefs[] = 'void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer,uint32_t firstDiscardRectangle,uint32_t discardRectangleCount,VkRect2D* pDiscardRectangles);';
        if($extension === 'VK_EXT_discard_rectangles') $this->cdefs[] = 'void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer,uint32_t discardRectangleEnable);';
        if($extension === 'VK_EXT_discard_rectangles') $this->cdefs[] = 'void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer,VkDiscardRectangleModeEXT discardRectangleMode);';
        if($extension === 'VK_EXT_sample_locations') $this->cdefs[] = 'void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer,VkSampleLocationsInfoEXT* pSampleLocationsInfo);';
        if($extension === 'VK_EXT_sample_locations') $this->cdefs[] = 'void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice,VkSampleCountFlagBits samples,VkMultisamplePropertiesEXT* pMultisampleProperties);';
        if($extension === 'VK_KHR_get_surface_capabilities2') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,VkSurfaceCapabilities2KHR* pSurfaceCapabilities);';
        if($extension === 'VK_KHR_get_surface_capabilities2') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,uint32_t* pSurfaceFormatCount,VkSurfaceFormat2KHR* pSurfaceFormats);';
        if($extension === 'VK_KHR_get_display_properties2') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayProperties2KHR* pProperties);';
        if($extension === 'VK_KHR_get_display_properties2') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPlaneProperties2KHR* pProperties);';
        if($extension === 'VK_KHR_get_display_properties2') $this->cdefs[] = 'VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice,VkDisplayKHR display,uint32_t* pPropertyCount,VkDisplayModeProperties2KHR* pProperties);';
        if($extension === 'VK_KHR_get_display_properties2') $this->cdefs[] = 'VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice,VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,VkDisplayPlaneCapabilities2KHR* pCapabilities);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetBufferMemoryRequirements2(VkDevice device,VkBufferMemoryRequirementsInfo2* pInfo,VkMemoryRequirements2* pMemoryRequirements);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetImageMemoryRequirements2(VkDevice device,VkImageMemoryRequirementsInfo2* pInfo,VkMemoryRequirements2* pMemoryRequirements);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetImageSparseMemoryRequirements2(VkDevice device,VkImageSparseMemoryRequirementsInfo2* pInfo,uint32_t* pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkGetDeviceBufferMemoryRequirements(VkDevice device,VkDeviceBufferMemoryRequirements* pInfo,VkMemoryRequirements2* pMemoryRequirements);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkGetDeviceImageMemoryRequirements(VkDevice device,VkDeviceImageMemoryRequirements* pInfo,VkMemoryRequirements2* pMemoryRequirements);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkGetDeviceImageSparseMemoryRequirements(VkDevice device,VkDeviceImageMemoryRequirements* pInfo,uint32_t* pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'VkResult vkCreateSamplerYcbcrConversion(VkDevice device,VkSamplerYcbcrConversionCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSamplerYcbcrConversion* pYcbcrConversion);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkDestroySamplerYcbcrConversion(VkDevice device,VkSamplerYcbcrConversion ycbcrConversion,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetDeviceQueue2(VkDevice device,VkDeviceQueueInfo2* pQueueInfo,VkQueue* pQueue);';
        if($extension === 'VK_EXT_validation_cache') $this->cdefs[] = 'VkResult vkCreateValidationCacheEXT(VkDevice device,VkValidationCacheCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkValidationCacheEXT* pValidationCache);';
        if($extension === 'VK_EXT_validation_cache') $this->cdefs[] = 'void vkDestroyValidationCacheEXT(VkDevice device,VkValidationCacheEXT validationCache,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_EXT_validation_cache') $this->cdefs[] = 'VkResult vkGetValidationCacheDataEXT(VkDevice device,VkValidationCacheEXT validationCache,size_t* pDataSize,void* pData);';
        if($extension === 'VK_EXT_validation_cache') $this->cdefs[] = 'VkResult vkMergeValidationCachesEXT(VkDevice device,VkValidationCacheEXT dstCache,uint32_t srcCacheCount,VkValidationCacheEXT* pSrcCaches);';
        if($extension === 'VK_VERSION_1_1') $this->cdefs[] = 'void vkGetDescriptorSetLayoutSupport(VkDevice device,VkDescriptorSetLayoutCreateInfo* pCreateInfo,VkDescriptorSetLayoutSupport* pSupport);';
        if($extension === 'VK_ANDROID_native_buffer') $this->cdefs[] = 'VkResult vkGetSwapchainGrallocUsageANDROID(VkDevice device,VkFormat format,VkImageUsageFlags imageUsage,int* grallocUsage);';
        if($extension === 'VK_ANDROID_native_buffer') $this->cdefs[] = 'VkResult vkGetSwapchainGrallocUsage2ANDROID(VkDevice device,VkFormat format,VkImageUsageFlags imageUsage,VkSwapchainImageUsageFlagsANDROID swapchainImageUsage,uint64_t* grallocConsumerUsage,uint64_t* grallocProducerUsage);';
        if($extension === 'VK_ANDROID_native_buffer') $this->cdefs[] = 'VkResult vkAcquireImageANDROID(VkDevice device,VkImage image,int16_t nativeFenceFd,VkSemaphore semaphore,VkFence fence);';
        if($extension === 'VK_ANDROID_native_buffer') $this->cdefs[] = 'VkResult vkQueueSignalReleaseImageANDROID(VkQueue queue,uint32_t waitSemaphoreCount,VkSemaphore* pWaitSemaphores,VkImage image,int* pNativeFenceFd);';
        if($extension === 'VK_AMD_shader_info') $this->cdefs[] = 'VkResult vkGetShaderInfoAMD(VkDevice device,VkPipeline pipeline,VkShaderStageFlagBits shaderStage,VkShaderInfoTypeAMD infoType,size_t* pInfoSize,void* pInfo);';
        if($extension === 'VK_AMD_display_native_hdr') $this->cdefs[] = 'void vkSetLocalDimmingAMD(VkDevice device,VkSwapchainKHR swapChain,uint32_t localDimmingEnable);';
        if($extension === 'VK_EXT_calibrated_timestamps') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice,uint32_t* pTimeDomainCount,void* pTimeDomains);';
        if($extension === 'VK_EXT_calibrated_timestamps') $this->cdefs[] = 'VkResult vkGetCalibratedTimestampsEXT(VkDevice device,uint32_t timestampCount,VkCalibratedTimestampInfoEXT* pTimestampInfos,uint64_t* pTimestamps,uint64_t* pMaxDeviation);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device,VkDebugUtilsObjectNameInfoEXT* pNameInfo);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device,VkDebugUtilsObjectTagInfoEXT* pTagInfo);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue,VkDebugUtilsLabelEXT* pLabelInfo);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkQueueEndDebugUtilsLabelEXT(VkQueue queue);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue,VkDebugUtilsLabelEXT* pLabelInfo);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer,VkDebugUtilsLabelEXT* pLabelInfo);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer,VkDebugUtilsLabelEXT* pLabelInfo);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance,VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDebugUtilsMessengerEXT* pMessenger);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkDestroyDebugUtilsMessengerEXT(VkInstance instance,VkDebugUtilsMessengerEXT messenger,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_EXT_debug_utils') $this->cdefs[] = 'void vkSubmitDebugUtilsMessageEXT(VkInstance instance,VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,VkDebugUtilsMessageTypeFlagsEXT messageTypes,VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);';
        if($extension === 'VK_EXT_external_memory_host') $this->cdefs[] = 'VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,void* pHostPointer,VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);';
        if($extension === 'VK_AMD_buffer_marker') $this->cdefs[] = 'void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer,VkPipelineStageFlagBits pipelineStage,VkBuffer dstBuffer,uint64_t dstOffset,uint32_t marker);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'VkResult vkCreateRenderPass2(VkDevice device,VkRenderPassCreateInfo2* pCreateInfo,VkAllocationCallbacks* pAllocator,VkRenderPass* pRenderPass);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer,VkRenderPassBeginInfo* pRenderPassBegin,VkSubpassBeginInfo* pSubpassBeginInfo);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'void vkCmdNextSubpass2(VkCommandBuffer commandBuffer,VkSubpassBeginInfo* pSubpassBeginInfo,VkSubpassEndInfo* pSubpassEndInfo);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer,VkSubpassEndInfo* pSubpassEndInfo);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'VkResult vkGetSemaphoreCounterValue(VkDevice device,VkSemaphore semaphore,uint64_t* pValue);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'VkResult vkWaitSemaphores(VkDevice device,VkSemaphoreWaitInfo* pWaitInfo,uint64_t timeout);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'VkResult vkSignalSemaphore(VkDevice device,VkSemaphoreSignalInfo* pSignalInfo);';
        if($extension === 'VK_ANDROID_external_memory_android_hardware_buffer') $this->cdefs[] = 'VkResult vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device,void* buffer,VkAndroidHardwareBufferPropertiesANDROID* pProperties);';
        if($extension === 'VK_ANDROID_external_memory_android_hardware_buffer') $this->cdefs[] = 'VkResult vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device,VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,void* pBuffer);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);';
        if($extension === 'VK_NV_device_diagnostic_checkpoints') $this->cdefs[] = 'void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer,void* pCheckpointMarker);';
        if($extension === 'VK_NV_device_diagnostic_checkpoints') $this->cdefs[] = 'void vkGetQueueCheckpointDataNV(VkQueue queue,uint32_t* pCheckpointDataCount,VkCheckpointDataNV* pCheckpointData);';
        if($extension === 'VK_EXT_transform_feedback') $this->cdefs[] = 'void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer,uint32_t firstBinding,uint32_t bindingCount,VkBuffer* pBuffers,void* pOffsets,void* pSizes);';
        if($extension === 'VK_EXT_transform_feedback') $this->cdefs[] = 'void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer,uint32_t firstCounterBuffer,uint32_t counterBufferCount,VkBuffer* pCounterBuffers,void* pCounterBufferOffsets);';
        if($extension === 'VK_EXT_transform_feedback') $this->cdefs[] = 'void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer,uint32_t firstCounterBuffer,uint32_t counterBufferCount,VkBuffer* pCounterBuffers,void* pCounterBufferOffsets);';
        if($extension === 'VK_EXT_transform_feedback') $this->cdefs[] = 'void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query,VkQueryControlFlags flags,uint32_t index);';
        if($extension === 'VK_EXT_transform_feedback') $this->cdefs[] = 'void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query,uint32_t index);';
        if($extension === 'VK_EXT_transform_feedback') $this->cdefs[] = 'void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer,uint32_t instanceCount,uint32_t firstInstance,VkBuffer counterBuffer,uint64_t counterBufferOffset,uint32_t counterOffset,uint32_t vertexStride);';
        if($extension === 'VK_NV_scissor_exclusive') $this->cdefs[] = 'void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer,uint32_t firstExclusiveScissor,uint32_t exclusiveScissorCount,VkRect2D* pExclusiveScissors);';
        if($extension === 'VK_NV_scissor_exclusive') $this->cdefs[] = 'void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer,uint32_t firstExclusiveScissor,uint32_t exclusiveScissorCount,void* pExclusiveScissorEnables);';
        if($extension === 'VK_NV_shading_rate_image') $this->cdefs[] = 'void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer,VkImageView imageView,VkImageLayout imageLayout);';
        if($extension === 'VK_NV_shading_rate_image') $this->cdefs[] = 'void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkShadingRatePaletteNV* pShadingRatePalettes);';
        if($extension === 'VK_NV_shading_rate_image') $this->cdefs[] = 'void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer,VkCoarseSampleOrderTypeNV sampleOrderType,uint32_t customSampleOrderCount,VkCoarseSampleOrderCustomNV* pCustomSampleOrders);';
        if($extension === 'VK_NV_mesh_shader') $this->cdefs[] = 'void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer,uint32_t taskCount,uint32_t firstTask);';
        if($extension === 'VK_NV_mesh_shader') $this->cdefs[] = 'void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);';
        if($extension === 'VK_NV_mesh_shader') $this->cdefs[] = 'void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);';
        if($extension === 'VK_EXT_mesh_shader') $this->cdefs[] = 'void vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);';
        if($extension === 'VK_EXT_mesh_shader') $this->cdefs[] = 'void vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);';
        if($extension === 'VK_EXT_mesh_shader') $this->cdefs[] = 'void vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'VkResult vkCompileDeferredNV(VkDevice device,VkPipeline pipeline,uint32_t shader);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'VkResult vkCreateAccelerationStructureNV(VkDevice device,VkAccelerationStructureCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkAccelerationStructureNV* pAccelerationStructure);';
        if($extension === 'VK_HUAWEI_invocation_mask') $this->cdefs[] = 'void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer,VkImageView imageView,VkImageLayout imageLayout);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkDestroyAccelerationStructureKHR(VkDevice device,VkAccelerationStructureKHR accelerationStructure,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'void vkDestroyAccelerationStructureNV(VkDevice device,VkAccelerationStructureNV accelerationStructure,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device,VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,VkMemoryRequirements2KHR* pMemoryRequirements);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'VkResult vkBindAccelerationStructureMemoryNV(VkDevice device,uint32_t bindInfoCount,VkBindAccelerationStructureMemoryInfoNV* pBindInfos);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer,VkAccelerationStructureNV dst,VkAccelerationStructureNV src,VkCopyAccelerationStructureModeKHR mode);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer,VkCopyAccelerationStructureInfoKHR* pInfo);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'VkResult vkCopyAccelerationStructureKHR(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyAccelerationStructureInfoKHR* pInfo);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer,VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer,VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer,uint32_t accelerationStructureCount,VkAccelerationStructureKHR* pAccelerationStructures,VkQueryType queryType,VkQueryPool queryPool,uint32_t firstQuery);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer,uint32_t accelerationStructureCount,VkAccelerationStructureNV* pAccelerationStructures,VkQueryType queryType,VkQueryPool queryPool,uint32_t firstQuery);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer,VkAccelerationStructureInfoNV* pInfo,VkBuffer instanceData,uint64_t instanceOffset,uint32_t update,VkAccelerationStructureNV dst,VkAccelerationStructureNV src,VkBuffer scratch,uint64_t scratchOffset);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device,uint32_t accelerationStructureCount,VkAccelerationStructureKHR* pAccelerationStructures,VkQueryType queryType,size_t dataSize,void* pData,size_t stride);';
        if($extension === 'VK_KHR_ray_tracing_pipeline') $this->cdefs[] = 'void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer,VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,uint32_t width,uint32_t height,uint32_t depth);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer,VkBuffer raygenShaderBindingTableBuffer,uint64_t raygenShaderBindingOffset,VkBuffer missShaderBindingTableBuffer,uint64_t missShaderBindingOffset,uint64_t missShaderBindingStride,VkBuffer hitShaderBindingTableBuffer,uint64_t hitShaderBindingOffset,uint64_t hitShaderBindingStride,VkBuffer callableShaderBindingTableBuffer,uint64_t callableShaderBindingOffset,uint64_t callableShaderBindingStride,uint32_t width,uint32_t height,uint32_t depth);';
        if($extension === 'VK_KHR_ray_tracing_pipeline') $this->cdefs[] = 'VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device,VkPipeline pipeline,uint32_t firstGroup,uint32_t groupCount,size_t dataSize,void* pData);';
        if($extension === 'VK_KHR_ray_tracing_pipeline') $this->cdefs[] = 'VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device,VkPipeline pipeline,uint32_t firstGroup,uint32_t groupCount,size_t dataSize,void* pData);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'VkResult vkGetAccelerationStructureHandleNV(VkDevice device,VkAccelerationStructureNV accelerationStructure,size_t dataSize,void* pData);';
        if($extension === 'VK_NV_ray_tracing') $this->cdefs[] = 'VkResult vkCreateRayTracingPipelinesNV(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkRayTracingPipelineCreateInfoNV* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);';
        if($extension === 'VK_KHR_ray_tracing_pipeline') $this->cdefs[] = 'VkResult vkCreateRayTracingPipelinesKHR(VkDevice device,VkDeferredOperationKHR deferredOperation,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkRayTracingPipelineCreateInfoKHR* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);';
        if($extension === 'VK_NV_cooperative_matrix') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkCooperativeMatrixPropertiesNV* pProperties);';
        if($extension === 'VK_KHR_ray_tracing_pipeline') $this->cdefs[] = 'void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer,VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,uint64_t indirectDeviceAddress);';
        if($extension === 'VK_KHR_ray_tracing_maintenance1') $this->cdefs[] = 'void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer,uint64_t indirectDeviceAddress);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device,VkAccelerationStructureVersionInfoKHR* pVersionInfo,void* pCompatibility);';
        if($extension === 'VK_KHR_ray_tracing_pipeline') $this->cdefs[] = 'uint64_t vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device,VkPipeline pipeline,uint32_t group,VkShaderGroupShaderKHR groupShader);';
        if($extension === 'VK_KHR_ray_tracing_pipeline') $this->cdefs[] = 'void vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer,uint32_t pipelineStackSize);';
        if($extension === 'VK_NVX_image_view_handle') $this->cdefs[] = 'uint32_t vkGetImageViewHandleNVX(VkDevice device,VkImageViewHandleInfoNVX* pInfo);';
        if($extension === 'VK_NVX_image_view_handle') $this->cdefs[] = 'VkResult vkGetImageViewAddressNVX(VkDevice device,VkImageView imageView,VkImageViewAddressPropertiesNVX* pProperties);';
        if($extension === 'VK_EXT_full_screen_exclusive') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,uint32_t* pPresentModeCount,void* pPresentModes);';
        if($extension === 'VK_EXT_full_screen_exclusive') $this->cdefs[] = 'VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,void* pModes);';
        if($extension === 'VK_EXT_full_screen_exclusive') $this->cdefs[] = 'VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,void* pModes);';
        if($extension === 'VK_EXT_full_screen_exclusive') $this->cdefs[] = 'VkResult vkAcquireFullScreenExclusiveModeEXT(VkDevice device,VkSwapchainKHR swapchain);';
        if($extension === 'VK_EXT_full_screen_exclusive') $this->cdefs[] = 'VkResult vkReleaseFullScreenExclusiveModeEXT(VkDevice device,VkSwapchainKHR swapchain);';
        if($extension === 'VK_KHR_performance_query') $this->cdefs[] = 'VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,uint32_t* pCounterCount,VkPerformanceCounterKHR* pCounters,VkPerformanceCounterDescriptionKHR* pCounterDescriptions);';
        if($extension === 'VK_KHR_performance_query') $this->cdefs[] = 'void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice,VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,uint32_t* pNumPasses);';
        if($extension === 'VK_KHR_performance_query') $this->cdefs[] = 'VkResult vkAcquireProfilingLockKHR(VkDevice device,VkAcquireProfilingLockInfoKHR* pInfo);';
        if($extension === 'VK_KHR_performance_query') $this->cdefs[] = 'void vkReleaseProfilingLockKHR(VkDevice device);';
        if($extension === 'VK_EXT_image_drm_format_modifier') $this->cdefs[] = 'VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device,VkImage image,VkImageDrmFormatModifierPropertiesEXT* pProperties);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device,VkBufferDeviceAddressInfo* pInfo);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'uint64_t vkGetBufferDeviceAddress(VkDevice device,VkBufferDeviceAddressInfo* pInfo);';
        if($extension === 'VK_EXT_headless_surface') $this->cdefs[] = 'VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance,VkHeadlessSurfaceCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);';
        if($extension === 'VK_NV_coverage_reduction_mode') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice,uint32_t* pCombinationCount,VkFramebufferMixedSamplesCombinationNV* pCombinations);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkInitializePerformanceApiINTEL(VkDevice device,VkInitializePerformanceApiInfoINTEL* pInitializeInfo);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'void vkUninitializePerformanceApiINTEL(VkDevice device);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer,VkPerformanceMarkerInfoINTEL* pMarkerInfo);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer,VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer,VkPerformanceOverrideInfoINTEL* pOverrideInfo);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device,VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,VkPerformanceConfigurationINTEL* pConfiguration);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device,VkPerformanceConfigurationINTEL configuration);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue,VkPerformanceConfigurationINTEL configuration);';
        if($extension === 'VK_INTEL_performance_query') $this->cdefs[] = 'VkResult vkGetPerformanceParameterINTEL(VkDevice device,VkPerformanceParameterTypeINTEL parameter,VkPerformanceValueINTEL* pValue);';
        if($extension === 'VK_VERSION_1_2') $this->cdefs[] = 'uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device,VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);';
        if($extension === 'VK_KHR_pipeline_executable_properties') $this->cdefs[] = 'VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device,VkPipelineInfoKHR* pPipelineInfo,uint32_t* pExecutableCount,VkPipelineExecutablePropertiesKHR* pProperties);';
        if($extension === 'VK_KHR_pipeline_executable_properties') $this->cdefs[] = 'VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device,VkPipelineExecutableInfoKHR* pExecutableInfo,uint32_t* pStatisticCount,VkPipelineExecutableStatisticKHR* pStatistics);';
        if($extension === 'VK_KHR_pipeline_executable_properties') $this->cdefs[] = 'VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device,VkPipelineExecutableInfoKHR* pExecutableInfo,uint32_t* pInternalRepresentationCount,VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);';
        if($extension === 'VK_EXT_line_rasterization') $this->cdefs[] = 'void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer,uint32_t lineStippleFactor,uint16_t lineStipplePattern);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice,uint32_t* pToolCount,VkPhysicalDeviceToolProperties* pToolProperties);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'VkResult vkCreateAccelerationStructureKHR(VkDevice device,VkAccelerationStructureCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkAccelerationStructureKHR* pAccelerationStructure);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer,uint32_t infoCount,VkAccelerationStructureBuildGeometryInfoKHR* pInfos,void* ppBuildRangeInfos);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer,uint32_t infoCount,VkAccelerationStructureBuildGeometryInfoKHR* pInfos,void* pIndirectDeviceAddresses,uint32_t* pIndirectStrides,void* ppMaxPrimitiveCounts);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'VkResult vkBuildAccelerationStructuresKHR(VkDevice device,VkDeferredOperationKHR deferredOperation,uint32_t infoCount,VkAccelerationStructureBuildGeometryInfoKHR* pInfos,void* ppBuildRangeInfos);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'uint64_t vkGetAccelerationStructureDeviceAddressKHR(VkDevice device,VkAccelerationStructureDeviceAddressInfoKHR* pInfo);';
        if($extension === 'VK_KHR_deferred_host_operations') $this->cdefs[] = 'VkResult vkCreateDeferredOperationKHR(VkDevice device,VkAllocationCallbacks* pAllocator,VkDeferredOperationKHR* pDeferredOperation);';
        if($extension === 'VK_KHR_deferred_host_operations') $this->cdefs[] = 'void vkDestroyDeferredOperationKHR(VkDevice device,VkDeferredOperationKHR operation,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_KHR_deferred_host_operations') $this->cdefs[] = 'uint32_t vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device,VkDeferredOperationKHR operation);';
        if($extension === 'VK_KHR_deferred_host_operations') $this->cdefs[] = 'VkResult vkGetDeferredOperationResultKHR(VkDevice device,VkDeferredOperationKHR operation);';
        if($extension === 'VK_KHR_deferred_host_operations') $this->cdefs[] = 'VkResult vkDeferredOperationJoinKHR(VkDevice device,VkDeferredOperationKHR operation);';
        if($extension === 'VK_NV_device_generated_commands_compute') $this->cdefs[] = 'void vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device,VkComputePipelineCreateInfo* pCreateInfo,VkMemoryRequirements2* pMemoryRequirements);';
        if($extension === 'VK_NV_device_generated_commands_compute') $this->cdefs[] = 'uint64_t vkGetPipelineIndirectDeviceAddressNV(VkDevice device,VkPipelineIndirectDeviceAddressInfoNV* pInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetCullMode(VkCommandBuffer commandBuffer,VkCullModeFlags cullMode);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetFrontFace(VkCommandBuffer commandBuffer,VkFrontFace frontFace);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer,VkPrimitiveTopology primitiveTopology);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer,uint32_t viewportCount,VkViewport* pViewports);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer,uint32_t scissorCount,VkRect2D* pScissors);';
        if($extension === 'VK_KHR_maintenance5') $this->cdefs[] = 'void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint64_t size,VkIndexType indexType);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer,uint32_t firstBinding,uint32_t bindingCount,VkBuffer* pBuffers,void* pOffsets,void* pSizes,void* pStrides);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer,uint32_t depthTestEnable);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer,uint32_t depthWriteEnable);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer,VkCompareOp depthCompareOp);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer,uint32_t depthBoundsTestEnable);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer,uint32_t stencilTestEnable);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetStencilOp(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,VkStencilOp failOp,VkStencilOp passOp,VkStencilOp depthFailOp,VkCompareOp compareOp);';
        if($extension === 'VK_EXT_extended_dynamic_state2') $this->cdefs[] = 'void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer,uint32_t patchControlPoints);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer,uint32_t patchControlPoints);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer,uint32_t rasterizerDiscardEnable);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer,uint32_t depthBiasEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state2') $this->cdefs[] = 'void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer,VkLogicOp logicOp);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer,VkLogicOp logicOp);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer,uint32_t primitiveRestartEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer,VkTessellationDomainOrigin domainOrigin);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer,VkTessellationDomainOrigin domainOrigin);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer,uint32_t depthClampEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer,uint32_t depthClampEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer,VkPolygonMode polygonMode);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer,VkPolygonMode polygonMode);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer,VkSampleCountFlagBits rasterizationSamples);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer,VkSampleCountFlagBits rasterizationSamples);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer,VkSampleCountFlagBits samples,void* pSampleMask);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer,VkSampleCountFlagBits samples,void* pSampleMask);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer,uint32_t alphaToCoverageEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer,uint32_t alphaToCoverageEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer,uint32_t alphaToOneEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer,uint32_t alphaToOneEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer,uint32_t logicOpEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer,uint32_t logicOpEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,void* pColorBlendEnables);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,void* pColorBlendEnables);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,VkColorBlendEquationEXT* pColorBlendEquations);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,VkColorBlendEquationEXT* pColorBlendEquations);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,void* pColorWriteMasks);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,void* pColorWriteMasks);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer,uint32_t rasterizationStream);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer,uint32_t rasterizationStream);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer,VkConservativeRasterizationModeEXT conservativeRasterizationMode);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer,VkConservativeRasterizationModeEXT conservativeRasterizationMode);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer,float extraPrimitiveOverestimationSize);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer,float extraPrimitiveOverestimationSize);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer,uint32_t depthClipEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer,uint32_t depthClipEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer,uint32_t sampleLocationsEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer,uint32_t sampleLocationsEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,VkColorBlendAdvancedEXT* pColorBlendAdvanced);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,VkColorBlendAdvancedEXT* pColorBlendAdvanced);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer,VkProvokingVertexModeEXT provokingVertexMode);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer,VkProvokingVertexModeEXT provokingVertexMode);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer,VkLineRasterizationModeEXT lineRasterizationMode);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer,VkLineRasterizationModeEXT lineRasterizationMode);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer,uint32_t stippledLineEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer,uint32_t stippledLineEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer,uint32_t negativeOneToOne);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer,uint32_t negativeOneToOne);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer,uint32_t viewportWScalingEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer,uint32_t viewportWScalingEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkViewportSwizzleNV* pViewportSwizzles);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkViewportSwizzleNV* pViewportSwizzles);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer,uint32_t coverageToColorEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer,uint32_t coverageToColorEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer,uint32_t coverageToColorLocation);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer,uint32_t coverageToColorLocation);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer,VkCoverageModulationModeNV coverageModulationMode);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer,VkCoverageModulationModeNV coverageModulationMode);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer,uint32_t coverageModulationTableEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer,uint32_t coverageModulationTableEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer,uint32_t coverageModulationTableCount,void* pCoverageModulationTable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer,uint32_t coverageModulationTableCount,void* pCoverageModulationTable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer,uint32_t shadingRateImageEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer,uint32_t shadingRateImageEnable);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer,VkCoverageReductionModeNV coverageReductionMode);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer,VkCoverageReductionModeNV coverageReductionMode);';
        if($extension === 'VK_EXT_extended_dynamic_state3') $this->cdefs[] = 'void vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer,uint32_t representativeFragmentTestEnable);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer,uint32_t representativeFragmentTestEnable);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'VkResult vkCreatePrivateDataSlot(VkDevice device,VkPrivateDataSlotCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkPrivateDataSlot* pPrivateDataSlot);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkDestroyPrivateDataSlot(VkDevice device,VkPrivateDataSlot privateDataSlot,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'VkResult vkSetPrivateData(VkDevice device,VkObjectType objectType,uint64_t objectHandle,VkPrivateDataSlot privateDataSlot,uint64_t data);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkGetPrivateData(VkDevice device,VkObjectType objectType,uint64_t objectHandle,VkPrivateDataSlot privateDataSlot,uint64_t* pData);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer,VkCopyBufferInfo2* pCopyBufferInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdCopyImage2(VkCommandBuffer commandBuffer,VkCopyImageInfo2* pCopyImageInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdBlitImage2(VkCommandBuffer commandBuffer,VkBlitImageInfo2* pBlitImageInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer,VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer,VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdResolveImage2(VkCommandBuffer commandBuffer,VkResolveImageInfo2* pResolveImageInfo);';
        if($extension === 'VK_KHR_object_refresh') $this->cdefs[] = 'void vkCmdRefreshObjectsKHR(VkCommandBuffer commandBuffer,VkRefreshObjectListKHR* pRefreshObjects);';
        if($extension === 'VK_KHR_object_refresh') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceRefreshableObjectTypesKHR(VkPhysicalDevice physicalDevice,uint32_t* pRefreshableObjectTypeCount,void* pRefreshableObjectTypes);';
        if($extension === 'VK_KHR_fragment_shading_rate') $this->cdefs[] = 'void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer,VkExtent2D* pFragmentSize,void* combinerOps);';
        if($extension === 'VK_KHR_fragment_shading_rate') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice,uint32_t* pFragmentShadingRateCount,VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);';
        if($extension === 'VK_NV_fragment_shading_rate_enums') $this->cdefs[] = 'void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer,VkFragmentShadingRateNV shadingRate,void* combinerOps);';
        if($extension === 'VK_KHR_acceleration_structure') $this->cdefs[] = 'void vkGetAccelerationStructureBuildSizesKHR(VkDevice device,VkAccelerationStructureBuildTypeKHR buildType,VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo,uint32_t* pMaxPrimitiveCounts,VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo);';
        if($extension === 'VK_EXT_vertex_input_dynamic_state') $this->cdefs[] = 'void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer,uint32_t vertexBindingDescriptionCount,VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,uint32_t vertexAttributeDescriptionCount,VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer,uint32_t vertexBindingDescriptionCount,VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,uint32_t vertexAttributeDescriptionCount,VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions);';
        if($extension === 'VK_EXT_color_write_enable') $this->cdefs[] = 'void vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer,uint32_t attachmentCount,void* pColorWriteEnables);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdSetEvent2(VkCommandBuffer commandBuffer,VkEvent event,VkDependencyInfo* pDependencyInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdResetEvent2(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags2 stageMask);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdWaitEvents2(VkCommandBuffer commandBuffer,uint32_t eventCount,VkEvent* pEvents,VkDependencyInfo* pDependencyInfos);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer,VkDependencyInfo* pDependencyInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'VkResult vkQueueSubmit2(VkQueue queue,uint32_t submitCount,VkSubmitInfo2* pSubmits,VkFence fence);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer,VkPipelineStageFlags2 stage,VkQueryPool queryPool,uint32_t query);';
        if($extension === 'VK_KHR_synchronization2') $this->cdefs[] = 'void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer,VkPipelineStageFlags2 stage,VkBuffer dstBuffer,uint64_t dstOffset,uint32_t marker);';
        if($extension === 'VK_KHR_synchronization2') $this->cdefs[] = 'void vkGetQueueCheckpointData2NV(VkQueue queue,uint32_t* pCheckpointDataCount,VkCheckpointData2NV* pCheckpointData);';
        if($extension === 'VK_EXT_host_image_copy') $this->cdefs[] = 'VkResult vkCopyMemoryToImageEXT(VkDevice device,VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo);';
        if($extension === 'VK_EXT_host_image_copy') $this->cdefs[] = 'VkResult vkCopyImageToMemoryEXT(VkDevice device,VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo);';
        if($extension === 'VK_EXT_host_image_copy') $this->cdefs[] = 'VkResult vkCopyImageToImageEXT(VkDevice device,VkCopyImageToImageInfoEXT* pCopyImageToImageInfo);';
        if($extension === 'VK_EXT_host_image_copy') $this->cdefs[] = 'VkResult vkTransitionImageLayoutEXT(VkDevice device,uint32_t transitionCount,VkHostImageLayoutTransitionInfoEXT* pTransitions);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice,void* pVideoProfile,VkVideoCapabilitiesKHR* pCapabilities);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice,VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,uint32_t* pVideoFormatPropertyCount,VkVideoFormatPropertiesKHR* pVideoFormatProperties);';
        if($extension === 'VK_KHR_video_encode_queue') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice,VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'VkResult vkCreateVideoSessionKHR(VkDevice device,VkVideoSessionCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkVideoSessionKHR* pVideoSession);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'void vkDestroyVideoSessionKHR(VkDevice device,VkVideoSessionKHR videoSession,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'VkResult vkCreateVideoSessionParametersKHR(VkDevice device,VkVideoSessionParametersCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkVideoSessionParametersKHR* pVideoSessionParameters);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'VkResult vkUpdateVideoSessionParametersKHR(VkDevice device,VkVideoSessionParametersKHR videoSessionParameters,VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo);';
        if($extension === 'VK_KHR_video_encode_queue') $this->cdefs[] = 'VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device,VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,size_t* pDataSize,void* pData);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'void vkDestroyVideoSessionParametersKHR(VkDevice device,VkVideoSessionParametersKHR videoSessionParameters,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device,VkVideoSessionKHR videoSession,uint32_t* pMemoryRequirementsCount,VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'VkResult vkBindVideoSessionMemoryKHR(VkDevice device,VkVideoSessionKHR videoSession,uint32_t bindSessionMemoryInfoCount,VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos);';
        if($extension === 'VK_KHR_video_decode_queue') $this->cdefs[] = 'void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer,VkVideoDecodeInfoKHR* pDecodeInfo);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer,VkVideoBeginCodingInfoKHR* pBeginInfo);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer,VkVideoCodingControlInfoKHR* pCodingControlInfo);';
        if($extension === 'VK_KHR_video_queue') $this->cdefs[] = 'void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer,VkVideoEndCodingInfoKHR* pEndCodingInfo);';
        if($extension === 'VK_KHR_video_encode_queue') $this->cdefs[] = 'void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer,VkVideoEncodeInfoKHR* pEncodeInfo);';
        if($extension === 'VK_NV_memory_decompression') $this->cdefs[] = 'void vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer,uint32_t decompressRegionCount,VkDecompressMemoryRegionNV* pDecompressMemoryRegions);';
        if($extension === 'VK_NV_memory_decompression') $this->cdefs[] = 'void vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer,uint64_t indirectCommandsAddress,uint64_t indirectCommandsCountAddress,uint32_t stride);';
        if($extension === 'VK_NVX_binary_import') $this->cdefs[] = 'VkResult vkCreateCuModuleNVX(VkDevice device,VkCuModuleCreateInfoNVX* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCuModuleNVX* pModule);';
        if($extension === 'VK_NVX_binary_import') $this->cdefs[] = 'VkResult vkCreateCuFunctionNVX(VkDevice device,VkCuFunctionCreateInfoNVX* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCuFunctionNVX* pFunction);';
        if($extension === 'VK_NVX_binary_import') $this->cdefs[] = 'void vkDestroyCuModuleNVX(VkDevice device,VkCuModuleNVX module,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_NVX_binary_import') $this->cdefs[] = 'void vkDestroyCuFunctionNVX(VkDevice device,VkCuFunctionNVX function,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_NVX_binary_import') $this->cdefs[] = 'void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer,VkCuLaunchInfoNVX* pLaunchInfo);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'void vkGetDescriptorSetLayoutSizeEXT(VkDevice device,VkDescriptorSetLayout layout,void* pLayoutSizeInBytes);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device,VkDescriptorSetLayout layout,uint32_t binding,void* pOffset);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'void vkGetDescriptorEXT(VkDevice device,VkDescriptorGetInfoEXT* pDescriptorInfo,size_t dataSize,void* pDescriptor);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer,uint32_t bufferCount,VkDescriptorBufferBindingInfoEXT* pBindingInfos);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t firstSet,uint32_t setCount,uint32_t* pBufferIndices,void* pOffsets);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t set);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device,VkBufferCaptureDescriptorDataInfoEXT* pInfo,void* pData);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device,VkImageCaptureDescriptorDataInfoEXT* pInfo,void* pData);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device,VkImageViewCaptureDescriptorDataInfoEXT* pInfo,void* pData);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device,VkSamplerCaptureDescriptorDataInfoEXT* pInfo,void* pData);';
        if($extension === 'VK_EXT_descriptor_buffer') $this->cdefs[] = 'VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device,VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,void* pData);';
        if($extension === 'VK_EXT_pageable_device_local_memory') $this->cdefs[] = 'void vkSetDeviceMemoryPriorityEXT(VkDevice device,VkDeviceMemory memory,float priority);';
        if($extension === 'VK_EXT_acquire_drm_display') $this->cdefs[] = 'VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice,int32_t drmFd,VkDisplayKHR display);';
        if($extension === 'VK_EXT_acquire_drm_display') $this->cdefs[] = 'VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice,int32_t drmFd,uint32_t connectorId,VkDisplayKHR* display);';
        if($extension === 'VK_KHR_present_wait') $this->cdefs[] = 'VkResult vkWaitForPresentKHR(VkDevice device,VkSwapchainKHR swapchain,uint64_t presentId,uint64_t timeout);';
        if($extension === 'VK_FUCHSIA_buffer_collection') $this->cdefs[] = 'VkResult vkCreateBufferCollectionFUCHSIA(VkDevice device,VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo,VkAllocationCallbacks* pAllocator,VkBufferCollectionFUCHSIA* pCollection);';
        if($extension === 'VK_FUCHSIA_buffer_collection') $this->cdefs[] = 'VkResult vkSetBufferCollectionBufferConstraintsFUCHSIA(VkDevice device,VkBufferCollectionFUCHSIA collection,VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo);';
        if($extension === 'VK_FUCHSIA_buffer_collection') $this->cdefs[] = 'VkResult vkSetBufferCollectionImageConstraintsFUCHSIA(VkDevice device,VkBufferCollectionFUCHSIA collection,VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo);';
        if($extension === 'VK_FUCHSIA_buffer_collection') $this->cdefs[] = 'void vkDestroyBufferCollectionFUCHSIA(VkDevice device,VkBufferCollectionFUCHSIA collection,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_FUCHSIA_buffer_collection') $this->cdefs[] = 'VkResult vkGetBufferCollectionPropertiesFUCHSIA(VkDevice device,VkBufferCollectionFUCHSIA collection,VkBufferCollectionPropertiesFUCHSIA* pProperties);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdBeginRendering(VkCommandBuffer commandBuffer,VkRenderingInfo* pRenderingInfo);';
        if($extension === 'VK_VERSION_1_3') $this->cdefs[] = 'void vkCmdEndRendering(VkCommandBuffer commandBuffer);';
        if($extension === 'VK_VALVE_descriptor_set_host_mapping') $this->cdefs[] = 'void vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device,VkDescriptorSetBindingReferenceVALVE* pBindingReference,VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping);';
        if($extension === 'VK_VALVE_descriptor_set_host_mapping') $this->cdefs[] = 'void vkGetDescriptorSetHostMappingVALVE(VkDevice device,VkDescriptorSet descriptorSet,void* ppData);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'VkResult vkCreateMicromapEXT(VkDevice device,VkMicromapCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkMicromapEXT* pMicromap);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer,uint32_t infoCount,VkMicromapBuildInfoEXT* pInfos);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'VkResult vkBuildMicromapsEXT(VkDevice device,VkDeferredOperationKHR deferredOperation,uint32_t infoCount,VkMicromapBuildInfoEXT* pInfos);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkDestroyMicromapEXT(VkDevice device,VkMicromapEXT micromap,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer,VkCopyMicromapInfoEXT* pInfo);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'VkResult vkCopyMicromapEXT(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMicromapInfoEXT* pInfo);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer,VkCopyMicromapToMemoryInfoEXT* pInfo);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'VkResult vkCopyMicromapToMemoryEXT(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMicromapToMemoryInfoEXT* pInfo);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer,VkCopyMemoryToMicromapInfoEXT* pInfo);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'VkResult vkCopyMemoryToMicromapEXT(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMemoryToMicromapInfoEXT* pInfo);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer,uint32_t micromapCount,VkMicromapEXT* pMicromaps,VkQueryType queryType,VkQueryPool queryPool,uint32_t firstQuery);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'VkResult vkWriteMicromapsPropertiesEXT(VkDevice device,uint32_t micromapCount,VkMicromapEXT* pMicromaps,VkQueryType queryType,size_t dataSize,void* pData,size_t stride);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkGetDeviceMicromapCompatibilityEXT(VkDevice device,VkMicromapVersionInfoEXT* pVersionInfo,void* pCompatibility);';
        if($extension === 'VK_EXT_opacity_micromap') $this->cdefs[] = 'void vkGetMicromapBuildSizesEXT(VkDevice device,VkAccelerationStructureBuildTypeKHR buildType,VkMicromapBuildInfoEXT* pBuildInfo,VkMicromapBuildSizesInfoEXT* pSizeInfo);';
        if($extension === 'VK_EXT_shader_module_identifier') $this->cdefs[] = 'void vkGetShaderModuleIdentifierEXT(VkDevice device,VkShaderModule shaderModule,VkShaderModuleIdentifierEXT* pIdentifier);';
        if($extension === 'VK_EXT_shader_module_identifier') $this->cdefs[] = 'void vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device,VkShaderModuleCreateInfo* pCreateInfo,VkShaderModuleIdentifierEXT* pIdentifier);';
        if($extension === 'VK_KHR_maintenance5') $this->cdefs[] = 'void vkGetImageSubresourceLayout2KHR(VkDevice device,VkImage image,VkImageSubresource2KHR* pSubresource,VkSubresourceLayout2KHR* pLayout);';
        if($extension === 'VK_EXT_pipeline_properties') $this->cdefs[] = 'VkResult vkGetPipelinePropertiesEXT(VkDevice device,VkPipelineInfoEXT* pPipelineInfo,VkBaseOutStructure* pPipelineProperties);';
        if($extension === 'VK_EXT_metal_objects') $this->cdefs[] = 'void vkExportMetalObjectsEXT(VkDevice device,VkExportMetalObjectsInfoEXT* pMetalObjectsInfo);';
        if($extension === 'VK_QCOM_tile_properties') $this->cdefs[] = 'VkResult vkGetFramebufferTilePropertiesQCOM(VkDevice device,VkFramebuffer framebuffer,uint32_t* pPropertiesCount,VkTilePropertiesQCOM* pProperties);';
        if($extension === 'VK_QCOM_tile_properties') $this->cdefs[] = 'VkResult vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device,VkRenderingInfo* pRenderingInfo,VkTilePropertiesQCOM* pProperties);';
        if($extension === 'VK_NV_optical_flow') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice,VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,uint32_t* pFormatCount,VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties);';
        if($extension === 'VK_NV_optical_flow') $this->cdefs[] = 'VkResult vkCreateOpticalFlowSessionNV(VkDevice device,VkOpticalFlowSessionCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkOpticalFlowSessionNV* pSession);';
        if($extension === 'VK_NV_optical_flow') $this->cdefs[] = 'void vkDestroyOpticalFlowSessionNV(VkDevice device,VkOpticalFlowSessionNV session,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_NV_optical_flow') $this->cdefs[] = 'VkResult vkBindOpticalFlowSessionImageNV(VkDevice device,VkOpticalFlowSessionNV session,VkOpticalFlowSessionBindingPointNV bindingPoint,VkImageView view,VkImageLayout layout);';
        if($extension === 'VK_NV_optical_flow') $this->cdefs[] = 'void vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer,VkOpticalFlowSessionNV session,VkOpticalFlowExecuteInfoNV* pExecuteInfo);';
        if($extension === 'VK_EXT_device_fault') $this->cdefs[] = 'VkResult vkGetDeviceFaultInfoEXT(VkDevice device,VkDeviceFaultCountsEXT* pFaultCounts,VkDeviceFaultInfoEXT* pFaultInfo);';
        if($extension === 'VK_EXT_depth_bias_control') $this->cdefs[] = 'void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer,VkDepthBiasInfoEXT* pDepthBiasInfo);';
        if($extension === 'VK_EXT_swapchain_maintenance1') $this->cdefs[] = 'VkResult vkReleaseSwapchainImagesEXT(VkDevice device,VkReleaseSwapchainImagesInfoEXT* pReleaseInfo);';
        if($extension === 'VK_KHR_maintenance5') $this->cdefs[] = 'void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device,VkDeviceImageSubresourceInfoKHR* pInfo,VkSubresourceLayout2KHR* pLayout);';
        if($extension === 'VK_KHR_map_memory2') $this->cdefs[] = 'VkResult vkMapMemory2KHR(VkDevice device,VkMemoryMapInfoKHR* pMemoryMapInfo,void* ppData);';
        if($extension === 'VK_KHR_map_memory2') $this->cdefs[] = 'VkResult vkUnmapMemory2KHR(VkDevice device,VkMemoryUnmapInfoKHR* pMemoryUnmapInfo);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'VkResult vkCreateShadersEXT(VkDevice device,uint32_t createInfoCount,VkShaderCreateInfoEXT* pCreateInfos,VkAllocationCallbacks* pAllocator,VkShaderEXT* pShaders);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkDestroyShaderEXT(VkDevice device,VkShaderEXT shader,VkAllocationCallbacks* pAllocator);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'VkResult vkGetShaderBinaryDataEXT(VkDevice device,VkShaderEXT shader,size_t* pDataSize,void* pData);';
        if($extension === 'VK_EXT_shader_object') $this->cdefs[] = 'void vkCmdBindShadersEXT(VkCommandBuffer commandBuffer,uint32_t stageCount,void* pStages,VkShaderEXT* pShaders);';
        if($extension === 'VK_QNX_external_memory_screen_buffer') $this->cdefs[] = 'VkResult vkGetScreenBufferPropertiesQNX(VkDevice device,void* buffer,VkScreenBufferPropertiesQNX* pProperties);';
        if($extension === 'VK_KHR_cooperative_matrix') $this->cdefs[] = 'VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkCooperativeMatrixPropertiesKHR* pProperties);';
        if($extension === 'VK_AMDX_shader_enqueue') $this->cdefs[] = 'VkResult vkGetExecutionGraphPipelineScratchSizeAMDX(VkDevice device,VkPipeline executionGraph,VkExecutionGraphPipelineScratchSizeAMDX* pSizeInfo);';
        if($extension === 'VK_AMDX_shader_enqueue') $this->cdefs[] = 'VkResult vkGetExecutionGraphPipelineNodeIndexAMDX(VkDevice device,VkPipeline executionGraph,VkPipelineShaderStageNodeCreateInfoAMDX* pNodeInfo,uint32_t* pNodeIndex);';
        if($extension === 'VK_AMDX_shader_enqueue') $this->cdefs[] = 'VkResult vkCreateExecutionGraphPipelinesAMDX(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkExecutionGraphPipelineCreateInfoAMDX* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);';
        if($extension === 'VK_AMDX_shader_enqueue') $this->cdefs[] = 'void vkCmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer,uint64_t scratch);';
        if($extension === 'VK_AMDX_shader_enqueue') $this->cdefs[] = 'void vkCmdDispatchGraphAMDX(VkCommandBuffer commandBuffer,uint64_t scratch,VkDispatchGraphCountInfoAMDX* pCountInfo);';
        if($extension === 'VK_AMDX_shader_enqueue') $this->cdefs[] = 'void vkCmdDispatchGraphIndirectAMDX(VkCommandBuffer commandBuffer,uint64_t scratch,VkDispatchGraphCountInfoAMDX* pCountInfo);';
        if($extension === 'VK_AMDX_shader_enqueue') $this->cdefs[] = 'void vkCmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer,uint64_t scratch,uint64_t countInfo);';
        if($extension === 'VK_NV_low_latency2') $this->cdefs[] = 'VkResult vkSetLatencySleepModeNV(VkDevice device,VkSwapchainKHR swapchain,VkLatencySleepModeInfoNV* pSleepModeInfo);';
        if($extension === 'VK_NV_low_latency2') $this->cdefs[] = 'VkResult vkLatencySleepNV(VkDevice device,VkSwapchainKHR swapchain,VkLatencySleepInfoNV* pSleepInfo);';
        if($extension === 'VK_NV_low_latency2') $this->cdefs[] = 'void vkSetLatencyMarkerNV(VkDevice device,VkSwapchainKHR swapchain,VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo);';
        if($extension === 'VK_NV_low_latency2') $this->cdefs[] = 'void vkGetLatencyTimingsNV(VkDevice device,VkSwapchainKHR swapchain,uint32_t* pTimingCount,VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo);';
        if($extension === 'VK_NV_low_latency2') $this->cdefs[] = 'void vkQueueNotifyOutOfBandNV(VkQueue queue,VkOutOfBandQueueTypeInfoNV pQueueTypeInfo);';
    }
}
