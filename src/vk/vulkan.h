typedef int VkAttachmentLoadOp;
typedef int VkAttachmentStoreOp;
typedef int VkBlendFactor;
typedef int VkBlendOp;
typedef int VkBorderColor;
typedef int VkFramebufferCreateFlagBits;
typedef int VkQueryPoolCreateFlagBits;
typedef int VkRenderPassCreateFlagBits;
typedef int VkSamplerCreateFlagBits;
typedef int VkPipelineCacheHeaderVersion;
typedef int VkPipelineCacheCreateFlagBits;
typedef int VkPipelineShaderStageCreateFlagBits;
typedef int VkDescriptorSetLayoutCreateFlagBits;
typedef int VkInstanceCreateFlagBits;
typedef int VkDeviceQueueCreateFlagBits;
typedef int VkBufferCreateFlagBits;
typedef int VkBufferUsageFlagBits;
typedef int VkColorComponentFlagBits;
typedef int VkComponentSwizzle;
typedef int VkCommandPoolCreateFlagBits;
typedef int VkCommandPoolResetFlagBits;
typedef int VkCommandBufferResetFlagBits;
typedef int VkCommandBufferLevel;
typedef int VkCommandBufferUsageFlagBits;
typedef int VkCompareOp;
typedef int VkCullModeFlagBits;
typedef int VkDescriptorType;
typedef int VkDeviceCreateFlagBits;
typedef int VkDynamicState;
typedef int VkFenceCreateFlagBits;
typedef int VkPolygonMode;
typedef int VkFormat;
typedef int VkFormatFeatureFlagBits;
typedef int VkFrontFace;
typedef int VkImageAspectFlagBits;
typedef int VkImageCreateFlagBits;
typedef int VkImageLayout;
typedef int VkImageTiling;
typedef int VkImageType;
typedef int VkImageUsageFlagBits;
typedef int VkImageViewCreateFlagBits;
typedef int VkImageViewType;
typedef int VkSharingMode;
typedef int VkIndexType;
typedef int VkLogicOp;
typedef int VkMemoryHeapFlagBits;
typedef int VkAccessFlagBits;
typedef int VkMemoryPropertyFlagBits;
typedef int VkPhysicalDeviceType;
typedef int VkPipelineBindPoint;
typedef int VkPipelineCreateFlagBits;
typedef int VkPrimitiveTopology;
typedef int VkQueryControlFlagBits;
typedef int VkQueryPipelineStatisticFlagBits;
typedef int VkQueryResultFlagBits;
typedef int VkQueryType;
typedef int VkQueueFlagBits;
typedef int VkSubpassContents;
typedef int VkResult;
typedef int VkShaderStageFlagBits;
typedef int VkSparseMemoryBindFlagBits;
typedef int VkStencilFaceFlagBits;
typedef int VkStencilOp;
typedef int VkStructureType;
typedef int VkSystemAllocationScope;
typedef int VkInternalAllocationType;
typedef int VkSamplerAddressMode;
typedef int VkFilter;
typedef int VkSamplerMipmapMode;
typedef int VkVertexInputRate;
typedef int VkPipelineStageFlagBits;
typedef int VkSparseImageFormatFlagBits;
typedef int VkSampleCountFlagBits;
typedef int VkAttachmentDescriptionFlagBits;
typedef int VkDescriptorPoolCreateFlagBits;
typedef int VkDependencyFlagBits;
typedef int VkObjectType;
typedef int VkEventCreateFlagBits;
typedef int VkPipelineLayoutCreateFlagBits;
typedef int VkSemaphoreCreateFlagBits;
typedef int VkRayTracingInvocationReorderModeNV;
typedef int VkIndirectCommandsLayoutUsageFlagBitsNV;
typedef int VkIndirectCommandsTokenTypeNV;
typedef int VkIndirectStateFlagBitsNV;
typedef int VkPrivateDataSlotCreateFlagBits;
typedef int VkDescriptorUpdateTemplateType;
typedef int VkViewportCoordinateSwizzleNV;
typedef int VkDiscardRectangleModeEXT;
typedef int VkSubpassDescriptionFlagBits;
typedef int VkPointClippingBehavior;
typedef int VkCoverageModulationModeNV;
typedef int VkCoverageReductionModeNV;
typedef int VkValidationCacheHeaderVersionEXT;
typedef int VkShaderInfoTypeAMD;
typedef int VkQueueGlobalPriorityKHR;
typedef int VkTimeDomainKHR;
typedef int VkConservativeRasterizationModeEXT;
typedef int VkResolveModeFlagBits;
typedef int VkDescriptorBindingFlagBits;
typedef int VkConditionalRenderingFlagBitsEXT;
typedef int VkSemaphoreType;
typedef int VkGeometryFlagBitsKHR;
typedef int VkGeometryInstanceFlagBitsKHR;
typedef int VkBuildAccelerationStructureFlagBitsKHR;
typedef int VkAccelerationStructureCreateFlagBitsKHR;
typedef int VkBuildAccelerationStructureModeKHR;
typedef int VkCopyAccelerationStructureModeKHR;
typedef int VkAccelerationStructureTypeKHR;
typedef int VkGeometryTypeKHR;
typedef int VkRayTracingShaderGroupTypeKHR;
typedef int VkAccelerationStructureMemoryRequirementsTypeNV;
typedef int VkAccelerationStructureBuildTypeKHR;
typedef int VkAccelerationStructureCompatibilityKHR;
typedef int VkShaderGroupShaderKHR;
typedef int VkMemoryOverallocationBehaviorAMD;
typedef int VkDeviceDiagnosticsConfigFlagBitsNV;
typedef int VkPipelineCreationFeedbackFlagBits;
typedef int VkPerformanceCounterScopeKHR;
typedef int VkPerformanceCounterUnitKHR;
typedef int VkPerformanceCounterStorageKHR;
typedef int VkPerformanceCounterDescriptionFlagBitsKHR;
typedef int VkAcquireProfilingLockFlagBitsKHR;
typedef int VkSemaphoreWaitFlagBits;
typedef int VkPerformanceConfigurationTypeINTEL;
typedef int VkQueryPoolSamplingModeINTEL;
typedef int VkPerformanceOverrideTypeINTEL;
typedef int VkPerformanceParameterTypeINTEL;
typedef int VkPerformanceValueTypeINTEL;
typedef int VkLineRasterizationModeEXT;
typedef int VkShaderModuleCreateFlagBits;
typedef int VkPipelineCompilerControlFlagBitsAMD;
typedef int VkShaderCorePropertiesFlagBitsAMD;
typedef int VkRefreshObjectFlagBitsKHR;
typedef int VkFaultLevel;
typedef int VkFaultType;
typedef int VkFaultQueryBehavior;
typedef int VkPipelineMatchControl;
typedef int VkSciSyncClientTypeNV;
typedef int VkSciSyncPrimitiveTypeNV;
typedef int VkToolPurposeFlagBits;
typedef int VkFragmentShadingRateNV;
typedef int VkFragmentShadingRateTypeNV;
typedef int VkSubpassMergeStatusEXT;
typedef int VkAccessFlagBits2;
typedef int VkPipelineStageFlagBits2;
typedef int VkProvokingVertexModeEXT;
typedef int VkPipelineCacheValidationVersion;
typedef int VkImageFormatConstraintsFlagBitsFUCHSIA;
typedef int VkHostImageCopyFlagBitsEXT;
typedef int VkImageConstraintsInfoFlagBitsFUCHSIA;
typedef int VkFormatFeatureFlagBits2;
typedef int VkRenderingFlagBits;
typedef int VkPipelineDepthStencilStateCreateFlagBits;
typedef int VkPipelineColorBlendStateCreateFlagBits;
typedef int VkImageCompressionFlagBitsEXT;
typedef int VkImageCompressionFixedRateFlagBitsEXT;
typedef int VkExportMetalObjectTypeFlagBitsEXT;
typedef int VkPipelineRobustnessBufferBehaviorEXT;
typedef int VkPipelineRobustnessImageBehaviorEXT;
typedef int VkDeviceAddressBindingFlagBitsEXT;
typedef int VkDeviceAddressBindingTypeEXT;
typedef int VkMicromapTypeEXT;
typedef int VkBuildMicromapModeEXT;
typedef int VkCopyMicromapModeEXT;
typedef int VkBuildMicromapFlagBitsEXT;
typedef int VkMicromapCreateFlagBitsEXT;
typedef int VkOpacityMicromapFormatEXT;
typedef int VkOpacityMicromapSpecialIndexEXT;
typedef int VkDeviceFaultVendorBinaryHeaderVersionEXT;
typedef int VkFrameBoundaryFlagBitsEXT;
typedef int VkMemoryDecompressionMethodFlagBitsNV;
typedef int VkDepthBiasRepresentationEXT;
typedef int VkDirectDriverLoadingModeLUNARG;
typedef int VkPipelineCreateFlagBits2KHR;
typedef int VkBufferUsageFlagBits2KHR;
typedef int VkDisplacementMicromapFormatNV;
typedef int VkShaderCreateFlagBitsEXT;
typedef int VkShaderCodeTypeEXT;
typedef int VkScopeKHR;
typedef int VkComponentTypeKHR;
typedef int VkCubicFilterWeightsQCOM;
typedef int VkBlockMatchWindowCompareModeQCOM;
typedef int VkLayeredDriverUnderlyingApiMSFT;
typedef int VkColorSpaceKHR;
typedef int VkCompositeAlphaFlagBitsKHR;
typedef int VkDisplayPlaneAlphaFlagBitsKHR;
typedef int VkPresentModeKHR;
typedef int VkSurfaceTransformFlagBitsKHR;
typedef int VkDebugReportFlagBitsEXT;
typedef int VkDebugReportObjectTypeEXT;
typedef int VkDeviceMemoryReportEventTypeEXT;
typedef int VkRasterizationOrderAMD;
typedef int VkExternalMemoryHandleTypeFlagBitsNV;
typedef int VkExternalMemoryFeatureFlagBitsNV;
typedef int VkValidationCheckEXT;
typedef int VkValidationFeatureEnableEXT;
typedef int VkValidationFeatureDisableEXT;
typedef int VkExternalMemoryHandleTypeFlagBits;
typedef int VkExternalMemoryFeatureFlagBits;
typedef int VkExternalSemaphoreHandleTypeFlagBits;
typedef int VkExternalSemaphoreFeatureFlagBits;
typedef int VkSemaphoreImportFlagBits;
typedef int VkExternalFenceHandleTypeFlagBits;
typedef int VkExternalFenceFeatureFlagBits;
typedef int VkFenceImportFlagBits;
typedef int VkSurfaceCounterFlagBitsEXT;
typedef int VkDisplayPowerStateEXT;
typedef int VkDeviceEventTypeEXT;
typedef int VkDisplayEventTypeEXT;
typedef int VkPeerMemoryFeatureFlagBits;
typedef int VkMemoryAllocateFlagBits;
typedef int VkDeviceGroupPresentModeFlagBitsKHR;
typedef int VkSwapchainCreateFlagBitsKHR;
typedef int VkSubgroupFeatureFlagBits;
typedef int VkTessellationDomainOrigin;
typedef int VkSamplerYcbcrModelConversion;
typedef int VkSamplerYcbcrRange;
typedef int VkChromaLocation;
typedef int VkSamplerReductionMode;
typedef int VkBlendOverlapEXT;
typedef int VkDebugUtilsMessageSeverityFlagBitsEXT;
typedef int VkDebugUtilsMessageTypeFlagBitsEXT;
typedef int VkFullScreenExclusiveEXT;
typedef int VkShaderFloatControlsIndependence;
typedef int VkSwapchainImageUsageFlagBitsANDROID;
typedef int VkFragmentShadingRateCombinerOpKHR;
typedef int VkSubmitFlagBits;
typedef int VkGraphicsPipelineLibraryFlagBitsEXT;
typedef int VkOpticalFlowGridSizeFlagBitsNV;
typedef int VkOpticalFlowUsageFlagBitsNV;
typedef int VkOpticalFlowPerformanceLevelNV;
typedef int VkOpticalFlowSessionBindingPointNV;
typedef int VkOpticalFlowSessionCreateFlagBitsNV;
typedef int VkOpticalFlowExecuteFlagBitsNV;
typedef int VkDeviceFaultAddressTypeEXT;
typedef int VkPresentScalingFlagBitsEXT;
typedef int VkPresentGravityFlagBitsEXT;
typedef int VkLayerSettingTypeEXT;
typedef int VkLatencyMarkerNV;
typedef int VkOutOfBandQueueTypeNV;
typedef int VkPhysicalDeviceSchedulingControlsFlagBitsARM;
typedef int VkVendorId;
typedef int VkDriverId;
typedef int VkShadingRatePaletteEntryNV;
typedef int VkCoarseSampleOrderTypeNV;
typedef int VkPipelineExecutableStatisticFormatKHR;
typedef int VkVideoCodecOperationFlagBitsKHR;
typedef int VkVideoChromaSubsamplingFlagBitsKHR;
typedef int VkVideoComponentBitDepthFlagBitsKHR;
typedef int VkVideoCapabilityFlagBitsKHR;
typedef int VkVideoSessionCreateFlagBitsKHR;
typedef int VkVideoCodingControlFlagBitsKHR;
typedef int VkQueryResultStatusKHR;
typedef int VkVideoDecodeUsageFlagBitsKHR;
typedef int VkVideoDecodeCapabilityFlagBitsKHR;
typedef int VkVideoDecodeH264PictureLayoutFlagBitsKHR;
typedef int VkVideoEncodeUsageFlagBitsKHR;
typedef int VkVideoEncodeContentFlagBitsKHR;
typedef int VkVideoEncodeTuningModeKHR;
typedef int VkVideoEncodeCapabilityFlagBitsKHR;
typedef int VkVideoEncodeFeedbackFlagBitsKHR;
typedef int VkVideoEncodeRateControlModeFlagBitsKHR;
typedef int VkVideoEncodeH264CapabilityFlagBitsKHR;
typedef int VkVideoEncodeH264StdFlagBitsKHR;
typedef int VkVideoEncodeH264RateControlFlagBitsKHR;
typedef int VkVideoEncodeH265CapabilityFlagBitsKHR;
typedef int VkVideoEncodeH265StdFlagBitsKHR;
typedef int VkVideoEncodeH265RateControlFlagBitsKHR;
typedef int VkVideoEncodeH265CtbSizeFlagBitsKHR;
typedef int VkVideoEncodeH265TransformBlockSizeFlagBitsKHR;
typedef int VkAccelerationStructureMotionInstanceTypeNV;
typedef int VkFramebufferCreateFlags;
typedef int VkQueryPoolCreateFlags;
typedef int VkRenderPassCreateFlags;
typedef int VkSamplerCreateFlags;
typedef int VkPipelineLayoutCreateFlags;
typedef int VkPipelineCacheCreateFlags;
typedef int VkPipelineDepthStencilStateCreateFlags;
typedef int VkPipelineDynamicStateCreateFlags;
typedef int VkPipelineColorBlendStateCreateFlags;
typedef int VkPipelineMultisampleStateCreateFlags;
typedef int VkPipelineRasterizationStateCreateFlags;
typedef int VkPipelineViewportStateCreateFlags;
typedef int VkPipelineTessellationStateCreateFlags;
typedef int VkPipelineInputAssemblyStateCreateFlags;
typedef int VkPipelineVertexInputStateCreateFlags;
typedef int VkPipelineShaderStageCreateFlags;
typedef int VkDescriptorSetLayoutCreateFlags;
typedef int VkBufferViewCreateFlags;
typedef int VkInstanceCreateFlags;
typedef int VkDeviceCreateFlags;
typedef int VkDeviceQueueCreateFlags;
typedef int VkQueueFlags;
typedef int VkMemoryPropertyFlags;
typedef int VkMemoryHeapFlags;
typedef int VkAccessFlags;
typedef int VkBufferUsageFlags;
typedef int VkBufferCreateFlags;
typedef int VkShaderStageFlags;
typedef int VkImageUsageFlags;
typedef int VkImageCreateFlags;
typedef int VkImageViewCreateFlags;
typedef int VkPipelineCreateFlags;
typedef int VkColorComponentFlags;
typedef int VkFenceCreateFlags;
typedef int VkSemaphoreCreateFlags;
typedef int VkFormatFeatureFlags;
typedef int VkQueryControlFlags;
typedef int VkQueryResultFlags;
typedef int VkShaderModuleCreateFlags;
typedef int VkEventCreateFlags;
typedef int VkCommandPoolCreateFlags;
typedef int VkCommandPoolResetFlags;
typedef int VkCommandBufferResetFlags;
typedef int VkCommandBufferUsageFlags;
typedef int VkQueryPipelineStatisticFlags;
typedef int VkMemoryMapFlags;
typedef int VkMemoryUnmapFlagsKHR;
typedef int VkImageAspectFlags;
typedef int VkSparseMemoryBindFlags;
typedef int VkSparseImageFormatFlags;
typedef int VkSubpassDescriptionFlags;
typedef int VkPipelineStageFlags;
typedef int VkSampleCountFlags;
typedef int VkAttachmentDescriptionFlags;
typedef int VkStencilFaceFlags;
typedef int VkCullModeFlags;
typedef int VkDescriptorPoolCreateFlags;
typedef int VkDescriptorPoolResetFlags;
typedef int VkDependencyFlags;
typedef int VkSubgroupFeatureFlags;
typedef int VkIndirectCommandsLayoutUsageFlagsNV;
typedef int VkIndirectStateFlagsNV;
typedef int VkGeometryFlagsKHR;
typedef int VkGeometryFlagsNV;
typedef int VkGeometryInstanceFlagsKHR;
typedef int VkGeometryInstanceFlagsNV;
typedef int VkBuildAccelerationStructureFlagsKHR;
typedef int VkBuildAccelerationStructureFlagsNV;
typedef int VkPrivateDataSlotCreateFlags;
typedef int VkPrivateDataSlotCreateFlagsEXT;
typedef int VkAccelerationStructureCreateFlagsKHR;
typedef int VkDescriptorUpdateTemplateCreateFlags;
typedef int VkDescriptorUpdateTemplateCreateFlagsKHR;
typedef int VkPipelineCreationFeedbackFlags;
typedef int VkPipelineCreationFeedbackFlagsEXT;
typedef int VkPerformanceCounterDescriptionFlagsKHR;
typedef int VkAcquireProfilingLockFlagsKHR;
typedef int VkSemaphoreWaitFlags;
typedef int VkSemaphoreWaitFlagsKHR;
typedef int VkPipelineCompilerControlFlagsAMD;
typedef int VkShaderCorePropertiesFlagsAMD;
typedef int VkDeviceDiagnosticsConfigFlagsNV;
typedef int VkRefreshObjectFlagsKHR;
typedef int VkAccessFlags2;
typedef int VkAccessFlags2KHR;
typedef int VkPipelineStageFlags2;
typedef int VkPipelineStageFlags2KHR;
typedef int VkAccelerationStructureMotionInfoFlagsNV;
typedef int VkAccelerationStructureMotionInstanceFlagsNV;
typedef int VkFormatFeatureFlags2;
typedef int VkFormatFeatureFlags2KHR;
typedef int VkRenderingFlags;
typedef int VkMemoryDecompressionMethodFlagsNV;
typedef int VkRenderingFlagsKHR;
typedef int VkBuildMicromapFlagsEXT;
typedef int VkMicromapCreateFlagsEXT;
typedef int VkDirectDriverLoadingFlagsLUNARG;
typedef int VkPipelineCreateFlags2KHR;
typedef int VkBufferUsageFlags2KHR;
typedef int VkCompositeAlphaFlagsKHR;
typedef int VkDisplayPlaneAlphaFlagsKHR;
typedef int VkSurfaceTransformFlagsKHR;
typedef int VkSwapchainCreateFlagsKHR;
typedef int VkDisplayModeCreateFlagsKHR;
typedef int VkDisplaySurfaceCreateFlagsKHR;
typedef int VkAndroidSurfaceCreateFlagsKHR;
typedef int VkViSurfaceCreateFlagsNN;
typedef int VkWaylandSurfaceCreateFlagsKHR;
typedef int VkWin32SurfaceCreateFlagsKHR;
typedef int VkXlibSurfaceCreateFlagsKHR;
typedef int VkXcbSurfaceCreateFlagsKHR;
typedef int VkDirectFBSurfaceCreateFlagsEXT;
typedef int VkIOSSurfaceCreateFlagsMVK;
typedef int VkMacOSSurfaceCreateFlagsMVK;
typedef int VkMetalSurfaceCreateFlagsEXT;
typedef int VkImagePipeSurfaceCreateFlagsFUCHSIA;
typedef int VkStreamDescriptorSurfaceCreateFlagsGGP;
typedef int VkHeadlessSurfaceCreateFlagsEXT;
typedef int VkScreenSurfaceCreateFlagsQNX;
typedef int VkPeerMemoryFeatureFlags;
typedef int VkPeerMemoryFeatureFlagsKHR;
typedef int VkMemoryAllocateFlags;
typedef int VkMemoryAllocateFlagsKHR;
typedef int VkDeviceGroupPresentModeFlagsKHR;
typedef int VkDebugReportFlagsEXT;
typedef int VkCommandPoolTrimFlags;
typedef int VkCommandPoolTrimFlagsKHR;
typedef int VkExternalMemoryHandleTypeFlagsNV;
typedef int VkExternalMemoryFeatureFlagsNV;
typedef int VkExternalMemoryHandleTypeFlags;
typedef int VkExternalMemoryHandleTypeFlagsKHR;
typedef int VkExternalMemoryFeatureFlags;
typedef int VkExternalMemoryFeatureFlagsKHR;
typedef int VkExternalSemaphoreHandleTypeFlags;
typedef int VkExternalSemaphoreHandleTypeFlagsKHR;
typedef int VkExternalSemaphoreFeatureFlags;
typedef int VkExternalSemaphoreFeatureFlagsKHR;
typedef int VkSemaphoreImportFlags;
typedef int VkSemaphoreImportFlagsKHR;
typedef int VkExternalFenceHandleTypeFlags;
typedef int VkExternalFenceHandleTypeFlagsKHR;
typedef int VkExternalFenceFeatureFlags;
typedef int VkExternalFenceFeatureFlagsKHR;
typedef int VkFenceImportFlags;
typedef int VkFenceImportFlagsKHR;
typedef int VkSurfaceCounterFlagsEXT;
typedef int VkPipelineViewportSwizzleStateCreateFlagsNV;
typedef int VkPipelineDiscardRectangleStateCreateFlagsEXT;
typedef int VkPipelineCoverageToColorStateCreateFlagsNV;
typedef int VkPipelineCoverageModulationStateCreateFlagsNV;
typedef int VkPipelineCoverageReductionStateCreateFlagsNV;
typedef int VkValidationCacheCreateFlagsEXT;
typedef int VkDebugUtilsMessageSeverityFlagsEXT;
typedef int VkDebugUtilsMessageTypeFlagsEXT;
typedef int VkDebugUtilsMessengerCreateFlagsEXT;
typedef int VkDebugUtilsMessengerCallbackDataFlagsEXT;
typedef int VkDeviceMemoryReportFlagsEXT;
typedef int VkPipelineRasterizationConservativeStateCreateFlagsEXT;
typedef int VkDescriptorBindingFlags;
typedef int VkDescriptorBindingFlagsEXT;
typedef int VkConditionalRenderingFlagsEXT;
typedef int VkResolveModeFlags;
typedef int VkResolveModeFlagsKHR;
typedef int VkPipelineRasterizationStateStreamCreateFlagsEXT;
typedef int VkPipelineRasterizationDepthClipStateCreateFlagsEXT;
typedef int VkSwapchainImageUsageFlagsANDROID;
typedef int VkToolPurposeFlags;
typedef int VkToolPurposeFlagsEXT;
typedef int VkSubmitFlags;
typedef int VkSubmitFlagsKHR;
typedef int VkImageFormatConstraintsFlagsFUCHSIA;
typedef int VkHostImageCopyFlagsEXT;
typedef int VkImageConstraintsInfoFlagsFUCHSIA;
typedef int VkGraphicsPipelineLibraryFlagsEXT;
typedef int VkImageCompressionFlagsEXT;
typedef int VkImageCompressionFixedRateFlagsEXT;
typedef int VkExportMetalObjectTypeFlagsEXT;
typedef int VkDeviceAddressBindingFlagsEXT;
typedef int VkOpticalFlowGridSizeFlagsNV;
typedef int VkOpticalFlowUsageFlagsNV;
typedef int VkOpticalFlowSessionCreateFlagsNV;
typedef int VkOpticalFlowExecuteFlagsNV;
typedef int VkFrameBoundaryFlagsEXT;
typedef int VkPresentScalingFlagsEXT;
typedef int VkPresentGravityFlagsEXT;
typedef int VkShaderCreateFlagsEXT;
typedef int VkPhysicalDeviceSchedulingControlsFlagsARM;
typedef int VkVideoCodecOperationFlagsKHR;
typedef int VkVideoCapabilityFlagsKHR;
typedef int VkVideoSessionCreateFlagsKHR;
typedef int VkVideoSessionParametersCreateFlagsKHR;
typedef int VkVideoBeginCodingFlagsKHR;
typedef int VkVideoEndCodingFlagsKHR;
typedef int VkVideoCodingControlFlagsKHR;
typedef int VkVideoDecodeUsageFlagsKHR;
typedef int VkVideoDecodeCapabilityFlagsKHR;
typedef int VkVideoDecodeFlagsKHR;
typedef int VkVideoDecodeH264PictureLayoutFlagsKHR;
typedef int VkVideoEncodeFlagsKHR;
typedef int VkVideoEncodeUsageFlagsKHR;
typedef int VkVideoEncodeContentFlagsKHR;
typedef int VkVideoEncodeCapabilityFlagsKHR;
typedef int VkVideoEncodeFeedbackFlagsKHR;
typedef int VkVideoEncodeRateControlFlagsKHR;
typedef int VkVideoEncodeRateControlModeFlagsKHR;
typedef int VkVideoChromaSubsamplingFlagsKHR;
typedef int VkVideoComponentBitDepthFlagsKHR;
typedef int VkVideoEncodeH264CapabilityFlagsKHR;
typedef int VkVideoEncodeH264StdFlagsKHR;
typedef int VkVideoEncodeH264RateControlFlagsKHR;
typedef int VkVideoEncodeH265CapabilityFlagsKHR;
typedef int VkVideoEncodeH265StdFlagsKHR;
typedef int VkVideoEncodeH265RateControlFlagsKHR;
typedef int VkVideoEncodeH265CtbSizeFlagsKHR;
typedef int VkVideoEncodeH265TransformBlockSizeFlagsKHR;
typedef void* VkInstance;
typedef void* VkPhysicalDevice;
typedef void* VkDevice;
typedef void* VkQueue;
typedef void* VkCommandBuffer;
typedef void* VkDeviceMemory;
typedef void* VkCommandPool;
typedef void* VkBuffer;
typedef void* VkBufferView;
typedef void* VkImage;
typedef void* VkImageView;
typedef void* VkShaderModule;
typedef void* VkPipeline;
typedef void* VkPipelineLayout;
typedef void* VkSampler;
typedef void* VkDescriptorSet;
typedef void* VkDescriptorSetLayout;
typedef void* VkDescriptorPool;
typedef void* VkFence;
typedef void* VkSemaphore;
typedef void* VkEvent;
typedef void* VkQueryPool;
typedef void* VkFramebuffer;
typedef void* VkRenderPass;
typedef void* VkPipelineCache;
typedef void* VkIndirectCommandsLayoutNV;
typedef void* VkDescriptorUpdateTemplate;
typedef void* VkDescriptorUpdateTemplateKHR;
typedef void* VkSamplerYcbcrConversion;
typedef void* VkSamplerYcbcrConversionKHR;
typedef void* VkValidationCacheEXT;
typedef void* VkAccelerationStructureKHR;
typedef void* VkAccelerationStructureNV;
typedef void* VkPerformanceConfigurationINTEL;
typedef void* VkBufferCollectionFUCHSIA;
typedef void* VkDeferredOperationKHR;
typedef void* VkPrivateDataSlot;
typedef void* VkPrivateDataSlotEXT;
typedef void* VkCuModuleNVX;
typedef void* VkCuFunctionNVX;
typedef void* VkOpticalFlowSessionNV;
typedef void* VkMicromapEXT;
typedef void* VkShaderEXT;
typedef void* VkDisplayKHR;
typedef void* VkDisplayModeKHR;
typedef void* VkSurfaceKHR;
typedef void* VkSwapchainKHR;
typedef void* VkDebugReportCallbackEXT;
typedef void* VkDebugUtilsMessengerEXT;
typedef void* VkVideoSessionKHR;
typedef void* VkVideoSessionParametersKHR;
typedef void* VkSemaphoreSciSyncPoolNV;
typedef void* VkCudaModuleNV;
typedef void* VkCudaFunctionNV;
typedef struct {VkStructureType sType ;void* pNext ;} VkBaseOutStructure;
typedef struct {VkStructureType sType ;void* pNext ;} VkBaseInStructure;
typedef struct {int32_t x ;int32_t y ;} VkOffset2D;
typedef struct {int32_t x ;int32_t y ;int32_t z ;} VkOffset3D;
typedef struct {uint32_t width ;uint32_t height ;} VkExtent2D;
typedef struct {uint32_t width ;uint32_t height ;uint32_t depth ;} VkExtent3D;
typedef struct {float x ;float y ;float width ;float height ;float minDepth ;float maxDepth ;} VkViewport;
typedef struct {VkOffset2D offset ;VkExtent2D extent ;} VkRect2D;
typedef struct {VkRect2D rect ;uint32_t baseArrayLayer ;uint32_t layerCount ;} VkClearRect;
typedef struct {VkComponentSwizzle r ;VkComponentSwizzle g ;VkComponentSwizzle b ;VkComponentSwizzle a ;} VkComponentMapping;
typedef struct {uint32_t apiVersion ;uint32_t driverVersion ;uint32_t vendorID ;uint32_t deviceID ;VkPhysicalDeviceType deviceType ;char deviceName [256];uint8_t pipelineCacheUUID [16];void* limits ;void* sparseProperties ;} VkPhysicalDeviceProperties;
typedef struct {char extensionName [256];uint32_t specVersion ;} VkExtensionProperties;
typedef struct {char layerName [256];uint32_t specVersion ;uint32_t implementationVersion ;char description [256];} VkLayerProperties;
typedef struct {VkStructureType sType ;void* pNext ;const char* pApplicationName ;uint32_t applicationVersion ;const char* pEngineName ;uint32_t engineVersion ;uint32_t apiVersion ;} VkApplicationInfo;
typedef struct {void* pUserData ;void* pfnAllocation ;void* pfnReallocation ;void* pfnFree ;void* pfnInternalAllocation ;void* pfnInternalFree ;} VkAllocationCallbacks;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceQueueCreateFlags flags ;uint32_t queueFamilyIndex ;uint32_t queueCount ;void* pQueuePriorities ;} VkDeviceQueueCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceCreateFlags flags ;uint32_t queueCreateInfoCount ;VkDeviceQueueCreateInfo* pQueueCreateInfos ;uint32_t enabledLayerCount ;void* ppEnabledLayerNames ;uint32_t enabledExtensionCount ;void* ppEnabledExtensionNames ;void* pEnabledFeatures ;} VkDeviceCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkInstanceCreateFlags flags ;VkApplicationInfo* pApplicationInfo ;uint32_t enabledLayerCount ;void* ppEnabledLayerNames ;uint32_t enabledExtensionCount ;void* ppEnabledExtensionNames ;} VkInstanceCreateInfo;
typedef struct {VkQueueFlags queueFlags ;uint32_t queueCount ;uint32_t timestampValidBits ;VkExtent3D minImageTransferGranularity ;} VkQueueFamilyProperties;
typedef struct {uint32_t memoryTypeCount ;void* memoryTypes ;uint32_t memoryHeapCount ;void* memoryHeaps ;} VkPhysicalDeviceMemoryProperties;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t allocationSize ;uint32_t memoryTypeIndex ;} VkMemoryAllocateInfo;
typedef struct {uint64_t size ;uint64_t alignment ;uint32_t memoryTypeBits ;} VkMemoryRequirements;
typedef struct {VkImageAspectFlags aspectMask ;VkExtent3D imageGranularity ;VkSparseImageFormatFlags flags ;} VkSparseImageFormatProperties;
typedef struct {VkSparseImageFormatProperties formatProperties ;uint32_t imageMipTailFirstLod ;uint64_t imageMipTailSize ;uint64_t imageMipTailOffset ;uint64_t imageMipTailStride ;} VkSparseImageMemoryRequirements;
typedef struct {VkMemoryPropertyFlags propertyFlags ;uint32_t heapIndex ;} VkMemoryType;
typedef struct {uint64_t size ;VkMemoryHeapFlags flags ;} VkMemoryHeap;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;uint64_t offset ;uint64_t size ;} VkMappedMemoryRange;
typedef struct {VkFormatFeatureFlags linearTilingFeatures ;VkFormatFeatureFlags optimalTilingFeatures ;VkFormatFeatureFlags bufferFeatures ;} VkFormatProperties;
typedef struct {VkExtent3D maxExtent ;uint32_t maxMipLevels ;uint32_t maxArrayLayers ;VkSampleCountFlags sampleCounts ;uint64_t maxResourceSize ;} VkImageFormatProperties;
typedef struct {VkBuffer buffer ;uint64_t offset ;uint64_t range ;} VkDescriptorBufferInfo;
typedef struct {VkSampler sampler ;VkImageView imageView ;VkImageLayout imageLayout ;} VkDescriptorImageInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSet dstSet ;uint32_t dstBinding ;uint32_t dstArrayElement ;uint32_t descriptorCount ;VkDescriptorType descriptorType ;VkDescriptorImageInfo* pImageInfo ;VkDescriptorBufferInfo* pBufferInfo ;VkBufferView* pTexelBufferView ;} VkWriteDescriptorSet;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSet srcSet ;uint32_t srcBinding ;uint32_t srcArrayElement ;VkDescriptorSet dstSet ;uint32_t dstBinding ;uint32_t dstArrayElement ;uint32_t descriptorCount ;} VkCopyDescriptorSet;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferUsageFlags2KHR usage ;} VkBufferUsageFlags2CreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateFlags flags ;uint64_t size ;VkBufferUsageFlags usage ;VkSharingMode sharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;} VkBufferCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferViewCreateFlags flags ;VkBuffer buffer ;VkFormat format ;uint64_t offset ;uint64_t range ;} VkBufferViewCreateInfo;
typedef struct {VkImageAspectFlags aspectMask ;uint32_t mipLevel ;uint32_t arrayLayer ;} VkImageSubresource;
typedef struct {VkImageAspectFlags aspectMask ;uint32_t mipLevel ;uint32_t baseArrayLayer ;uint32_t layerCount ;} VkImageSubresourceLayers;
typedef struct {VkImageAspectFlags aspectMask ;uint32_t baseMipLevel ;uint32_t levelCount ;uint32_t baseArrayLayer ;uint32_t layerCount ;} VkImageSubresourceRange;
typedef struct {VkStructureType sType ;void* pNext ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;} VkMemoryBarrier;
typedef struct {VkStructureType sType ;void* pNext ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;} VkBufferMemoryBarrier;
typedef struct {VkStructureType sType ;void* pNext ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;VkImageLayout oldLayout ;VkImageLayout newLayout ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkImage image ;VkImageSubresourceRange subresourceRange ;} VkImageMemoryBarrier;
typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateFlags flags ;VkImageType imageType ;VkFormat format ;VkExtent3D extent ;uint32_t mipLevels ;uint32_t arrayLayers ;VkSampleCountFlagBits samples ;VkImageTiling tiling ;VkImageUsageFlags usage ;VkSharingMode sharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;VkImageLayout initialLayout ;} VkImageCreateInfo;
typedef struct {uint64_t offset ;uint64_t size ;uint64_t rowPitch ;uint64_t arrayPitch ;uint64_t depthPitch ;} VkSubresourceLayout;
typedef struct {VkStructureType sType ;void* pNext ;VkImageViewCreateFlags flags ;VkImage image ;VkImageViewType viewType ;VkFormat format ;VkComponentMapping components ;VkImageSubresourceRange subresourceRange ;} VkImageViewCreateInfo;
typedef struct {uint64_t srcOffset ;uint64_t dstOffset ;uint64_t size ;} VkBufferCopy;
typedef struct {uint64_t resourceOffset ;uint64_t size ;VkDeviceMemory memory ;uint64_t memoryOffset ;VkSparseMemoryBindFlags flags ;} VkSparseMemoryBind;
typedef struct {VkImageSubresource subresource ;VkOffset3D offset ;VkExtent3D extent ;VkDeviceMemory memory ;uint64_t memoryOffset ;VkSparseMemoryBindFlags flags ;} VkSparseImageMemoryBind;
typedef struct {VkBuffer buffer ;uint32_t bindCount ;VkSparseMemoryBind* pBinds ;} VkSparseBufferMemoryBindInfo;
typedef struct {VkImage image ;uint32_t bindCount ;VkSparseMemoryBind* pBinds ;} VkSparseImageOpaqueMemoryBindInfo;
typedef struct {VkImage image ;uint32_t bindCount ;VkSparseImageMemoryBind* pBinds ;} VkSparseImageMemoryBindInfo;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;VkSemaphore* pWaitSemaphores ;uint32_t bufferBindCount ;VkSparseBufferMemoryBindInfo* pBufferBinds ;uint32_t imageOpaqueBindCount ;VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds ;uint32_t imageBindCount ;VkSparseImageMemoryBindInfo* pImageBinds ;uint32_t signalSemaphoreCount ;VkSemaphore* pSignalSemaphores ;} VkBindSparseInfo;
typedef struct {VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageCopy;
typedef struct {VkImageSubresourceLayers srcSubresource ;void* srcOffsets ;VkImageSubresourceLayers dstSubresource ;void* dstOffsets ;} VkImageBlit;
typedef struct {uint64_t bufferOffset ;uint32_t bufferRowLength ;uint32_t bufferImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkBufferImageCopy;
typedef struct {uint64_t srcAddress ;uint64_t dstAddress ;uint64_t size ;} VkCopyMemoryIndirectCommandNV;
typedef struct {uint64_t srcAddress ;uint32_t bufferRowLength ;uint32_t bufferImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkCopyMemoryToImageIndirectCommandNV;
typedef struct {VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageResolve;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderModuleCreateFlags flags ;size_t codeSize ;uint32_t* pCode ;} VkShaderModuleCreateInfo;
typedef struct {uint32_t binding ;VkDescriptorType descriptorType ;uint32_t descriptorCount ;VkShaderStageFlags stageFlags ;VkSampler* pImmutableSamplers ;} VkDescriptorSetLayoutBinding;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSetLayoutCreateFlags flags ;uint32_t bindingCount ;VkDescriptorSetLayoutBinding* pBindings ;} VkDescriptorSetLayoutCreateInfo;
typedef struct {VkDescriptorType type ;uint32_t descriptorCount ;} VkDescriptorPoolSize;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorPoolCreateFlags flags ;uint32_t maxSets ;uint32_t poolSizeCount ;VkDescriptorPoolSize* pPoolSizes ;} VkDescriptorPoolCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorPool descriptorPool ;uint32_t descriptorSetCount ;VkDescriptorSetLayout* pSetLayouts ;} VkDescriptorSetAllocateInfo;
typedef struct {uint32_t constantID ;uint32_t offset ;size_t size ;} VkSpecializationMapEntry;
typedef struct {uint32_t mapEntryCount ;VkSpecializationMapEntry* pMapEntries ;size_t dataSize ;void* pData ;} VkSpecializationInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineShaderStageCreateFlags flags ;VkShaderStageFlagBits stage ;VkShaderModule module ;const char* pName ;VkSpecializationInfo* pSpecializationInfo ;} VkPipelineShaderStageCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;VkPipelineShaderStageCreateInfo stage ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkComputePipelineCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t deviceAddress ;uint64_t size ;uint64_t pipelineDeviceAddressCaptureReplay ;} VkComputePipelineIndirectBufferInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags2KHR flags ;} VkPipelineCreateFlags2CreateInfoKHR;
typedef struct {uint32_t binding ;uint32_t stride ;VkVertexInputRate inputRate ;} VkVertexInputBindingDescription;
typedef struct {uint32_t location ;uint32_t binding ;VkFormat format ;uint32_t offset ;} VkVertexInputAttributeDescription;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineVertexInputStateCreateFlags flags ;uint32_t vertexBindingDescriptionCount ;VkVertexInputBindingDescription* pVertexBindingDescriptions ;uint32_t vertexAttributeDescriptionCount ;VkVertexInputAttributeDescription* pVertexAttributeDescriptions ;} VkPipelineVertexInputStateCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineInputAssemblyStateCreateFlags flags ;VkPrimitiveTopology topology ;uint32_t primitiveRestartEnable ;} VkPipelineInputAssemblyStateCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineTessellationStateCreateFlags flags ;uint32_t patchControlPoints ;} VkPipelineTessellationStateCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineViewportStateCreateFlags flags ;uint32_t viewportCount ;VkViewport* pViewports ;uint32_t scissorCount ;VkRect2D* pScissors ;} VkPipelineViewportStateCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationStateCreateFlags flags ;uint32_t depthClampEnable ;uint32_t rasterizerDiscardEnable ;VkPolygonMode polygonMode ;VkCullModeFlags cullMode ;VkFrontFace frontFace ;uint32_t depthBiasEnable ;float depthBiasConstantFactor ;float depthBiasClamp ;float depthBiasSlopeFactor ;float lineWidth ;} VkPipelineRasterizationStateCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineMultisampleStateCreateFlags flags ;VkSampleCountFlagBits rasterizationSamples ;uint32_t sampleShadingEnable ;float minSampleShading ;void* pSampleMask ;uint32_t alphaToCoverageEnable ;uint32_t alphaToOneEnable ;} VkPipelineMultisampleStateCreateInfo;
typedef struct {uint32_t blendEnable ;VkBlendFactor srcColorBlendFactor ;VkBlendFactor dstColorBlendFactor ;VkBlendOp colorBlendOp ;VkBlendFactor srcAlphaBlendFactor ;VkBlendFactor dstAlphaBlendFactor ;VkBlendOp alphaBlendOp ;VkColorComponentFlags colorWriteMask ;} VkPipelineColorBlendAttachmentState;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineColorBlendStateCreateFlags flags ;uint32_t logicOpEnable ;VkLogicOp logicOp ;uint32_t attachmentCount ;VkPipelineColorBlendAttachmentState* pAttachments ;float blendConstants [4];} VkPipelineColorBlendStateCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineDynamicStateCreateFlags flags ;uint32_t dynamicStateCount ;void* pDynamicStates ;} VkPipelineDynamicStateCreateInfo;
typedef struct {VkStencilOp failOp ;VkStencilOp passOp ;VkStencilOp depthFailOp ;VkCompareOp compareOp ;uint32_t compareMask ;uint32_t writeMask ;uint32_t reference ;} VkStencilOpState;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineDepthStencilStateCreateFlags flags ;uint32_t depthTestEnable ;uint32_t depthWriteEnable ;VkCompareOp depthCompareOp ;uint32_t depthBoundsTestEnable ;uint32_t stencilTestEnable ;VkStencilOpState front ;VkStencilOpState back ;float minDepthBounds ;float maxDepthBounds ;} VkPipelineDepthStencilStateCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;VkPipelineVertexInputStateCreateInfo* pVertexInputState ;VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState ;VkPipelineTessellationStateCreateInfo* pTessellationState ;VkPipelineViewportStateCreateInfo* pViewportState ;VkPipelineRasterizationStateCreateInfo* pRasterizationState ;VkPipelineMultisampleStateCreateInfo* pMultisampleState ;VkPipelineDepthStencilStateCreateInfo* pDepthStencilState ;VkPipelineColorBlendStateCreateInfo* pColorBlendState ;VkPipelineDynamicStateCreateInfo* pDynamicState ;VkPipelineLayout layout ;VkRenderPass renderPass ;uint32_t subpass ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkGraphicsPipelineCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCacheCreateFlags flags ;size_t initialDataSize ;void* pInitialData ;} VkPipelineCacheCreateInfo;
typedef struct {uint32_t headerSize ;VkPipelineCacheHeaderVersion headerVersion ;uint32_t vendorID ;uint32_t deviceID ;uint8_t pipelineCacheUUID [16];} VkPipelineCacheHeaderVersionOne;
typedef struct {uint64_t codeSize ;uint64_t codeOffset ;} VkPipelineCacheStageValidationIndexEntry;
typedef struct {uint8_t pipelineIdentifier [16];uint64_t pipelineMemorySize ;uint64_t jsonSize ;uint64_t jsonOffset ;uint32_t stageIndexCount ;uint32_t stageIndexStride ;uint64_t stageIndexOffset ;} VkPipelineCacheSafetyCriticalIndexEntry;
typedef struct {VkPipelineCacheHeaderVersionOne headerVersionOne ;VkPipelineCacheValidationVersion validationVersion ;uint32_t implementationData ;uint32_t pipelineIndexCount ;uint32_t pipelineIndexStride ;uint64_t pipelineIndexOffset ;} VkPipelineCacheHeaderVersionSafetyCriticalOne;
typedef struct {VkShaderStageFlags stageFlags ;uint32_t offset ;uint32_t size ;} VkPushConstantRange;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineLayoutCreateFlags flags ;uint32_t setLayoutCount ;VkDescriptorSetLayout* pSetLayouts ;uint32_t pushConstantRangeCount ;VkPushConstantRange* pPushConstantRanges ;} VkPipelineLayoutCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkSamplerCreateFlags flags ;VkFilter magFilter ;VkFilter minFilter ;VkSamplerMipmapMode mipmapMode ;VkSamplerAddressMode addressModeU ;VkSamplerAddressMode addressModeV ;VkSamplerAddressMode addressModeW ;float mipLodBias ;uint32_t anisotropyEnable ;float maxAnisotropy ;uint32_t compareEnable ;VkCompareOp compareOp ;float minLod ;float maxLod ;VkBorderColor borderColor ;uint32_t unnormalizedCoordinates ;} VkSamplerCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkCommandPoolCreateFlags flags ;uint32_t queueFamilyIndex ;} VkCommandPoolCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkCommandPool commandPool ;VkCommandBufferLevel level ;uint32_t commandBufferCount ;} VkCommandBufferAllocateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderPass renderPass ;uint32_t subpass ;VkFramebuffer framebuffer ;uint32_t occlusionQueryEnable ;VkQueryControlFlags queryFlags ;VkQueryPipelineStatisticFlags pipelineStatistics ;} VkCommandBufferInheritanceInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkCommandBufferUsageFlags flags ;VkCommandBufferInheritanceInfo* pInheritanceInfo ;} VkCommandBufferBeginInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderPass renderPass ;VkFramebuffer framebuffer ;VkRect2D renderArea ;uint32_t clearValueCount ;void* pClearValues ;} VkRenderPassBeginInfo;
typedef struct {float depth ;uint32_t stencil ;} VkClearDepthStencilValue;
typedef struct {VkImageAspectFlags aspectMask ;uint32_t colorAttachment ;void* clearValue ;} VkClearAttachment;
typedef struct {VkAttachmentDescriptionFlags flags ;VkFormat format ;VkSampleCountFlagBits samples ;VkAttachmentLoadOp loadOp ;VkAttachmentStoreOp storeOp ;VkAttachmentLoadOp stencilLoadOp ;VkAttachmentStoreOp stencilStoreOp ;VkImageLayout initialLayout ;VkImageLayout finalLayout ;} VkAttachmentDescription;
typedef struct {uint32_t attachment ;VkImageLayout layout ;} VkAttachmentReference;
typedef struct {VkSubpassDescriptionFlags flags ;VkPipelineBindPoint pipelineBindPoint ;uint32_t inputAttachmentCount ;VkAttachmentReference* pInputAttachments ;uint32_t colorAttachmentCount ;VkAttachmentReference* pColorAttachments ;VkAttachmentReference* pResolveAttachments ;VkAttachmentReference* pDepthStencilAttachment ;uint32_t preserveAttachmentCount ;uint32_t* pPreserveAttachments ;} VkSubpassDescription;
typedef struct {uint32_t srcSubpass ;uint32_t dstSubpass ;VkPipelineStageFlags srcStageMask ;VkPipelineStageFlags dstStageMask ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;VkDependencyFlags dependencyFlags ;} VkSubpassDependency;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassCreateFlags flags ;uint32_t attachmentCount ;VkAttachmentDescription* pAttachments ;uint32_t subpassCount ;VkSubpassDescription* pSubpasses ;uint32_t dependencyCount ;VkSubpassDependency* pDependencies ;} VkRenderPassCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkEventCreateFlags flags ;} VkEventCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkFenceCreateFlags flags ;} VkFenceCreateInfo;
typedef struct {uint32_t robustBufferAccess ;uint32_t fullDrawIndexUint32 ;uint32_t imageCubeArray ;uint32_t independentBlend ;uint32_t geometryShader ;uint32_t tessellationShader ;uint32_t sampleRateShading ;uint32_t dualSrcBlend ;uint32_t logicOp ;uint32_t multiDrawIndirect ;uint32_t drawIndirectFirstInstance ;uint32_t depthClamp ;uint32_t depthBiasClamp ;uint32_t fillModeNonSolid ;uint32_t depthBounds ;uint32_t wideLines ;uint32_t largePoints ;uint32_t alphaToOne ;uint32_t multiViewport ;uint32_t samplerAnisotropy ;uint32_t textureCompressionETC2 ;uint32_t textureCompressionASTC_LDR ;uint32_t textureCompressionBC ;uint32_t occlusionQueryPrecise ;uint32_t pipelineStatisticsQuery ;uint32_t vertexPipelineStoresAndAtomics ;uint32_t fragmentStoresAndAtomics ;uint32_t shaderTessellationAndGeometryPointSize ;uint32_t shaderImageGatherExtended ;uint32_t shaderStorageImageExtendedFormats ;uint32_t shaderStorageImageMultisample ;uint32_t shaderStorageImageReadWithoutFormat ;uint32_t shaderStorageImageWriteWithoutFormat ;uint32_t shaderUniformBufferArrayDynamicIndexing ;uint32_t shaderSampledImageArrayDynamicIndexing ;uint32_t shaderStorageBufferArrayDynamicIndexing ;uint32_t shaderStorageImageArrayDynamicIndexing ;uint32_t shaderClipDistance ;uint32_t shaderCullDistance ;uint32_t shaderFloat64 ;uint32_t shaderInt64 ;uint32_t shaderInt16 ;uint32_t shaderResourceResidency ;uint32_t shaderResourceMinLod ;uint32_t sparseBinding ;uint32_t sparseResidencyBuffer ;uint32_t sparseResidencyImage2D ;uint32_t sparseResidencyImage3D ;uint32_t sparseResidency2Samples ;uint32_t sparseResidency4Samples ;uint32_t sparseResidency8Samples ;uint32_t sparseResidency16Samples ;uint32_t sparseResidencyAliased ;uint32_t variableMultisampleRate ;uint32_t inheritedQueries ;} VkPhysicalDeviceFeatures;
typedef struct {uint32_t residencyStandard2DBlockShape ;uint32_t residencyStandard2DMultisampleBlockShape ;uint32_t residencyStandard3DBlockShape ;uint32_t residencyAlignedMipSize ;uint32_t residencyNonResidentStrict ;} VkPhysicalDeviceSparseProperties;
typedef struct {uint32_t maxImageDimension1D ;uint32_t maxImageDimension2D ;uint32_t maxImageDimension3D ;uint32_t maxImageDimensionCube ;uint32_t maxImageArrayLayers ;uint32_t maxTexelBufferElements ;uint32_t maxUniformBufferRange ;uint32_t maxStorageBufferRange ;uint32_t maxPushConstantsSize ;uint32_t maxMemoryAllocationCount ;uint32_t maxSamplerAllocationCount ;uint64_t bufferImageGranularity ;uint64_t sparseAddressSpaceSize ;uint32_t maxBoundDescriptorSets ;uint32_t maxPerStageDescriptorSamplers ;uint32_t maxPerStageDescriptorUniformBuffers ;uint32_t maxPerStageDescriptorStorageBuffers ;uint32_t maxPerStageDescriptorSampledImages ;uint32_t maxPerStageDescriptorStorageImages ;uint32_t maxPerStageDescriptorInputAttachments ;uint32_t maxPerStageResources ;uint32_t maxDescriptorSetSamplers ;uint32_t maxDescriptorSetUniformBuffers ;uint32_t maxDescriptorSetUniformBuffersDynamic ;uint32_t maxDescriptorSetStorageBuffers ;uint32_t maxDescriptorSetStorageBuffersDynamic ;uint32_t maxDescriptorSetSampledImages ;uint32_t maxDescriptorSetStorageImages ;uint32_t maxDescriptorSetInputAttachments ;uint32_t maxVertexInputAttributes ;uint32_t maxVertexInputBindings ;uint32_t maxVertexInputAttributeOffset ;uint32_t maxVertexInputBindingStride ;uint32_t maxVertexOutputComponents ;uint32_t maxTessellationGenerationLevel ;uint32_t maxTessellationPatchSize ;uint32_t maxTessellationControlPerVertexInputComponents ;uint32_t maxTessellationControlPerVertexOutputComponents ;uint32_t maxTessellationControlPerPatchOutputComponents ;uint32_t maxTessellationControlTotalOutputComponents ;uint32_t maxTessellationEvaluationInputComponents ;uint32_t maxTessellationEvaluationOutputComponents ;uint32_t maxGeometryShaderInvocations ;uint32_t maxGeometryInputComponents ;uint32_t maxGeometryOutputComponents ;uint32_t maxGeometryOutputVertices ;uint32_t maxGeometryTotalOutputComponents ;uint32_t maxFragmentInputComponents ;uint32_t maxFragmentOutputAttachments ;uint32_t maxFragmentDualSrcAttachments ;uint32_t maxFragmentCombinedOutputResources ;uint32_t maxComputeSharedMemorySize ;void* maxComputeWorkGroupCount ;uint32_t maxComputeWorkGroupInvocations ;void* maxComputeWorkGroupSize ;uint32_t subPixelPrecisionBits ;uint32_t subTexelPrecisionBits ;uint32_t mipmapPrecisionBits ;uint32_t maxDrawIndexedIndexValue ;uint32_t maxDrawIndirectCount ;float maxSamplerLodBias ;float maxSamplerAnisotropy ;uint32_t maxViewports ;void* maxViewportDimensions ;void* viewportBoundsRange ;uint32_t viewportSubPixelBits ;size_t minMemoryMapAlignment ;uint64_t minTexelBufferOffsetAlignment ;uint64_t minUniformBufferOffsetAlignment ;uint64_t minStorageBufferOffsetAlignment ;int32_t minTexelOffset ;uint32_t maxTexelOffset ;int32_t minTexelGatherOffset ;uint32_t maxTexelGatherOffset ;float minInterpolationOffset ;float maxInterpolationOffset ;uint32_t subPixelInterpolationOffsetBits ;uint32_t maxFramebufferWidth ;uint32_t maxFramebufferHeight ;uint32_t maxFramebufferLayers ;VkSampleCountFlags framebufferColorSampleCounts ;VkSampleCountFlags framebufferDepthSampleCounts ;VkSampleCountFlags framebufferStencilSampleCounts ;VkSampleCountFlags framebufferNoAttachmentsSampleCounts ;uint32_t maxColorAttachments ;VkSampleCountFlags sampledImageColorSampleCounts ;VkSampleCountFlags sampledImageIntegerSampleCounts ;VkSampleCountFlags sampledImageDepthSampleCounts ;VkSampleCountFlags sampledImageStencilSampleCounts ;VkSampleCountFlags storageImageSampleCounts ;uint32_t maxSampleMaskWords ;uint32_t timestampComputeAndGraphics ;float timestampPeriod ;uint32_t maxClipDistances ;uint32_t maxCullDistances ;uint32_t maxCombinedClipAndCullDistances ;uint32_t discreteQueuePriorities ;void* pointSizeRange ;void* lineWidthRange ;float pointSizeGranularity ;float lineWidthGranularity ;uint32_t strictLines ;uint32_t standardSampleLocations ;uint64_t optimalBufferCopyOffsetAlignment ;uint64_t optimalBufferCopyRowPitchAlignment ;uint64_t nonCoherentAtomSize ;} VkPhysicalDeviceLimits;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreCreateFlags flags ;} VkSemaphoreCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkQueryPoolCreateFlags flags ;VkQueryType queryType ;uint32_t queryCount ;VkQueryPipelineStatisticFlags pipelineStatistics ;} VkQueryPoolCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;VkFramebufferCreateFlags flags ;VkRenderPass renderPass ;uint32_t attachmentCount ;VkImageView* pAttachments ;uint32_t width ;uint32_t height ;uint32_t layers ;} VkFramebufferCreateInfo;
typedef struct {uint32_t vertexCount ;uint32_t instanceCount ;uint32_t firstVertex ;uint32_t firstInstance ;} VkDrawIndirectCommand;
typedef struct {uint32_t indexCount ;uint32_t instanceCount ;uint32_t firstIndex ;int32_t vertexOffset ;uint32_t firstInstance ;} VkDrawIndexedIndirectCommand;
typedef struct {uint32_t x ;uint32_t y ;uint32_t z ;} VkDispatchIndirectCommand;
typedef struct {uint32_t firstVertex ;uint32_t vertexCount ;} VkMultiDrawInfoEXT;
typedef struct {uint32_t firstIndex ;uint32_t indexCount ;int32_t vertexOffset ;} VkMultiDrawIndexedInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;VkSemaphore* pWaitSemaphores ;void* pWaitDstStageMask ;uint32_t commandBufferCount ;VkCommandBuffer* pCommandBuffers ;uint32_t signalSemaphoreCount ;VkSemaphore* pSignalSemaphores ;} VkSubmitInfo;
typedef struct {VkDisplayKHR display ;const char* displayName ;VkExtent2D physicalDimensions ;VkExtent2D physicalResolution ;VkSurfaceTransformFlagsKHR supportedTransforms ;uint32_t planeReorderPossible ;uint32_t persistentContent ;} VkDisplayPropertiesKHR;
typedef struct {VkDisplayKHR currentDisplay ;uint32_t currentStackIndex ;} VkDisplayPlanePropertiesKHR;
typedef struct {VkExtent2D visibleRegion ;uint32_t refreshRate ;} VkDisplayModeParametersKHR;
typedef struct {VkDisplayModeKHR displayMode ;VkDisplayModeParametersKHR parameters ;} VkDisplayModePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayModeCreateFlagsKHR flags ;VkDisplayModeParametersKHR parameters ;} VkDisplayModeCreateInfoKHR;
typedef struct {VkDisplayPlaneAlphaFlagsKHR supportedAlpha ;VkOffset2D minSrcPosition ;VkOffset2D maxSrcPosition ;VkExtent2D minSrcExtent ;VkExtent2D maxSrcExtent ;VkOffset2D minDstPosition ;VkOffset2D maxDstPosition ;VkExtent2D minDstExtent ;VkExtent2D maxDstExtent ;} VkDisplayPlaneCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplaySurfaceCreateFlagsKHR flags ;VkDisplayModeKHR displayMode ;uint32_t planeIndex ;uint32_t planeStackIndex ;VkSurfaceTransformFlagBitsKHR transform ;float globalAlpha ;VkDisplayPlaneAlphaFlagBitsKHR alphaMode ;VkExtent2D imageExtent ;} VkDisplaySurfaceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkRect2D srcRect ;VkRect2D dstRect ;uint32_t persistent ;} VkDisplayPresentInfoKHR;
typedef struct {uint32_t minImageCount ;uint32_t maxImageCount ;VkExtent2D currentExtent ;VkExtent2D minImageExtent ;VkExtent2D maxImageExtent ;uint32_t maxImageArrayLayers ;VkSurfaceTransformFlagsKHR supportedTransforms ;VkSurfaceTransformFlagBitsKHR currentTransform ;VkCompositeAlphaFlagsKHR supportedCompositeAlpha ;VkImageUsageFlags supportedUsageFlags ;} VkSurfaceCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkAndroidSurfaceCreateFlagsKHR flags ;void* window ;} VkAndroidSurfaceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkViSurfaceCreateFlagsNN flags ;void* window ;} VkViSurfaceCreateInfoNN;
typedef struct {VkStructureType sType ;void* pNext ;VkWaylandSurfaceCreateFlagsKHR flags ;void* display ;void* surface ;} VkWaylandSurfaceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkWin32SurfaceCreateFlagsKHR flags ;void* hinstance ;void* hwnd ;} VkWin32SurfaceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkXlibSurfaceCreateFlagsKHR flags ;void* dpy ;uint32_t window ;} VkXlibSurfaceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkXcbSurfaceCreateFlagsKHR flags ;void* connection ;uint32_t window ;} VkXcbSurfaceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDirectFBSurfaceCreateFlagsEXT flags ;void* dfb ;void* surface ;} VkDirectFBSurfaceCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImagePipeSurfaceCreateFlagsFUCHSIA flags ;uint32_t imagePipeHandle ;} VkImagePipeSurfaceCreateInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkStreamDescriptorSurfaceCreateFlagsGGP flags ;void* streamDescriptor ;} VkStreamDescriptorSurfaceCreateInfoGGP;
typedef struct {VkStructureType sType ;void* pNext ;VkScreenSurfaceCreateFlagsQNX flags ;void* context ;void* window ;} VkScreenSurfaceCreateInfoQNX;
typedef struct {VkFormat format ;VkColorSpaceKHR colorSpace ;} VkSurfaceFormatKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainCreateFlagsKHR flags ;VkSurfaceKHR surface ;uint32_t minImageCount ;VkFormat imageFormat ;VkColorSpaceKHR imageColorSpace ;VkExtent2D imageExtent ;uint32_t imageArrayLayers ;VkImageUsageFlags imageUsage ;VkSharingMode imageSharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;VkSurfaceTransformFlagBitsKHR preTransform ;VkCompositeAlphaFlagBitsKHR compositeAlpha ;VkPresentModeKHR presentMode ;uint32_t clipped ;VkSwapchainKHR oldSwapchain ;} VkSwapchainCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;VkSemaphore* pWaitSemaphores ;uint32_t swapchainCount ;VkSwapchainKHR* pSwapchains ;uint32_t* pImageIndices ;void* pResults ;} VkPresentInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDebugReportFlagsEXT flags ;void* pfnCallback ;void* pUserData ;} VkDebugReportCallbackCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t disabledValidationCheckCount ;void* pDisabledValidationChecks ;} VkValidationFlagsEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t enabledValidationFeatureCount ;void* pEnabledValidationFeatures ;uint32_t disabledValidationFeatureCount ;void* pDisabledValidationFeatures ;} VkValidationFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t settingCount ;void* pSettings ;} VkLayerSettingsCreateInfoEXT;
typedef struct {const char* pLayerName ;const char* pSettingName ;VkLayerSettingTypeEXT type ;uint32_t valueCount ;void* pValues ;} VkLayerSettingEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t vendorID ;uint32_t deviceID ;uint32_t key ;uint64_t value ;} VkApplicationParametersEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkRasterizationOrderAMD rasterizationOrder ;} VkPipelineRasterizationStateRasterizationOrderAMD;
typedef struct {VkStructureType sType ;void* pNext ;VkDebugReportObjectTypeEXT objectType ;uint64_t object ;const char* pObjectName ;} VkDebugMarkerObjectNameInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDebugReportObjectTypeEXT objectType ;uint64_t object ;uint64_t tagName ;size_t tagSize ;void* pTag ;} VkDebugMarkerObjectTagInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;const char* pMarkerName ;float color [4];} VkDebugMarkerMarkerInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t dedicatedAllocation ;} VkDedicatedAllocationImageCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t dedicatedAllocation ;} VkDedicatedAllocationBufferCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkBuffer buffer ;} VkDedicatedAllocationMemoryAllocateInfoNV;
typedef struct {VkImageFormatProperties imageFormatProperties ;VkExternalMemoryFeatureFlagsNV externalMemoryFeatures ;VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes ;VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes ;} VkExternalImageFormatPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagsNV handleTypes ;} VkExternalMemoryImageCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagsNV handleTypes ;} VkExportMemoryAllocateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagsNV handleType ;void* handle ;} VkImportMemoryWin32HandleInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;} VkExportMemoryWin32HandleInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;} VkExportMemorySciBufInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;void* handle ;} VkImportMemorySciBufInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetSciBufInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemorySciBufPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t sciBufImport ;uint32_t sciBufExport ;} VkPhysicalDeviceExternalMemorySciBufFeaturesNV;
typedef struct {} VkPhysicalDeviceExternalSciBufFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t acquireCount ;VkDeviceMemory* pAcquireSyncs ;uint64_t* pAcquireKeys ;uint32_t* pAcquireTimeoutMilliseconds ;uint32_t releaseCount ;VkDeviceMemory* pReleaseSyncs ;uint64_t* pReleaseKeys ;} VkWin32KeyedMutexAcquireReleaseInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceGeneratedCommands ;} VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceGeneratedCompute ;uint32_t deviceGeneratedComputePipelines ;uint32_t deviceGeneratedComputeCaptureReplay ;} VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t privateDataSlotRequestCount ;} VkDevicePrivateDataCreateInfo;
typedef struct {} VkDevicePrivateDataCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPrivateDataSlotCreateFlags flags ;} VkPrivateDataSlotCreateInfo;
typedef struct {} VkPrivateDataSlotCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t privateData ;} VkPhysicalDevicePrivateDataFeatures;
typedef struct {} VkPhysicalDevicePrivateDataFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxGraphicsShaderGroupCount ;uint32_t maxIndirectSequenceCount ;uint32_t maxIndirectCommandsTokenCount ;uint32_t maxIndirectCommandsStreamCount ;uint32_t maxIndirectCommandsTokenOffset ;uint32_t maxIndirectCommandsStreamStride ;uint32_t minSequencesCountBufferOffsetAlignment ;uint32_t minSequencesIndexBufferOffsetAlignment ;uint32_t minIndirectCommandsBufferOffsetAlignment ;} VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxMultiDrawCount ;} VkPhysicalDeviceMultiDrawPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;VkPipelineVertexInputStateCreateInfo* pVertexInputState ;VkPipelineTessellationStateCreateInfo* pTessellationState ;} VkGraphicsShaderGroupCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t groupCount ;VkGraphicsShaderGroupCreateInfoNV* pGroups ;uint32_t pipelineCount ;VkPipeline* pPipelines ;} VkGraphicsPipelineShaderGroupsCreateInfoNV;
typedef struct {uint32_t groupIndex ;} VkBindShaderGroupIndirectCommandNV;
typedef struct {uint64_t bufferAddress ;uint32_t size ;VkIndexType indexType ;} VkBindIndexBufferIndirectCommandNV;
typedef struct {uint64_t bufferAddress ;uint32_t size ;uint32_t stride ;} VkBindVertexBufferIndirectCommandNV;
typedef struct {uint32_t data ;} VkSetStateFlagsIndirectCommandNV;
typedef struct {VkBuffer buffer ;uint64_t offset ;} VkIndirectCommandsStreamNV;
typedef struct {VkStructureType sType ;void* pNext ;VkIndirectCommandsTokenTypeNV tokenType ;uint32_t stream ;uint32_t offset ;uint32_t vertexBindingUnit ;uint32_t vertexDynamicStride ;VkPipelineLayout pushconstantPipelineLayout ;VkShaderStageFlags pushconstantShaderStageFlags ;uint32_t pushconstantOffset ;uint32_t pushconstantSize ;VkIndirectStateFlagsNV indirectStateFlags ;uint32_t indexTypeCount ;void* pIndexTypes ;uint32_t* pIndexTypeValues ;} VkIndirectCommandsLayoutTokenNV;
typedef struct {VkStructureType sType ;void* pNext ;VkIndirectCommandsLayoutUsageFlagsNV flags ;VkPipelineBindPoint pipelineBindPoint ;uint32_t tokenCount ;VkIndirectCommandsLayoutTokenNV* pTokens ;uint32_t streamCount ;uint32_t* pStreamStrides ;} VkIndirectCommandsLayoutCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineBindPoint pipelineBindPoint ;VkPipeline pipeline ;VkIndirectCommandsLayoutNV indirectCommandsLayout ;uint32_t streamCount ;VkIndirectCommandsStreamNV* pStreams ;uint32_t sequencesCount ;VkBuffer preprocessBuffer ;uint64_t preprocessOffset ;uint64_t preprocessSize ;VkBuffer sequencesCountBuffer ;uint64_t sequencesCountOffset ;VkBuffer sequencesIndexBuffer ;uint64_t sequencesIndexOffset ;} VkGeneratedCommandsInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineBindPoint pipelineBindPoint ;VkPipeline pipeline ;VkIndirectCommandsLayoutNV indirectCommandsLayout ;uint32_t maxSequencesCount ;} VkGeneratedCommandsMemoryRequirementsInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineBindPoint pipelineBindPoint ;VkPipeline pipeline ;} VkPipelineIndirectDeviceAddressInfoNV;
typedef struct {uint64_t pipelineAddress ;} VkBindPipelineIndirectCommandNV;
typedef struct {VkStructureType sType ;void* pNext ;void* features ;} VkPhysicalDeviceFeatures2;
typedef struct {} VkPhysicalDeviceFeatures2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPhysicalDeviceProperties properties ;} VkPhysicalDeviceProperties2;
typedef struct {} VkPhysicalDeviceProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFormatProperties formatProperties ;} VkFormatProperties2;
typedef struct {} VkFormatProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageFormatProperties imageFormatProperties ;} VkImageFormatProperties2;
typedef struct {} VkImageFormatProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkImageType type ;VkImageTiling tiling ;VkImageUsageFlags usage ;VkImageCreateFlags flags ;} VkPhysicalDeviceImageFormatInfo2;
typedef struct {} VkPhysicalDeviceImageFormatInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkQueueFamilyProperties queueFamilyProperties ;} VkQueueFamilyProperties2;
typedef struct {} VkQueueFamilyProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPhysicalDeviceMemoryProperties memoryProperties ;} VkPhysicalDeviceMemoryProperties2;
typedef struct {} VkPhysicalDeviceMemoryProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSparseImageFormatProperties properties ;} VkSparseImageFormatProperties2;
typedef struct {} VkSparseImageFormatProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkImageType type ;VkSampleCountFlagBits samples ;VkImageUsageFlags usage ;VkImageTiling tiling ;} VkPhysicalDeviceSparseImageFormatInfo2;
typedef struct {} VkPhysicalDeviceSparseImageFormatInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPushDescriptors ;} VkPhysicalDevicePushDescriptorPropertiesKHR;
typedef struct {uint8_t major ;uint8_t minor ;uint8_t subminor ;uint8_t patch ;} VkConformanceVersion;
typedef struct {} VkConformanceVersionKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDriverId driverID ;char driverName [256];char driverInfo [256];VkConformanceVersion conformanceVersion ;} VkPhysicalDeviceDriverProperties;
typedef struct {} VkPhysicalDeviceDriverPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;void* pRegions ;} VkPresentRegionsKHR;
typedef struct {uint32_t rectangleCount ;void* pRectangles ;} VkPresentRegionKHR;
typedef struct {VkOffset2D offset ;VkExtent2D extent ;uint32_t layer ;} VkRectLayerKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t variablePointersStorageBuffer ;uint32_t variablePointers ;} VkPhysicalDeviceVariablePointersFeatures;
typedef struct {} VkPhysicalDeviceVariablePointersFeaturesKHR;
typedef struct {} VkPhysicalDeviceVariablePointerFeaturesKHR;
typedef struct {} VkPhysicalDeviceVariablePointerFeatures;
typedef struct {VkExternalMemoryFeatureFlags externalMemoryFeatures ;VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes ;VkExternalMemoryHandleTypeFlags compatibleHandleTypes ;} VkExternalMemoryProperties;
typedef struct {} VkExternalMemoryPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalImageFormatInfo;
typedef struct {} VkPhysicalDeviceExternalImageFormatInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryProperties externalMemoryProperties ;} VkExternalImageFormatProperties;
typedef struct {} VkExternalImageFormatPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateFlags flags ;VkBufferUsageFlags usage ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalBufferInfo;
typedef struct {} VkPhysicalDeviceExternalBufferInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryProperties externalMemoryProperties ;} VkExternalBufferProperties;
typedef struct {} VkExternalBufferPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint8_t deviceUUID [16];uint8_t driverUUID [16];void* deviceLUID ;uint32_t deviceNodeMask ;uint32_t deviceLUIDValid ;} VkPhysicalDeviceIDProperties;
typedef struct {} VkPhysicalDeviceIDPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlags handleTypes ;} VkExternalMemoryImageCreateInfo;
typedef struct {} VkExternalMemoryImageCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlags handleTypes ;} VkExternalMemoryBufferCreateInfo;
typedef struct {} VkExternalMemoryBufferCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlags handleTypes ;} VkExportMemoryAllocateInfo;
typedef struct {} VkExportMemoryAllocateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;void* handle ;void* name ;} VkImportMemoryWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;void* name ;} VkExportMemoryWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;uint32_t handle ;} VkImportMemoryZirconHandleInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryZirconHandlePropertiesFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetZirconHandleInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryWin32HandlePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;int16_t fd ;} VkImportMemoryFdInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryFdPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetFdInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t acquireCount ;VkDeviceMemory* pAcquireSyncs ;uint64_t* pAcquireKeys ;uint32_t* pAcquireTimeouts ;uint32_t releaseCount ;VkDeviceMemory* pReleaseSyncs ;uint64_t* pReleaseKeys ;} VkWin32KeyedMutexAcquireReleaseInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalSemaphoreInfo;
typedef struct {} VkPhysicalDeviceExternalSemaphoreInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes ;VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes ;VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures ;} VkExternalSemaphoreProperties;
typedef struct {} VkExternalSemaphorePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalSemaphoreHandleTypeFlags handleTypes ;} VkExportSemaphoreCreateInfo;
typedef struct {} VkExportSemaphoreCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkSemaphoreImportFlags flags ;VkExternalSemaphoreHandleTypeFlagBits handleType ;void* handle ;void* name ;} VkImportSemaphoreWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;void* name ;} VkExportSemaphoreWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreValuesCount ;uint64_t* pWaitSemaphoreValues ;uint32_t signalSemaphoreValuesCount ;uint64_t* pSignalSemaphoreValues ;} VkD3D12FenceSubmitInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkSemaphoreImportFlags flags ;VkExternalSemaphoreHandleTypeFlagBits handleType ;int16_t fd ;} VkImportSemaphoreFdInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetFdInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkSemaphoreImportFlags flags ;VkExternalSemaphoreHandleTypeFlagBits handleType ;uint32_t zirconHandle ;} VkImportSemaphoreZirconHandleInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetZirconHandleInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalFenceHandleTypeFlagBits handleType ;} VkPhysicalDeviceExternalFenceInfo;
typedef struct {} VkPhysicalDeviceExternalFenceInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes ;VkExternalFenceHandleTypeFlags compatibleHandleTypes ;VkExternalFenceFeatureFlags externalFenceFeatures ;} VkExternalFenceProperties;
typedef struct {} VkExternalFencePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalFenceHandleTypeFlags handleTypes ;} VkExportFenceCreateInfo;
typedef struct {} VkExportFenceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkFenceImportFlags flags ;VkExternalFenceHandleTypeFlagBits handleType ;void* handle ;void* name ;} VkImportFenceWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;uint32_t dwAccess ;void* name ;} VkExportFenceWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;} VkFenceGetWin32HandleInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkFenceImportFlags flags ;VkExternalFenceHandleTypeFlagBits handleType ;int16_t fd ;} VkImportFenceFdInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;} VkFenceGetFdInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;} VkExportFenceSciSyncInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;void* handle ;} VkImportFenceSciSyncInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkFence fence ;VkExternalFenceHandleTypeFlagBits handleType ;} VkFenceGetSciSyncInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;void* pAttributes ;} VkExportSemaphoreSciSyncInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;void* handle ;} VkImportSemaphoreSciSyncInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkExternalSemaphoreHandleTypeFlagBits handleType ;} VkSemaphoreGetSciSyncInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkSciSyncClientTypeNV clientType ;VkSciSyncPrimitiveTypeNV primitiveType ;} VkSciSyncAttributesInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t sciSyncFence ;uint32_t sciSyncSemaphore ;uint32_t sciSyncImport ;uint32_t sciSyncExport ;} VkPhysicalDeviceExternalSciSyncFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t sciSyncFence ;uint32_t sciSyncSemaphore2 ;uint32_t sciSyncImport ;uint32_t sciSyncExport ;} VkPhysicalDeviceExternalSciSync2FeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;void* handle ;} VkSemaphoreSciSyncPoolCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreSciSyncPoolNV semaphorePool ;void* pFence ;} VkSemaphoreSciSyncCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t semaphoreSciSyncPoolRequestCount ;} VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiview ;uint32_t multiviewGeometryShader ;uint32_t multiviewTessellationShader ;} VkPhysicalDeviceMultiviewFeatures;
typedef struct {} VkPhysicalDeviceMultiviewFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxMultiviewViewCount ;uint32_t maxMultiviewInstanceIndex ;} VkPhysicalDeviceMultiviewProperties;
typedef struct {} VkPhysicalDeviceMultiviewPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t subpassCount ;uint32_t* pViewMasks ;uint32_t dependencyCount ;void* pViewOffsets ;uint32_t correlationMaskCount ;uint32_t* pCorrelationMasks ;} VkRenderPassMultiviewCreateInfo;
typedef struct {} VkRenderPassMultiviewCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t minImageCount ;uint32_t maxImageCount ;VkExtent2D currentExtent ;VkExtent2D minImageExtent ;VkExtent2D maxImageExtent ;uint32_t maxImageArrayLayers ;VkSurfaceTransformFlagsKHR supportedTransforms ;VkSurfaceTransformFlagBitsKHR currentTransform ;VkCompositeAlphaFlagsKHR supportedCompositeAlpha ;VkImageUsageFlags supportedUsageFlags ;VkSurfaceCounterFlagsEXT supportedSurfaceCounters ;} VkSurfaceCapabilities2EXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPowerStateEXT powerState ;} VkDisplayPowerInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceEventTypeEXT deviceEvent ;} VkDeviceEventInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayEventTypeEXT displayEvent ;} VkDisplayEventInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceCounterFlagsEXT surfaceCounters ;} VkSwapchainCounterCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t physicalDeviceCount ;void* physicalDevices ;uint32_t subsetAllocation ;} VkPhysicalDeviceGroupProperties;
typedef struct {} VkPhysicalDeviceGroupPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkMemoryAllocateFlags flags ;uint32_t deviceMask ;} VkMemoryAllocateFlagsInfo;
typedef struct {} VkMemoryAllocateFlagsInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;VkDeviceMemory memory ;uint64_t memoryOffset ;} VkBindBufferMemoryInfo;
typedef struct {} VkBindBufferMemoryInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceIndexCount ;uint32_t* pDeviceIndices ;} VkBindBufferMemoryDeviceGroupInfo;
typedef struct {} VkBindBufferMemoryDeviceGroupInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkDeviceMemory memory ;uint64_t memoryOffset ;} VkBindImageMemoryInfo;
typedef struct {} VkBindImageMemoryInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceIndexCount ;uint32_t* pDeviceIndices ;uint32_t splitInstanceBindRegionCount ;VkRect2D* pSplitInstanceBindRegions ;} VkBindImageMemoryDeviceGroupInfo;
typedef struct {} VkBindImageMemoryDeviceGroupInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceMask ;uint32_t deviceRenderAreaCount ;VkRect2D* pDeviceRenderAreas ;} VkDeviceGroupRenderPassBeginInfo;
typedef struct {} VkDeviceGroupRenderPassBeginInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceMask ;} VkDeviceGroupCommandBufferBeginInfo;
typedef struct {} VkDeviceGroupCommandBufferBeginInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreCount ;uint32_t* pWaitSemaphoreDeviceIndices ;uint32_t commandBufferCount ;uint32_t* pCommandBufferDeviceMasks ;uint32_t signalSemaphoreCount ;uint32_t* pSignalSemaphoreDeviceIndices ;} VkDeviceGroupSubmitInfo;
typedef struct {} VkDeviceGroupSubmitInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t resourceDeviceIndex ;uint32_t memoryDeviceIndex ;} VkDeviceGroupBindSparseInfo;
typedef struct {} VkDeviceGroupBindSparseInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* presentMask ;VkDeviceGroupPresentModeFlagsKHR modes ;} VkDeviceGroupPresentCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;} VkImageSwapchainCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;uint32_t imageIndex ;} VkBindImageMemorySwapchainInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;uint64_t timeout ;VkSemaphore semaphore ;VkFence fence ;uint32_t deviceMask ;} VkAcquireNextImageInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;uint32_t* pDeviceMasks ;VkDeviceGroupPresentModeFlagBitsKHR mode ;} VkDeviceGroupPresentInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t physicalDeviceCount ;VkPhysicalDevice* pPhysicalDevices ;} VkDeviceGroupDeviceCreateInfo;
typedef struct {} VkDeviceGroupDeviceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceGroupPresentModeFlagsKHR modes ;} VkDeviceGroupSwapchainCreateInfoKHR;
typedef struct {uint32_t dstBinding ;uint32_t dstArrayElement ;uint32_t descriptorCount ;VkDescriptorType descriptorType ;size_t offset ;size_t stride ;} VkDescriptorUpdateTemplateEntry;
typedef struct {} VkDescriptorUpdateTemplateEntryKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorUpdateTemplateCreateFlags flags ;uint32_t descriptorUpdateEntryCount ;VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries ;VkDescriptorUpdateTemplateType templateType ;VkDescriptorSetLayout descriptorSetLayout ;VkPipelineBindPoint pipelineBindPoint ;VkPipelineLayout pipelineLayout ;uint32_t set ;} VkDescriptorUpdateTemplateCreateInfo;
typedef struct {} VkDescriptorUpdateTemplateCreateInfoKHR;
typedef struct {float x ;float y ;} VkXYColorEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentId ;} VkPhysicalDevicePresentIdFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;uint64_t* pPresentIds ;} VkPresentIdKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentWait ;} VkPhysicalDevicePresentWaitFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkXYColorEXT displayPrimaryRed ;VkXYColorEXT displayPrimaryGreen ;VkXYColorEXT displayPrimaryBlue ;VkXYColorEXT whitePoint ;float maxLuminance ;float minLuminance ;float maxContentLightLevel ;float maxFrameAverageLightLevel ;} VkHdrMetadataEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t localDimmingSupport ;} VkDisplayNativeHdrSurfaceCapabilitiesAMD;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t localDimmingEnable ;} VkSwapchainDisplayNativeHdrCreateInfoAMD;
typedef struct {uint64_t refreshDuration ;} VkRefreshCycleDurationGOOGLE;
typedef struct {uint32_t presentID ;uint64_t desiredPresentTime ;uint64_t actualPresentTime ;uint64_t earliestPresentTime ;uint64_t presentMargin ;} VkPastPresentationTimingGOOGLE;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;void* pTimes ;} VkPresentTimesInfoGOOGLE;
typedef struct {uint32_t presentID ;uint64_t desiredPresentTime ;} VkPresentTimeGOOGLE;
typedef struct {VkStructureType sType ;void* pNext ;VkIOSSurfaceCreateFlagsMVK flags ;void* pView ;} VkIOSSurfaceCreateInfoMVK;
typedef struct {VkStructureType sType ;void* pNext ;VkMacOSSurfaceCreateFlagsMVK flags ;void* pView ;} VkMacOSSurfaceCreateInfoMVK;
typedef struct {VkStructureType sType ;void* pNext ;VkMetalSurfaceCreateFlagsEXT flags ;void* pLayer ;} VkMetalSurfaceCreateInfoEXT;
typedef struct {float xcoeff ;float ycoeff ;} VkViewportWScalingNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewportWScalingEnable ;uint32_t viewportCount ;VkViewportWScalingNV* pViewportWScalings ;} VkPipelineViewportWScalingStateCreateInfoNV;
typedef struct {VkViewportCoordinateSwizzleNV x ;VkViewportCoordinateSwizzleNV y ;VkViewportCoordinateSwizzleNV z ;VkViewportCoordinateSwizzleNV w ;} VkViewportSwizzleNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineViewportSwizzleStateCreateFlagsNV flags ;uint32_t viewportCount ;VkViewportSwizzleNV* pViewportSwizzles ;} VkPipelineViewportSwizzleStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxDiscardRectangles ;} VkPhysicalDeviceDiscardRectanglePropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineDiscardRectangleStateCreateFlagsEXT flags ;VkDiscardRectangleModeEXT discardRectangleMode ;uint32_t discardRectangleCount ;VkRect2D* pDiscardRectangles ;} VkPipelineDiscardRectangleStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t perViewPositionAllComponents ;} VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
typedef struct {uint32_t subpass ;uint32_t inputAttachmentIndex ;VkImageAspectFlags aspectMask ;} VkInputAttachmentAspectReference;
typedef struct {} VkInputAttachmentAspectReferenceKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t aspectReferenceCount ;VkInputAttachmentAspectReference* pAspectReferences ;} VkRenderPassInputAttachmentAspectCreateInfo;
typedef struct {} VkRenderPassInputAttachmentAspectCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceKHR surface ;} VkPhysicalDeviceSurfaceInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceCapabilitiesKHR surfaceCapabilities ;} VkSurfaceCapabilities2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceFormatKHR surfaceFormat ;} VkSurfaceFormat2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPropertiesKHR displayProperties ;} VkDisplayProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPlanePropertiesKHR displayPlaneProperties ;} VkDisplayPlaneProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayModePropertiesKHR displayModeProperties ;} VkDisplayModeProperties2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayModeKHR mode ;uint32_t planeIndex ;} VkDisplayPlaneInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDisplayPlaneCapabilitiesKHR capabilities ;} VkDisplayPlaneCapabilities2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags sharedPresentSupportedUsageFlags ;} VkSharedPresentSurfaceCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t storageBuffer16BitAccess ;uint32_t uniformAndStorageBuffer16BitAccess ;uint32_t storagePushConstant16 ;uint32_t storageInputOutput16 ;} VkPhysicalDevice16BitStorageFeatures;
typedef struct {} VkPhysicalDevice16BitStorageFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t subgroupSize ;VkShaderStageFlags supportedStages ;VkSubgroupFeatureFlags supportedOperations ;uint32_t quadOperationsInAllStages ;} VkPhysicalDeviceSubgroupProperties;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSubgroupExtendedTypes ;} VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
typedef struct {} VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkBufferMemoryRequirementsInfo2;
typedef struct {} VkBufferMemoryRequirementsInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateInfo* pCreateInfo ;} VkDeviceBufferMemoryRequirements;
typedef struct {} VkDeviceBufferMemoryRequirementsKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;} VkImageMemoryRequirementsInfo2;
typedef struct {} VkImageMemoryRequirementsInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;} VkImageSparseMemoryRequirementsInfo2;
typedef struct {} VkImageSparseMemoryRequirementsInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateInfo* pCreateInfo ;VkImageAspectFlagBits planeAspect ;} VkDeviceImageMemoryRequirements;
typedef struct {} VkDeviceImageMemoryRequirementsKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkMemoryRequirements memoryRequirements ;} VkMemoryRequirements2;
typedef struct {} VkMemoryRequirements2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSparseImageMemoryRequirements memoryRequirements ;} VkSparseImageMemoryRequirements2;
typedef struct {} VkSparseImageMemoryRequirements2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPointClippingBehavior pointClippingBehavior ;} VkPhysicalDevicePointClippingProperties;
typedef struct {} VkPhysicalDevicePointClippingPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t prefersDedicatedAllocation ;uint32_t requiresDedicatedAllocation ;} VkMemoryDedicatedRequirements;
typedef struct {} VkMemoryDedicatedRequirementsKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkBuffer buffer ;} VkMemoryDedicatedAllocateInfo;
typedef struct {} VkMemoryDedicatedAllocateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags usage ;} VkImageViewUsageCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t sliceOffset ;uint32_t sliceCount ;} VkImageViewSlicedCreateInfoEXT;
typedef struct {} VkImageViewUsageCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkTessellationDomainOrigin domainOrigin ;} VkPipelineTessellationDomainOriginStateCreateInfo;
typedef struct {} VkPipelineTessellationDomainOriginStateCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSamplerYcbcrConversion conversion ;} VkSamplerYcbcrConversionInfo;
typedef struct {} VkSamplerYcbcrConversionInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkSamplerYcbcrModelConversion ycbcrModel ;VkSamplerYcbcrRange ycbcrRange ;VkComponentMapping components ;VkChromaLocation xChromaOffset ;VkChromaLocation yChromaOffset ;VkFilter chromaFilter ;uint32_t forceExplicitReconstruction ;} VkSamplerYcbcrConversionCreateInfo;
typedef struct {} VkSamplerYcbcrConversionCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageAspectFlagBits planeAspect ;} VkBindImagePlaneMemoryInfo;
typedef struct {} VkBindImagePlaneMemoryInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageAspectFlagBits planeAspect ;} VkImagePlaneMemoryRequirementsInfo;
typedef struct {} VkImagePlaneMemoryRequirementsInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t samplerYcbcrConversion ;} VkPhysicalDeviceSamplerYcbcrConversionFeatures;
typedef struct {} VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t combinedImageSamplerDescriptorCount ;} VkSamplerYcbcrConversionImageFormatProperties;
typedef struct {} VkSamplerYcbcrConversionImageFormatPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t supportsTextureGatherLODBiasAMD ;} VkTextureLODGatherFormatPropertiesAMD;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;uint64_t offset ;VkConditionalRenderingFlagsEXT flags ;} VkConditionalRenderingBeginInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t protectedSubmit ;} VkProtectedSubmitInfo;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t protectedMemory ;} VkPhysicalDeviceProtectedMemoryFeatures;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t protectedNoFault ;} VkPhysicalDeviceProtectedMemoryProperties;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceQueueCreateFlags flags ;uint32_t queueFamilyIndex ;uint32_t queueIndex ;} VkDeviceQueueInfo2;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCoverageToColorStateCreateFlagsNV flags ;uint32_t coverageToColorEnable ;uint32_t coverageToColorLocation ;} VkPipelineCoverageToColorStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t filterMinmaxSingleComponentFormats ;uint32_t filterMinmaxImageComponentMapping ;} VkPhysicalDeviceSamplerFilterMinmaxProperties;
typedef struct {} VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
typedef struct {float x ;float y ;} VkSampleLocationEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlagBits sampleLocationsPerPixel ;VkExtent2D sampleLocationGridSize ;uint32_t sampleLocationsCount ;VkSampleLocationEXT* pSampleLocations ;} VkSampleLocationsInfoEXT;
typedef struct {uint32_t attachmentIndex ;VkSampleLocationsInfoEXT sampleLocationsInfo ;} VkAttachmentSampleLocationsEXT;
typedef struct {uint32_t subpassIndex ;VkSampleLocationsInfoEXT sampleLocationsInfo ;} VkSubpassSampleLocationsEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentInitialSampleLocationsCount ;VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations ;uint32_t postSubpassSampleLocationsCount ;VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations ;} VkRenderPassSampleLocationsBeginInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t sampleLocationsEnable ;VkSampleLocationsInfoEXT sampleLocationsInfo ;} VkPipelineSampleLocationsStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlags sampleLocationSampleCounts ;VkExtent2D maxSampleLocationGridSize ;void* sampleLocationCoordinateRange ;uint32_t sampleLocationSubPixelBits ;uint32_t variableSampleLocations ;} VkPhysicalDeviceSampleLocationsPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D maxSampleLocationGridSize ;} VkMultisamplePropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSamplerReductionMode reductionMode ;} VkSamplerReductionModeCreateInfo;
typedef struct {} VkSamplerReductionModeCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t advancedBlendCoherentOperations ;} VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiDraw ;} VkPhysicalDeviceMultiDrawFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t advancedBlendMaxColorAttachments ;uint32_t advancedBlendIndependentBlend ;uint32_t advancedBlendNonPremultipliedSrcColor ;uint32_t advancedBlendNonPremultipliedDstColor ;uint32_t advancedBlendCorrelatedOverlap ;uint32_t advancedBlendAllOperations ;} VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t srcPremultiplied ;uint32_t dstPremultiplied ;VkBlendOverlapEXT blendOverlap ;} VkPipelineColorBlendAdvancedStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t inlineUniformBlock ;uint32_t descriptorBindingInlineUniformBlockUpdateAfterBind ;} VkPhysicalDeviceInlineUniformBlockFeatures;
typedef struct {} VkPhysicalDeviceInlineUniformBlockFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxInlineUniformBlockSize ;uint32_t maxPerStageDescriptorInlineUniformBlocks ;uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks ;uint32_t maxDescriptorSetInlineUniformBlocks ;uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks ;} VkPhysicalDeviceInlineUniformBlockProperties;
typedef struct {} VkPhysicalDeviceInlineUniformBlockPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t dataSize ;void* pData ;} VkWriteDescriptorSetInlineUniformBlock;
typedef struct {} VkWriteDescriptorSetInlineUniformBlockEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxInlineUniformBlockBindings ;} VkDescriptorPoolInlineUniformBlockCreateInfo;
typedef struct {} VkDescriptorPoolInlineUniformBlockCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCoverageModulationStateCreateFlagsNV flags ;VkCoverageModulationModeNV coverageModulationMode ;uint32_t coverageModulationTableEnable ;uint32_t coverageModulationTableCount ;void* pCoverageModulationTable ;} VkPipelineCoverageModulationStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewFormatCount ;void* pViewFormats ;} VkImageFormatListCreateInfo;
typedef struct {} VkImageFormatListCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkValidationCacheCreateFlagsEXT flags ;size_t initialDataSize ;void* pInitialData ;} VkValidationCacheCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkValidationCacheEXT validationCache ;} VkShaderModuleValidationCacheCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPerSetDescriptors ;uint64_t maxMemoryAllocationSize ;} VkPhysicalDeviceMaintenance3Properties;
typedef struct {} VkPhysicalDeviceMaintenance3PropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maintenance4 ;} VkPhysicalDeviceMaintenance4Features;
typedef struct {} VkPhysicalDeviceMaintenance4FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t maxBufferSize ;} VkPhysicalDeviceMaintenance4Properties;
typedef struct {} VkPhysicalDeviceMaintenance4PropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maintenance5 ;} VkPhysicalDeviceMaintenance5FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t earlyFragmentMultisampleCoverageAfterSampleCounting ;uint32_t earlyFragmentSampleMaskTestBeforeSampleCounting ;uint32_t depthStencilSwizzleOneSupport ;uint32_t polygonModePointSize ;uint32_t nonStrictSinglePixelWideLinesUseParallelogram ;uint32_t nonStrictWideLinesUseParallelogram ;} VkPhysicalDeviceMaintenance5PropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maintenance6 ;} VkPhysicalDeviceMaintenance6FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t blockTexelViewCompatibleMultipleLayers ;uint32_t maxCombinedImageSamplerDescriptorCount ;uint32_t fragmentShadingRateClampCombinerInputs ;} VkPhysicalDeviceMaintenance6PropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachmentFormats ;VkFormat depthAttachmentFormat ;VkFormat stencilAttachmentFormat ;} VkRenderingAreaInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t supported ;} VkDescriptorSetLayoutSupport;
typedef struct {} VkDescriptorSetLayoutSupportKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderDrawParameters ;} VkPhysicalDeviceShaderDrawParametersFeatures;
typedef struct {} VkPhysicalDeviceShaderDrawParameterFeatures;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderFloat16 ;uint32_t shaderInt8 ;} VkPhysicalDeviceShaderFloat16Int8Features;
typedef struct {} VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;
typedef struct {} VkPhysicalDeviceFloat16Int8FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderFloatControlsIndependence denormBehaviorIndependence ;VkShaderFloatControlsIndependence roundingModeIndependence ;uint32_t shaderSignedZeroInfNanPreserveFloat16 ;uint32_t shaderSignedZeroInfNanPreserveFloat32 ;uint32_t shaderSignedZeroInfNanPreserveFloat64 ;uint32_t shaderDenormPreserveFloat16 ;uint32_t shaderDenormPreserveFloat32 ;uint32_t shaderDenormPreserveFloat64 ;uint32_t shaderDenormFlushToZeroFloat16 ;uint32_t shaderDenormFlushToZeroFloat32 ;uint32_t shaderDenormFlushToZeroFloat64 ;uint32_t shaderRoundingModeRTEFloat16 ;uint32_t shaderRoundingModeRTEFloat32 ;uint32_t shaderRoundingModeRTEFloat64 ;uint32_t shaderRoundingModeRTZFloat16 ;uint32_t shaderRoundingModeRTZFloat32 ;uint32_t shaderRoundingModeRTZFloat64 ;} VkPhysicalDeviceFloatControlsProperties;
typedef struct {} VkPhysicalDeviceFloatControlsPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t hostQueryReset ;} VkPhysicalDeviceHostQueryResetFeatures;
typedef struct {} VkPhysicalDeviceHostQueryResetFeaturesEXT;
typedef struct {uint64_t consumer ;uint64_t producer ;} VkNativeBufferUsage2ANDROID;
typedef struct {VkStructureType sType ;void* pNext ;void* handle ;int16_t stride ;int16_t format ;int16_t usage ;VkNativeBufferUsage2ANDROID usage2 ;} VkNativeBufferANDROID;
typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainImageUsageFlagsANDROID usage ;} VkSwapchainImageCreateInfoANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t sharedImage ;} VkPhysicalDevicePresentationPropertiesANDROID;
typedef struct {uint32_t numUsedVgprs ;uint32_t numUsedSgprs ;uint32_t ldsSizePerLocalWorkGroup ;size_t ldsUsageSizeInBytes ;size_t scratchMemUsageInBytes ;} VkShaderResourceUsageAMD;
typedef struct {VkShaderStageFlags shaderStageMask ;VkShaderResourceUsageAMD resourceUsage ;uint32_t numPhysicalVgprs ;uint32_t numPhysicalSgprs ;uint32_t numAvailableVgprs ;uint32_t numAvailableSgprs ;void* computeWorkGroupSize ;} VkShaderStatisticsInfoAMD;
typedef struct {VkStructureType sType ;void* pNext ;VkQueueGlobalPriorityKHR globalPriority ;} VkDeviceQueueGlobalPriorityCreateInfoKHR;
typedef struct {} VkDeviceQueueGlobalPriorityCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t globalPriorityQuery ;} VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
typedef struct {} VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t priorityCount ;void* priorities ;} VkQueueFamilyGlobalPriorityPropertiesKHR;
typedef struct {} VkQueueFamilyGlobalPriorityPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkObjectType objectType ;uint64_t objectHandle ;const char* pObjectName ;} VkDebugUtilsObjectNameInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkObjectType objectType ;uint64_t objectHandle ;uint64_t tagName ;size_t tagSize ;void* pTag ;} VkDebugUtilsObjectTagInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;const char* pLabelName ;float color [4];} VkDebugUtilsLabelEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDebugUtilsMessengerCreateFlagsEXT flags ;VkDebugUtilsMessageSeverityFlagsEXT messageSeverity ;VkDebugUtilsMessageTypeFlagsEXT messageType ;void* pfnUserCallback ;void* pUserData ;} VkDebugUtilsMessengerCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDebugUtilsMessengerCallbackDataFlagsEXT flags ;const char* pMessageIdName ;int32_t messageIdNumber ;const char* pMessage ;uint32_t queueLabelCount ;VkDebugUtilsLabelEXT* pQueueLabels ;uint32_t cmdBufLabelCount ;VkDebugUtilsLabelEXT* pCmdBufLabels ;uint32_t objectCount ;VkDebugUtilsObjectNameInfoEXT* pObjects ;} VkDebugUtilsMessengerCallbackDataEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceMemoryReport ;} VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemoryReportFlagsEXT flags ;void* pfnUserCallback ;void* pUserData ;} VkDeviceDeviceMemoryReportCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemoryReportFlagsEXT flags ;VkDeviceMemoryReportEventTypeEXT type ;uint64_t memoryObjectId ;uint64_t size ;VkObjectType objectType ;uint64_t objectHandle ;uint32_t heapIndex ;} VkDeviceMemoryReportCallbackDataEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkExternalMemoryHandleTypeFlagBits handleType ;void* pHostPointer ;} VkImportMemoryHostPointerInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;} VkMemoryHostPointerPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t minImportedHostPointerAlignment ;} VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;float primitiveOverestimationSize ;float maxExtraPrimitiveOverestimationSize ;float extraPrimitiveOverestimationSizeGranularity ;uint32_t primitiveUnderestimation ;uint32_t conservativePointAndLineRasterization ;uint32_t degenerateTrianglesRasterized ;uint32_t degenerateLinesRasterized ;uint32_t fullyCoveredFragmentShaderInputVariable ;uint32_t conservativeRasterizationPostDepthCoverage ;} VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkTimeDomainKHR timeDomain ;} VkCalibratedTimestampInfoKHR;
typedef struct {} VkCalibratedTimestampInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderEngineCount ;uint32_t shaderArraysPerEngineCount ;uint32_t computeUnitsPerShaderArray ;uint32_t simdPerComputeUnit ;uint32_t wavefrontsPerSimd ;uint32_t wavefrontSize ;uint32_t sgprsPerSimd ;uint32_t minSgprAllocation ;uint32_t maxSgprAllocation ;uint32_t sgprAllocationGranularity ;uint32_t vgprsPerSimd ;uint32_t minVgprAllocation ;uint32_t maxVgprAllocation ;uint32_t vgprAllocationGranularity ;} VkPhysicalDeviceShaderCorePropertiesAMD;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderCorePropertiesFlagsAMD shaderCoreFeatures ;uint32_t activeComputeUnitCount ;} VkPhysicalDeviceShaderCoreProperties2AMD;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationConservativeStateCreateFlagsEXT flags ;VkConservativeRasterizationModeEXT conservativeRasterizationMode ;float extraPrimitiveOverestimationSize ;} VkPipelineRasterizationConservativeStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderInputAttachmentArrayDynamicIndexing ;uint32_t shaderUniformTexelBufferArrayDynamicIndexing ;uint32_t shaderStorageTexelBufferArrayDynamicIndexing ;uint32_t shaderUniformBufferArrayNonUniformIndexing ;uint32_t shaderSampledImageArrayNonUniformIndexing ;uint32_t shaderStorageBufferArrayNonUniformIndexing ;uint32_t shaderStorageImageArrayNonUniformIndexing ;uint32_t shaderInputAttachmentArrayNonUniformIndexing ;uint32_t shaderUniformTexelBufferArrayNonUniformIndexing ;uint32_t shaderStorageTexelBufferArrayNonUniformIndexing ;uint32_t descriptorBindingUniformBufferUpdateAfterBind ;uint32_t descriptorBindingSampledImageUpdateAfterBind ;uint32_t descriptorBindingStorageImageUpdateAfterBind ;uint32_t descriptorBindingStorageBufferUpdateAfterBind ;uint32_t descriptorBindingUniformTexelBufferUpdateAfterBind ;uint32_t descriptorBindingStorageTexelBufferUpdateAfterBind ;uint32_t descriptorBindingUpdateUnusedWhilePending ;uint32_t descriptorBindingPartiallyBound ;uint32_t descriptorBindingVariableDescriptorCount ;uint32_t runtimeDescriptorArray ;} VkPhysicalDeviceDescriptorIndexingFeatures;
typedef struct {} VkPhysicalDeviceDescriptorIndexingFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxUpdateAfterBindDescriptorsInAllPools ;uint32_t shaderUniformBufferArrayNonUniformIndexingNative ;uint32_t shaderSampledImageArrayNonUniformIndexingNative ;uint32_t shaderStorageBufferArrayNonUniformIndexingNative ;uint32_t shaderStorageImageArrayNonUniformIndexingNative ;uint32_t shaderInputAttachmentArrayNonUniformIndexingNative ;uint32_t robustBufferAccessUpdateAfterBind ;uint32_t quadDivergentImplicitLod ;uint32_t maxPerStageDescriptorUpdateAfterBindSamplers ;uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages ;uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments ;uint32_t maxPerStageUpdateAfterBindResources ;uint32_t maxDescriptorSetUpdateAfterBindSamplers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindSampledImages ;uint32_t maxDescriptorSetUpdateAfterBindStorageImages ;uint32_t maxDescriptorSetUpdateAfterBindInputAttachments ;} VkPhysicalDeviceDescriptorIndexingProperties;
typedef struct {} VkPhysicalDeviceDescriptorIndexingPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t bindingCount ;void* pBindingFlags ;} VkDescriptorSetLayoutBindingFlagsCreateInfo;
typedef struct {} VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorSetCount ;uint32_t* pDescriptorCounts ;} VkDescriptorSetVariableDescriptorCountAllocateInfo;
typedef struct {} VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxVariableDescriptorCount ;} VkDescriptorSetVariableDescriptorCountLayoutSupport;
typedef struct {} VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkAttachmentDescriptionFlags flags ;VkFormat format ;VkSampleCountFlagBits samples ;VkAttachmentLoadOp loadOp ;VkAttachmentStoreOp storeOp ;VkAttachmentLoadOp stencilLoadOp ;VkAttachmentStoreOp stencilStoreOp ;VkImageLayout initialLayout ;VkImageLayout finalLayout ;} VkAttachmentDescription2;
typedef struct {} VkAttachmentDescription2KHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachment ;VkImageLayout layout ;VkImageAspectFlags aspectMask ;} VkAttachmentReference2;
typedef struct {} VkAttachmentReference2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSubpassDescriptionFlags flags ;VkPipelineBindPoint pipelineBindPoint ;uint32_t viewMask ;uint32_t inputAttachmentCount ;VkAttachmentReference2* pInputAttachments ;uint32_t colorAttachmentCount ;VkAttachmentReference2* pColorAttachments ;VkAttachmentReference2* pResolveAttachments ;VkAttachmentReference2* pDepthStencilAttachment ;uint32_t preserveAttachmentCount ;uint32_t* pPreserveAttachments ;} VkSubpassDescription2;
typedef struct {} VkSubpassDescription2KHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t srcSubpass ;uint32_t dstSubpass ;VkPipelineStageFlags srcStageMask ;VkPipelineStageFlags dstStageMask ;VkAccessFlags srcAccessMask ;VkAccessFlags dstAccessMask ;VkDependencyFlags dependencyFlags ;int32_t viewOffset ;} VkSubpassDependency2;
typedef struct {} VkSubpassDependency2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassCreateFlags flags ;uint32_t attachmentCount ;VkAttachmentDescription2* pAttachments ;uint32_t subpassCount ;VkSubpassDescription2* pSubpasses ;uint32_t dependencyCount ;VkSubpassDependency2* pDependencies ;uint32_t correlatedViewMaskCount ;uint32_t* pCorrelatedViewMasks ;} VkRenderPassCreateInfo2;
typedef struct {} VkRenderPassCreateInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSubpassContents contents ;} VkSubpassBeginInfo;
typedef struct {} VkSubpassBeginInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;} VkSubpassEndInfo;
typedef struct {} VkSubpassEndInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t timelineSemaphore ;} VkPhysicalDeviceTimelineSemaphoreFeatures;
typedef struct {} VkPhysicalDeviceTimelineSemaphoreFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t maxTimelineSemaphoreValueDifference ;} VkPhysicalDeviceTimelineSemaphoreProperties;
typedef struct {} VkPhysicalDeviceTimelineSemaphorePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreType semaphoreType ;uint64_t initialValue ;} VkSemaphoreTypeCreateInfo;
typedef struct {} VkSemaphoreTypeCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t waitSemaphoreValueCount ;uint64_t* pWaitSemaphoreValues ;uint32_t signalSemaphoreValueCount ;uint64_t* pSignalSemaphoreValues ;} VkTimelineSemaphoreSubmitInfo;
typedef struct {} VkTimelineSemaphoreSubmitInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphoreWaitFlags flags ;uint32_t semaphoreCount ;VkSemaphore* pSemaphores ;uint64_t* pValues ;} VkSemaphoreWaitInfo;
typedef struct {} VkSemaphoreWaitInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;uint64_t value ;} VkSemaphoreSignalInfo;
typedef struct {} VkSemaphoreSignalInfoKHR;
typedef struct {uint32_t binding ;uint32_t divisor ;} VkVertexInputBindingDivisorDescriptionKHR;
typedef struct {} VkVertexInputBindingDivisorDescriptionEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t vertexBindingDivisorCount ;VkVertexInputBindingDivisorDescriptionKHR* pVertexBindingDivisors ;} VkPipelineVertexInputDivisorStateCreateInfoKHR;
typedef struct {} VkPipelineVertexInputDivisorStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxVertexAttribDivisor ;} VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxVertexAttribDivisor ;uint32_t supportsNonZeroFirstInstance ;} VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pciDomain ;uint32_t pciBus ;uint32_t pciDevice ;uint32_t pciFunction ;} VkPhysicalDevicePCIBusInfoPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* buffer ;} VkImportAndroidHardwareBufferInfoANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t androidHardwareBufferUsage ;} VkAndroidHardwareBufferUsageANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t allocationSize ;uint32_t memoryTypeBits ;} VkAndroidHardwareBufferPropertiesANDROID;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;} VkMemoryGetAndroidHardwareBufferInfoANDROID;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;uint64_t externalFormat ;VkFormatFeatureFlags formatFeatures ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkAndroidHardwareBufferFormatPropertiesANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t conditionalRenderingEnable ;} VkCommandBufferInheritanceConditionalRenderingInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t externalFormat ;} VkExternalFormatANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t storageBuffer8BitAccess ;uint32_t uniformAndStorageBuffer8BitAccess ;uint32_t storagePushConstant8 ;} VkPhysicalDevice8BitStorageFeatures;
typedef struct {} VkPhysicalDevice8BitStorageFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t conditionalRendering ;uint32_t inheritedConditionalRendering ;} VkPhysicalDeviceConditionalRenderingFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t vulkanMemoryModel ;uint32_t vulkanMemoryModelDeviceScope ;uint32_t vulkanMemoryModelAvailabilityVisibilityChains ;} VkPhysicalDeviceVulkanMemoryModelFeatures;
typedef struct {} VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderBufferInt64Atomics ;uint32_t shaderSharedInt64Atomics ;} VkPhysicalDeviceShaderAtomicInt64Features;
typedef struct {} VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderBufferFloat32Atomics ;uint32_t shaderBufferFloat32AtomicAdd ;uint32_t shaderBufferFloat64Atomics ;uint32_t shaderBufferFloat64AtomicAdd ;uint32_t shaderSharedFloat32Atomics ;uint32_t shaderSharedFloat32AtomicAdd ;uint32_t shaderSharedFloat64Atomics ;uint32_t shaderSharedFloat64AtomicAdd ;uint32_t shaderImageFloat32Atomics ;uint32_t shaderImageFloat32AtomicAdd ;uint32_t sparseImageFloat32Atomics ;uint32_t sparseImageFloat32AtomicAdd ;} VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderBufferFloat16Atomics ;uint32_t shaderBufferFloat16AtomicAdd ;uint32_t shaderBufferFloat16AtomicMinMax ;uint32_t shaderBufferFloat32AtomicMinMax ;uint32_t shaderBufferFloat64AtomicMinMax ;uint32_t shaderSharedFloat16Atomics ;uint32_t shaderSharedFloat16AtomicAdd ;uint32_t shaderSharedFloat16AtomicMinMax ;uint32_t shaderSharedFloat32AtomicMinMax ;uint32_t shaderSharedFloat64AtomicMinMax ;uint32_t shaderImageFloat32AtomicMinMax ;uint32_t sparseImageFloat32AtomicMinMax ;} VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t vertexAttributeInstanceRateDivisor ;uint32_t vertexAttributeInstanceRateZeroDivisor ;} VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR;
typedef struct {} VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags checkpointExecutionStageMask ;} VkQueueFamilyCheckpointPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlagBits stage ;void* pCheckpointMarker ;} VkCheckpointDataNV;
typedef struct {VkStructureType sType ;void* pNext ;VkResolveModeFlags supportedDepthResolveModes ;VkResolveModeFlags supportedStencilResolveModes ;uint32_t independentResolveNone ;uint32_t independentResolve ;} VkPhysicalDeviceDepthStencilResolveProperties;
typedef struct {} VkPhysicalDeviceDepthStencilResolvePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkResolveModeFlagBits depthResolveMode ;VkResolveModeFlagBits stencilResolveMode ;VkAttachmentReference2* pDepthStencilResolveAttachment ;} VkSubpassDescriptionDepthStencilResolve;
typedef struct {} VkSubpassDescriptionDepthStencilResolveKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat decodeMode ;} VkImageViewASTCDecodeModeEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t decodeModeSharedExponent ;} VkPhysicalDeviceASTCDecodeFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t transformFeedback ;uint32_t geometryStreams ;} VkPhysicalDeviceTransformFeedbackFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxTransformFeedbackStreams ;uint32_t maxTransformFeedbackBuffers ;uint64_t maxTransformFeedbackBufferSize ;uint32_t maxTransformFeedbackStreamDataSize ;uint32_t maxTransformFeedbackBufferDataSize ;uint32_t maxTransformFeedbackBufferDataStride ;uint32_t transformFeedbackQueries ;uint32_t transformFeedbackStreamsLinesTriangles ;uint32_t transformFeedbackRasterizationStreamSelect ;uint32_t transformFeedbackDraw ;} VkPhysicalDeviceTransformFeedbackPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationStateStreamCreateFlagsEXT flags ;uint32_t rasterizationStream ;} VkPipelineRasterizationStateStreamCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t representativeFragmentTest ;} VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t representativeFragmentTestEnable ;} VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t exclusiveScissor ;} VkPhysicalDeviceExclusiveScissorFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t exclusiveScissorCount ;VkRect2D* pExclusiveScissors ;} VkPipelineViewportExclusiveScissorStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t cornerSampledImage ;} VkPhysicalDeviceCornerSampledImageFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t computeDerivativeGroupQuads ;uint32_t computeDerivativeGroupLinear ;} VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
typedef struct {} VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageFootprint ;} VkPhysicalDeviceShaderImageFootprintFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t dedicatedAllocationImageAliasing ;} VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t indirectCopy ;} VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkQueueFlags supportedQueues ;} VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryDecompression ;} VkPhysicalDeviceMemoryDecompressionFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkMemoryDecompressionMethodFlagsNV decompressionMethods ;uint64_t maxDecompressionIndirectCount ;} VkPhysicalDeviceMemoryDecompressionPropertiesNV;
typedef struct {uint32_t shadingRatePaletteEntryCount ;void* pShadingRatePaletteEntries ;} VkShadingRatePaletteNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shadingRateImageEnable ;uint32_t viewportCount ;VkShadingRatePaletteNV* pShadingRatePalettes ;} VkPipelineViewportShadingRateImageStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shadingRateImage ;uint32_t shadingRateCoarseSampleOrder ;} VkPhysicalDeviceShadingRateImageFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D shadingRateTexelSize ;uint32_t shadingRatePaletteSize ;uint32_t shadingRateMaxCoarseSamples ;} VkPhysicalDeviceShadingRateImagePropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t invocationMask ;} VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;
typedef struct {uint32_t pixelX ;uint32_t pixelY ;uint32_t sample ;} VkCoarseSampleLocationNV;
typedef struct {VkShadingRatePaletteEntryNV shadingRate ;uint32_t sampleCount ;uint32_t sampleLocationCount ;VkCoarseSampleLocationNV* pSampleLocations ;} VkCoarseSampleOrderCustomNV;
typedef struct {VkStructureType sType ;void* pNext ;VkCoarseSampleOrderTypeNV sampleOrderType ;uint32_t customSampleOrderCount ;VkCoarseSampleOrderCustomNV* pCustomSampleOrders ;} VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t taskShader ;uint32_t meshShader ;} VkPhysicalDeviceMeshShaderFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxDrawMeshTasksCount ;uint32_t maxTaskWorkGroupInvocations ;void* maxTaskWorkGroupSize ;uint32_t maxTaskTotalMemorySize ;uint32_t maxTaskOutputCount ;uint32_t maxMeshWorkGroupInvocations ;void* maxMeshWorkGroupSize ;uint32_t maxMeshTotalMemorySize ;uint32_t maxMeshOutputVertices ;uint32_t maxMeshOutputPrimitives ;uint32_t maxMeshMultiviewViewCount ;uint32_t meshOutputPerVertexGranularity ;uint32_t meshOutputPerPrimitiveGranularity ;} VkPhysicalDeviceMeshShaderPropertiesNV;
typedef struct {uint32_t taskCount ;uint32_t firstTask ;} VkDrawMeshTasksIndirectCommandNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t taskShader ;uint32_t meshShader ;uint32_t multiviewMeshShader ;uint32_t primitiveFragmentShadingRateMeshShader ;uint32_t meshShaderQueries ;} VkPhysicalDeviceMeshShaderFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxTaskWorkGroupTotalCount ;void* maxTaskWorkGroupCount ;uint32_t maxTaskWorkGroupInvocations ;void* maxTaskWorkGroupSize ;uint32_t maxTaskPayloadSize ;uint32_t maxTaskSharedMemorySize ;uint32_t maxTaskPayloadAndSharedMemorySize ;uint32_t maxMeshWorkGroupTotalCount ;void* maxMeshWorkGroupCount ;uint32_t maxMeshWorkGroupInvocations ;void* maxMeshWorkGroupSize ;uint32_t maxMeshSharedMemorySize ;uint32_t maxMeshPayloadAndSharedMemorySize ;uint32_t maxMeshOutputMemorySize ;uint32_t maxMeshPayloadAndOutputMemorySize ;uint32_t maxMeshOutputComponents ;uint32_t maxMeshOutputVertices ;uint32_t maxMeshOutputPrimitives ;uint32_t maxMeshOutputLayers ;uint32_t maxMeshMultiviewViewCount ;uint32_t meshOutputPerVertexGranularity ;uint32_t meshOutputPerPrimitiveGranularity ;uint32_t maxPreferredTaskWorkGroupInvocations ;uint32_t maxPreferredMeshWorkGroupInvocations ;uint32_t prefersLocalInvocationVertexOutput ;uint32_t prefersLocalInvocationPrimitiveOutput ;uint32_t prefersCompactVertexOutput ;uint32_t prefersCompactPrimitiveOutput ;} VkPhysicalDeviceMeshShaderPropertiesEXT;
typedef struct {uint32_t groupCountX ;uint32_t groupCountY ;uint32_t groupCountZ ;} VkDrawMeshTasksIndirectCommandEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkRayTracingShaderGroupTypeKHR type ;uint32_t generalShader ;uint32_t closestHitShader ;uint32_t anyHitShader ;uint32_t intersectionShader ;} VkRayTracingShaderGroupCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkRayTracingShaderGroupTypeKHR type ;uint32_t generalShader ;uint32_t closestHitShader ;uint32_t anyHitShader ;uint32_t intersectionShader ;void* pShaderGroupCaptureReplayHandle ;} VkRayTracingShaderGroupCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;uint32_t groupCount ;VkRayTracingShaderGroupCreateInfoNV* pGroups ;uint32_t maxRecursionDepth ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkRayTracingPipelineCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;uint32_t groupCount ;VkRayTracingShaderGroupCreateInfoKHR* pGroups ;uint32_t maxPipelineRayRecursionDepth ;void* pLibraryInfo ;void* pLibraryInterface ;VkPipelineDynamicStateCreateInfo* pDynamicState ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkRayTracingPipelineCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer vertexData ;uint64_t vertexOffset ;uint32_t vertexCount ;uint64_t vertexStride ;VkFormat vertexFormat ;VkBuffer indexData ;uint64_t indexOffset ;uint32_t indexCount ;VkIndexType indexType ;VkBuffer transformData ;uint64_t transformOffset ;} VkGeometryTrianglesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer aabbData ;uint32_t numAABBs ;uint32_t stride ;uint64_t offset ;} VkGeometryAABBNV;
typedef struct {VkGeometryTrianglesNV triangles ;VkGeometryAABBNV aabbs ;} VkGeometryDataNV;
typedef struct {VkStructureType sType ;void* pNext ;VkGeometryTypeKHR geometryType ;VkGeometryDataNV geometry ;VkGeometryFlagsKHR flags ;} VkGeometryNV;
typedef struct {VkStructureType sType ;void* pNext ;void* type ;VkBuildAccelerationStructureFlagsNV flags ;uint32_t instanceCount ;uint32_t geometryCount ;VkGeometryNV* pGeometries ;} VkAccelerationStructureInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t compactedSize ;VkAccelerationStructureInfoNV info ;} VkAccelerationStructureCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureNV accelerationStructure ;VkDeviceMemory memory ;uint64_t memoryOffset ;uint32_t deviceIndexCount ;uint32_t* pDeviceIndices ;} VkBindAccelerationStructureMemoryInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t accelerationStructureCount ;VkAccelerationStructureKHR* pAccelerationStructures ;} VkWriteDescriptorSetAccelerationStructureKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t accelerationStructureCount ;VkAccelerationStructureNV* pAccelerationStructures ;} VkWriteDescriptorSetAccelerationStructureNV;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureMemoryRequirementsTypeNV type ;VkAccelerationStructureNV accelerationStructure ;} VkAccelerationStructureMemoryRequirementsInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t accelerationStructure ;uint32_t accelerationStructureCaptureReplay ;uint32_t accelerationStructureIndirectBuild ;uint32_t accelerationStructureHostCommands ;uint32_t descriptorBindingAccelerationStructureUpdateAfterBind ;} VkPhysicalDeviceAccelerationStructureFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingPipeline ;uint32_t rayTracingPipelineShaderGroupHandleCaptureReplay ;uint32_t rayTracingPipelineShaderGroupHandleCaptureReplayMixed ;uint32_t rayTracingPipelineTraceRaysIndirect ;uint32_t rayTraversalPrimitiveCulling ;} VkPhysicalDeviceRayTracingPipelineFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayQuery ;} VkPhysicalDeviceRayQueryFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t maxGeometryCount ;uint64_t maxInstanceCount ;uint64_t maxPrimitiveCount ;uint32_t maxPerStageDescriptorAccelerationStructures ;uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures ;uint32_t maxDescriptorSetAccelerationStructures ;uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures ;uint32_t minAccelerationStructureScratchOffsetAlignment ;} VkPhysicalDeviceAccelerationStructurePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderGroupHandleSize ;uint32_t maxRayRecursionDepth ;uint32_t maxShaderGroupStride ;uint32_t shaderGroupBaseAlignment ;uint32_t shaderGroupHandleCaptureReplaySize ;uint32_t maxRayDispatchInvocationCount ;uint32_t shaderGroupHandleAlignment ;uint32_t maxRayHitAttributeSize ;} VkPhysicalDeviceRayTracingPipelinePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderGroupHandleSize ;uint32_t maxRecursionDepth ;uint32_t maxShaderGroupStride ;uint32_t shaderGroupBaseAlignment ;uint64_t maxGeometryCount ;uint64_t maxInstanceCount ;uint64_t maxTriangleCount ;uint32_t maxDescriptorSetAccelerationStructures ;} VkPhysicalDeviceRayTracingPropertiesNV;
typedef struct {uint64_t deviceAddress ;uint64_t stride ;uint64_t size ;} VkStridedDeviceAddressRegionKHR;
typedef struct {uint32_t width ;uint32_t height ;uint32_t depth ;} VkTraceRaysIndirectCommandKHR;
typedef struct {uint64_t raygenShaderRecordAddress ;uint64_t raygenShaderRecordSize ;uint64_t missShaderBindingTableAddress ;uint64_t missShaderBindingTableSize ;uint64_t missShaderBindingTableStride ;uint64_t hitShaderBindingTableAddress ;uint64_t hitShaderBindingTableSize ;uint64_t hitShaderBindingTableStride ;uint64_t callableShaderBindingTableAddress ;uint64_t callableShaderBindingTableSize ;uint64_t callableShaderBindingTableStride ;uint32_t width ;uint32_t height ;uint32_t depth ;} VkTraceRaysIndirectCommand2KHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingMaintenance1 ;uint32_t rayTracingPipelineTraceRaysIndirect2 ;} VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t drmFormatModifierCount ;void* pDrmFormatModifierProperties ;} VkDrmFormatModifierPropertiesListEXT;
typedef struct {uint64_t drmFormatModifier ;uint32_t drmFormatModifierPlaneCount ;VkFormatFeatureFlags drmFormatModifierTilingFeatures ;} VkDrmFormatModifierPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t drmFormatModifier ;VkSharingMode sharingMode ;uint32_t queueFamilyIndexCount ;uint32_t* pQueueFamilyIndices ;} VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t drmFormatModifierCount ;uint64_t* pDrmFormatModifiers ;} VkImageDrmFormatModifierListCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t drmFormatModifier ;uint32_t drmFormatModifierPlaneCount ;VkSubresourceLayout* pPlaneLayouts ;} VkImageDrmFormatModifierExplicitCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t drmFormatModifier ;} VkImageDrmFormatModifierPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags stencilUsage ;} VkImageStencilUsageCreateInfo;
typedef struct {} VkImageStencilUsageCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkMemoryOverallocationBehaviorAMD overallocationBehavior ;} VkDeviceMemoryOverallocationCreateInfoAMD;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityMap ;uint32_t fragmentDensityMapDynamic ;uint32_t fragmentDensityMapNonSubsampledImages ;} VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityMapDeferred ;} VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityMapOffset ;} VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D minFragmentDensityTexelSize ;VkExtent2D maxFragmentDensityTexelSize ;uint32_t fragmentDensityInvocations ;} VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t subsampledLoads ;uint32_t subsampledCoarseReconstructionEarlyAccess ;uint32_t maxSubsampledArrayLayers ;uint32_t maxDescriptorSetSubsampledSamplers ;} VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D fragmentDensityOffsetGranularity ;} VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkAttachmentReference fragmentDensityMapAttachment ;} VkRenderPassFragmentDensityMapCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentDensityOffsetCount ;VkOffset2D* pFragmentDensityOffsets ;} VkSubpassFragmentDensityMapOffsetEndInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t scalarBlockLayout ;} VkPhysicalDeviceScalarBlockLayoutFeatures;
typedef struct {} VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t supportsProtected ;} VkSurfaceProtectedCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t uniformBufferStandardLayout ;} VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
typedef struct {} VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthClipEnable ;} VkPhysicalDeviceDepthClipEnableFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags ;uint32_t depthClipEnable ;} VkPipelineRasterizationDepthClipStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* heapBudget ;void* heapUsage ;} VkPhysicalDeviceMemoryBudgetPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryPriority ;} VkPhysicalDeviceMemoryPriorityFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;float priority ;} VkMemoryPriorityAllocateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pageableDeviceLocalMemory ;} VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t bufferDeviceAddress ;uint32_t bufferDeviceAddressCaptureReplay ;uint32_t bufferDeviceAddressMultiDevice ;} VkPhysicalDeviceBufferDeviceAddressFeatures;
typedef struct {} VkPhysicalDeviceBufferDeviceAddressFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t bufferDeviceAddress ;uint32_t bufferDeviceAddressCaptureReplay ;uint32_t bufferDeviceAddressMultiDevice ;} VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
typedef struct {} VkPhysicalDeviceBufferAddressFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkBufferDeviceAddressInfo;
typedef struct {} VkBufferDeviceAddressInfoKHR;
typedef struct {} VkBufferDeviceAddressInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t opaqueCaptureAddress ;} VkBufferOpaqueCaptureAddressCreateInfo;
typedef struct {} VkBufferOpaqueCaptureAddressCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t deviceAddress ;} VkBufferDeviceAddressCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageViewType imageViewType ;} VkPhysicalDeviceImageViewImageFormatInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t filterCubic ;uint32_t filterCubicMinmax ;} VkFilterCubicImageViewImageFormatPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t imagelessFramebuffer ;} VkPhysicalDeviceImagelessFramebufferFeatures;
typedef struct {} VkPhysicalDeviceImagelessFramebufferFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentImageInfoCount ;void* pAttachmentImageInfos ;} VkFramebufferAttachmentsCreateInfo;
typedef struct {} VkFramebufferAttachmentsCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateFlags flags ;VkImageUsageFlags usage ;uint32_t width ;uint32_t height ;uint32_t layerCount ;uint32_t viewFormatCount ;void* pViewFormats ;} VkFramebufferAttachmentImageInfo;
typedef struct {} VkFramebufferAttachmentImageInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentCount ;VkImageView* pAttachments ;} VkRenderPassAttachmentBeginInfo;
typedef struct {} VkRenderPassAttachmentBeginInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t textureCompressionASTC_HDR ;} VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
typedef struct {} VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t cooperativeMatrix ;uint32_t cooperativeMatrixRobustBufferAccess ;} VkPhysicalDeviceCooperativeMatrixFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags cooperativeMatrixSupportedStages ;} VkPhysicalDeviceCooperativeMatrixPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t MSize ;uint32_t NSize ;uint32_t KSize ;void* AType ;void* BType ;void* CType ;void* DType ;void* scope ;} VkCooperativeMatrixPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t ycbcrImageArrays ;} VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkDescriptorType descriptorType ;VkSampler sampler ;} VkImageViewHandleInfoNVX;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t deviceAddress ;uint64_t size ;} VkImageViewAddressPropertiesNVX;
typedef struct {VkStructureType sType ;void* pNext ;void* frameToken ;} VkPresentFrameTokenGGP;
typedef struct {VkPipelineCreationFeedbackFlags flags ;uint64_t duration ;} VkPipelineCreationFeedback;
typedef struct {} VkPipelineCreationFeedbackEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreationFeedback* pPipelineCreationFeedback ;uint32_t pipelineStageCreationFeedbackCount ;VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks ;} VkPipelineCreationFeedbackCreateInfo;
typedef struct {} VkPipelineCreationFeedbackCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkFullScreenExclusiveEXT fullScreenExclusive ;} VkSurfaceFullScreenExclusiveInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* hmonitor ;} VkSurfaceFullScreenExclusiveWin32InfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fullScreenExclusiveSupported ;} VkSurfaceCapabilitiesFullScreenExclusiveEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentBarrier ;} VkPhysicalDevicePresentBarrierFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentBarrierSupported ;} VkSurfaceCapabilitiesPresentBarrierNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentBarrierEnable ;} VkSwapchainPresentBarrierCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t performanceCounterQueryPools ;uint32_t performanceCounterMultipleQueryPools ;} VkPhysicalDevicePerformanceQueryFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t allowCommandBufferQueryCopies ;} VkPhysicalDevicePerformanceQueryPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceCounterUnitKHR unit ;VkPerformanceCounterScopeKHR scope ;VkPerformanceCounterStorageKHR storage ;uint8_t uuid [16];} VkPerformanceCounterKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceCounterDescriptionFlagsKHR flags ;char name [256];char category [256];char description [256];} VkPerformanceCounterDescriptionKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t queueFamilyIndex ;uint32_t counterIndexCount ;uint32_t* pCounterIndices ;} VkQueryPoolPerformanceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkAcquireProfilingLockFlagsKHR flags ;uint64_t timeout ;} VkAcquireProfilingLockInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t counterPassIndex ;} VkPerformanceQuerySubmitInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPerformanceQueriesPerPool ;} VkPerformanceQueryReservationInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkHeadlessSurfaceCreateFlagsEXT flags ;} VkHeadlessSurfaceCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t coverageReductionMode ;} VkPhysicalDeviceCoverageReductionModeFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCoverageReductionStateCreateFlagsNV flags ;VkCoverageReductionModeNV coverageReductionMode ;} VkPipelineCoverageReductionStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkCoverageReductionModeNV coverageReductionMode ;VkSampleCountFlagBits rasterizationSamples ;VkSampleCountFlags depthStencilSamples ;VkSampleCountFlags colorSamples ;} VkFramebufferMixedSamplesCombinationNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderIntegerFunctions2 ;} VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
typedef struct {VkPerformanceValueTypeINTEL type ;void* data ;} VkPerformanceValueINTEL;
typedef struct {VkStructureType sType ;void* pNext ;void* pUserData ;} VkInitializePerformanceApiInfoINTEL;
typedef struct {VkStructureType sType ;void* pNext ;VkQueryPoolSamplingModeINTEL performanceCountersSampling ;} VkQueryPoolPerformanceQueryCreateInfoINTEL;
typedef struct {} VkQueryPoolCreateInfoINTEL;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t marker ;} VkPerformanceMarkerInfoINTEL;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t marker ;} VkPerformanceStreamMarkerInfoINTEL;
typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceOverrideTypeINTEL type ;uint32_t enable ;uint64_t parameter ;} VkPerformanceOverrideInfoINTEL;
typedef struct {VkStructureType sType ;void* pNext ;VkPerformanceConfigurationTypeINTEL type ;} VkPerformanceConfigurationAcquireInfoINTEL;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSubgroupClock ;uint32_t shaderDeviceClock ;} VkPhysicalDeviceShaderClockFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t indexTypeUint8 ;} VkPhysicalDeviceIndexTypeUint8FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSMCount ;uint32_t shaderWarpsPerSM ;} VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSMBuiltins ;} VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentShaderSampleInterlock ;uint32_t fragmentShaderPixelInterlock ;uint32_t fragmentShaderShadingRateInterlock ;} VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t separateDepthStencilLayouts ;} VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
typedef struct {} VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageLayout stencilLayout ;} VkAttachmentReferenceStencilLayout;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t primitiveTopologyListRestart ;uint32_t primitiveTopologyPatchListRestart ;} VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
typedef struct {} VkAttachmentReferenceStencilLayoutKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageLayout stencilInitialLayout ;VkImageLayout stencilFinalLayout ;} VkAttachmentDescriptionStencilLayout;
typedef struct {} VkAttachmentDescriptionStencilLayoutKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineExecutableInfo ;} VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPipeline pipeline ;} VkPipelineInfoKHR;
typedef struct {} VkPipelineInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags stages ;char name [256];char description [256];uint32_t subgroupSize ;} VkPipelineExecutablePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPipeline pipeline ;uint32_t executableIndex ;} VkPipelineExecutableInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;char name [256];char description [256];VkPipelineExecutableStatisticFormatKHR format ;void* value ;} VkPipelineExecutableStatisticKHR;
typedef struct {VkStructureType sType ;void* pNext ;char name [256];char description [256];uint32_t isText ;size_t dataSize ;void* pData ;} VkPipelineExecutableInternalRepresentationKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderDemoteToHelperInvocation ;} VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
typedef struct {} VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t texelBufferAlignment ;} VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t storageTexelBufferOffsetAlignmentBytes ;uint32_t storageTexelBufferOffsetSingleTexelAlignment ;uint64_t uniformTexelBufferOffsetAlignmentBytes ;uint32_t uniformTexelBufferOffsetSingleTexelAlignment ;} VkPhysicalDeviceTexelBufferAlignmentProperties;
typedef struct {} VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t subgroupSizeControl ;uint32_t computeFullSubgroups ;} VkPhysicalDeviceSubgroupSizeControlFeatures;
typedef struct {} VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t minSubgroupSize ;uint32_t maxSubgroupSize ;uint32_t maxComputeWorkgroupSubgroups ;VkShaderStageFlags requiredSubgroupSizeStages ;} VkPhysicalDeviceSubgroupSizeControlProperties;
typedef struct {} VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t requiredSubgroupSize ;} VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
typedef struct {} VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;
typedef struct {} VkShaderRequiredSubgroupSizeCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderPass renderPass ;uint32_t subpass ;} VkSubpassShadingPipelineCreateInfoHUAWEI;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxSubpassShadingWorkgroupSizeAspectRatio ;} VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;
typedef struct {VkStructureType sType ;void* pNext ;void* maxWorkGroupCount ;void* maxWorkGroupSize ;uint32_t maxOutputClusterCount ;uint64_t indirectBufferOffsetAlignment ;} VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t opaqueCaptureAddress ;} VkMemoryOpaqueCaptureAddressAllocateInfo;
typedef struct {} VkMemoryOpaqueCaptureAddressAllocateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;} VkDeviceMemoryOpaqueCaptureAddressInfo;
typedef struct {} VkDeviceMemoryOpaqueCaptureAddressInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rectangularLines ;uint32_t bresenhamLines ;uint32_t smoothLines ;uint32_t stippledRectangularLines ;uint32_t stippledBresenhamLines ;uint32_t stippledSmoothLines ;} VkPhysicalDeviceLineRasterizationFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t lineSubPixelPrecisionBits ;} VkPhysicalDeviceLineRasterizationPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkLineRasterizationModeEXT lineRasterizationMode ;uint32_t stippledLineEnable ;uint32_t lineStippleFactor ;uint16_t lineStipplePattern ;} VkPipelineRasterizationLineStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineCreationCacheControl ;} VkPhysicalDevicePipelineCreationCacheControlFeatures;
typedef struct {} VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t storageBuffer16BitAccess ;uint32_t uniformAndStorageBuffer16BitAccess ;uint32_t storagePushConstant16 ;uint32_t storageInputOutput16 ;uint32_t multiview ;uint32_t multiviewGeometryShader ;uint32_t multiviewTessellationShader ;uint32_t variablePointersStorageBuffer ;uint32_t variablePointers ;uint32_t protectedMemory ;uint32_t samplerYcbcrConversion ;uint32_t shaderDrawParameters ;} VkPhysicalDeviceVulkan11Features;
typedef struct {VkStructureType sType ;void* pNext ;uint8_t deviceUUID [16];uint8_t driverUUID [16];void* deviceLUID ;uint32_t deviceNodeMask ;uint32_t deviceLUIDValid ;uint32_t subgroupSize ;VkShaderStageFlags subgroupSupportedStages ;VkSubgroupFeatureFlags subgroupSupportedOperations ;uint32_t subgroupQuadOperationsInAllStages ;VkPointClippingBehavior pointClippingBehavior ;uint32_t maxMultiviewViewCount ;uint32_t maxMultiviewInstanceIndex ;uint32_t protectedNoFault ;uint32_t maxPerSetDescriptors ;uint64_t maxMemoryAllocationSize ;} VkPhysicalDeviceVulkan11Properties;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t samplerMirrorClampToEdge ;uint32_t drawIndirectCount ;uint32_t storageBuffer8BitAccess ;uint32_t uniformAndStorageBuffer8BitAccess ;uint32_t storagePushConstant8 ;uint32_t shaderBufferInt64Atomics ;uint32_t shaderSharedInt64Atomics ;uint32_t shaderFloat16 ;uint32_t shaderInt8 ;uint32_t descriptorIndexing ;uint32_t shaderInputAttachmentArrayDynamicIndexing ;uint32_t shaderUniformTexelBufferArrayDynamicIndexing ;uint32_t shaderStorageTexelBufferArrayDynamicIndexing ;uint32_t shaderUniformBufferArrayNonUniformIndexing ;uint32_t shaderSampledImageArrayNonUniformIndexing ;uint32_t shaderStorageBufferArrayNonUniformIndexing ;uint32_t shaderStorageImageArrayNonUniformIndexing ;uint32_t shaderInputAttachmentArrayNonUniformIndexing ;uint32_t shaderUniformTexelBufferArrayNonUniformIndexing ;uint32_t shaderStorageTexelBufferArrayNonUniformIndexing ;uint32_t descriptorBindingUniformBufferUpdateAfterBind ;uint32_t descriptorBindingSampledImageUpdateAfterBind ;uint32_t descriptorBindingStorageImageUpdateAfterBind ;uint32_t descriptorBindingStorageBufferUpdateAfterBind ;uint32_t descriptorBindingUniformTexelBufferUpdateAfterBind ;uint32_t descriptorBindingStorageTexelBufferUpdateAfterBind ;uint32_t descriptorBindingUpdateUnusedWhilePending ;uint32_t descriptorBindingPartiallyBound ;uint32_t descriptorBindingVariableDescriptorCount ;uint32_t runtimeDescriptorArray ;uint32_t samplerFilterMinmax ;uint32_t scalarBlockLayout ;uint32_t imagelessFramebuffer ;uint32_t uniformBufferStandardLayout ;uint32_t shaderSubgroupExtendedTypes ;uint32_t separateDepthStencilLayouts ;uint32_t hostQueryReset ;uint32_t timelineSemaphore ;uint32_t bufferDeviceAddress ;uint32_t bufferDeviceAddressCaptureReplay ;uint32_t bufferDeviceAddressMultiDevice ;uint32_t vulkanMemoryModel ;uint32_t vulkanMemoryModelDeviceScope ;uint32_t vulkanMemoryModelAvailabilityVisibilityChains ;uint32_t shaderOutputViewportIndex ;uint32_t shaderOutputLayer ;uint32_t subgroupBroadcastDynamicId ;} VkPhysicalDeviceVulkan12Features;
typedef struct {VkStructureType sType ;void* pNext ;VkDriverId driverID ;char driverName [256];char driverInfo [256];VkConformanceVersion conformanceVersion ;VkShaderFloatControlsIndependence denormBehaviorIndependence ;VkShaderFloatControlsIndependence roundingModeIndependence ;uint32_t shaderSignedZeroInfNanPreserveFloat16 ;uint32_t shaderSignedZeroInfNanPreserveFloat32 ;uint32_t shaderSignedZeroInfNanPreserveFloat64 ;uint32_t shaderDenormPreserveFloat16 ;uint32_t shaderDenormPreserveFloat32 ;uint32_t shaderDenormPreserveFloat64 ;uint32_t shaderDenormFlushToZeroFloat16 ;uint32_t shaderDenormFlushToZeroFloat32 ;uint32_t shaderDenormFlushToZeroFloat64 ;uint32_t shaderRoundingModeRTEFloat16 ;uint32_t shaderRoundingModeRTEFloat32 ;uint32_t shaderRoundingModeRTEFloat64 ;uint32_t shaderRoundingModeRTZFloat16 ;uint32_t shaderRoundingModeRTZFloat32 ;uint32_t shaderRoundingModeRTZFloat64 ;uint32_t maxUpdateAfterBindDescriptorsInAllPools ;uint32_t shaderUniformBufferArrayNonUniformIndexingNative ;uint32_t shaderSampledImageArrayNonUniformIndexingNative ;uint32_t shaderStorageBufferArrayNonUniformIndexingNative ;uint32_t shaderStorageImageArrayNonUniformIndexingNative ;uint32_t shaderInputAttachmentArrayNonUniformIndexingNative ;uint32_t robustBufferAccessUpdateAfterBind ;uint32_t quadDivergentImplicitLod ;uint32_t maxPerStageDescriptorUpdateAfterBindSamplers ;uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers ;uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages ;uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages ;uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments ;uint32_t maxPerStageUpdateAfterBindResources ;uint32_t maxDescriptorSetUpdateAfterBindSamplers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers ;uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers ;uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic ;uint32_t maxDescriptorSetUpdateAfterBindSampledImages ;uint32_t maxDescriptorSetUpdateAfterBindStorageImages ;uint32_t maxDescriptorSetUpdateAfterBindInputAttachments ;VkResolveModeFlags supportedDepthResolveModes ;VkResolveModeFlags supportedStencilResolveModes ;uint32_t independentResolveNone ;uint32_t independentResolve ;uint32_t filterMinmaxSingleComponentFormats ;uint32_t filterMinmaxImageComponentMapping ;uint64_t maxTimelineSemaphoreValueDifference ;VkSampleCountFlags framebufferIntegerColorSampleCounts ;} VkPhysicalDeviceVulkan12Properties;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t robustImageAccess ;uint32_t inlineUniformBlock ;uint32_t descriptorBindingInlineUniformBlockUpdateAfterBind ;uint32_t pipelineCreationCacheControl ;uint32_t privateData ;uint32_t shaderDemoteToHelperInvocation ;uint32_t shaderTerminateInvocation ;uint32_t subgroupSizeControl ;uint32_t computeFullSubgroups ;uint32_t synchronization2 ;uint32_t textureCompressionASTC_HDR ;uint32_t shaderZeroInitializeWorkgroupMemory ;uint32_t dynamicRendering ;uint32_t shaderIntegerDotProduct ;uint32_t maintenance4 ;} VkPhysicalDeviceVulkan13Features;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t minSubgroupSize ;uint32_t maxSubgroupSize ;uint32_t maxComputeWorkgroupSubgroups ;VkShaderStageFlags requiredSubgroupSizeStages ;uint32_t maxInlineUniformBlockSize ;uint32_t maxPerStageDescriptorInlineUniformBlocks ;uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks ;uint32_t maxDescriptorSetInlineUniformBlocks ;uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks ;uint32_t maxInlineUniformTotalSize ;uint32_t integerDotProduct8BitUnsignedAccelerated ;uint32_t integerDotProduct8BitSignedAccelerated ;uint32_t integerDotProduct8BitMixedSignednessAccelerated ;uint32_t integerDotProduct4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProduct4x8BitPackedSignedAccelerated ;uint32_t integerDotProduct4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProduct16BitUnsignedAccelerated ;uint32_t integerDotProduct16BitSignedAccelerated ;uint32_t integerDotProduct16BitMixedSignednessAccelerated ;uint32_t integerDotProduct32BitUnsignedAccelerated ;uint32_t integerDotProduct32BitSignedAccelerated ;uint32_t integerDotProduct32BitMixedSignednessAccelerated ;uint32_t integerDotProduct64BitUnsignedAccelerated ;uint32_t integerDotProduct64BitSignedAccelerated ;uint32_t integerDotProduct64BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated ;uint64_t storageTexelBufferOffsetAlignmentBytes ;uint32_t storageTexelBufferOffsetSingleTexelAlignment ;uint64_t uniformTexelBufferOffsetAlignmentBytes ;uint32_t uniformTexelBufferOffsetSingleTexelAlignment ;uint64_t maxBufferSize ;} VkPhysicalDeviceVulkan13Properties;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCompilerControlFlagsAMD compilerControlFlags ;} VkPipelineCompilerControlCreateInfoAMD;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceCoherentMemory ;} VkPhysicalDeviceCoherentMemoryFeaturesAMD;
typedef struct {VkStructureType sType ;void* pNext ;VkFaultLevel faultLevel ;VkFaultType faultType ;} VkFaultData;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t faultCount ;VkFaultData* pFaults ;void* pfnFaultCallback ;} VkFaultCallbackInfo;
typedef struct {VkStructureType sType ;void* pNext ;char name [256];char version [256];VkToolPurposeFlags purposes ;char description [256];char layer [256];} VkPhysicalDeviceToolProperties;
typedef struct {} VkPhysicalDeviceToolPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* customBorderColor ;VkFormat format ;} VkSamplerCustomBorderColorCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxCustomBorderColorSamplers ;} VkPhysicalDeviceCustomBorderColorPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t customBorderColors ;uint32_t customBorderColorWithoutFormat ;} VkPhysicalDeviceCustomBorderColorFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkComponentMapping components ;uint32_t srgb ;} VkSamplerBorderColorComponentMappingCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t borderColorSwizzle ;uint32_t borderColorSwizzleFromImage ;} VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat vertexFormat ;void* vertexData ;uint64_t vertexStride ;uint32_t maxVertex ;VkIndexType indexType ;void* indexData ;void* transformData ;} VkAccelerationStructureGeometryTrianglesDataKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* data ;uint64_t stride ;} VkAccelerationStructureGeometryAabbsDataKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t arrayOfPointers ;void* data ;} VkAccelerationStructureGeometryInstancesDataKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkGeometryTypeKHR geometryType ;void* geometry ;VkGeometryFlagsKHR flags ;} VkAccelerationStructureGeometryKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureTypeKHR type ;VkBuildAccelerationStructureFlagsKHR flags ;VkBuildAccelerationStructureModeKHR mode ;VkAccelerationStructureKHR srcAccelerationStructure ;VkAccelerationStructureKHR dstAccelerationStructure ;uint32_t geometryCount ;VkAccelerationStructureGeometryKHR* pGeometries ;void* ppGeometries ;void* scratchData ;} VkAccelerationStructureBuildGeometryInfoKHR;
typedef struct {uint32_t primitiveCount ;uint32_t primitiveOffset ;uint32_t firstVertex ;uint32_t transformOffset ;} VkAccelerationStructureBuildRangeInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureCreateFlagsKHR createFlags ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;VkAccelerationStructureTypeKHR type ;uint64_t deviceAddress ;} VkAccelerationStructureCreateInfoKHR;
typedef struct {float minX ;float minY ;float minZ ;float maxX ;float maxY ;float maxZ ;} VkAabbPositionsKHR;
typedef struct {} VkAabbPositionsNV;
typedef struct {void* matrix ;} VkTransformMatrixKHR;
typedef struct {} VkTransformMatrixNV;
typedef struct {VkTransformMatrixKHR transform ;uint32_t instanceCustomIndex :24;uint32_t mask :8;uint32_t instanceShaderBindingTableRecordOffset :24;void* flags ;uint64_t accelerationStructureReference ;} VkAccelerationStructureInstanceKHR;
typedef struct {} VkAccelerationStructureInstanceNV;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR accelerationStructure ;} VkAccelerationStructureDeviceAddressInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pVersionData ;} VkAccelerationStructureVersionInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR src ;VkAccelerationStructureKHR dst ;VkCopyAccelerationStructureModeKHR mode ;} VkCopyAccelerationStructureInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR src ;void* dst ;VkCopyAccelerationStructureModeKHR mode ;} VkCopyAccelerationStructureToMemoryInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* src ;VkAccelerationStructureKHR dst ;VkCopyAccelerationStructureModeKHR mode ;} VkCopyMemoryToAccelerationStructureInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxPipelineRayPayloadSize ;uint32_t maxPipelineRayHitAttributeSize ;} VkRayTracingPipelineInterfaceCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t libraryCount ;VkPipeline* pLibraries ;} VkPipelineLibraryCreateInfoKHR;
typedef struct {VkObjectType objectType ;uint64_t objectHandle ;VkRefreshObjectFlagsKHR flags ;} VkRefreshObjectKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t objectCount ;VkRefreshObjectKHR* pObjects ;} VkRefreshObjectListKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t extendedDynamicState ;} VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t extendedDynamicState2 ;uint32_t extendedDynamicState2LogicOp ;uint32_t extendedDynamicState2PatchControlPoints ;} VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t extendedDynamicState3TessellationDomainOrigin ;uint32_t extendedDynamicState3DepthClampEnable ;uint32_t extendedDynamicState3PolygonMode ;uint32_t extendedDynamicState3RasterizationSamples ;uint32_t extendedDynamicState3SampleMask ;uint32_t extendedDynamicState3AlphaToCoverageEnable ;uint32_t extendedDynamicState3AlphaToOneEnable ;uint32_t extendedDynamicState3LogicOpEnable ;uint32_t extendedDynamicState3ColorBlendEnable ;uint32_t extendedDynamicState3ColorBlendEquation ;uint32_t extendedDynamicState3ColorWriteMask ;uint32_t extendedDynamicState3RasterizationStream ;uint32_t extendedDynamicState3ConservativeRasterizationMode ;uint32_t extendedDynamicState3ExtraPrimitiveOverestimationSize ;uint32_t extendedDynamicState3DepthClipEnable ;uint32_t extendedDynamicState3SampleLocationsEnable ;uint32_t extendedDynamicState3ColorBlendAdvanced ;uint32_t extendedDynamicState3ProvokingVertexMode ;uint32_t extendedDynamicState3LineRasterizationMode ;uint32_t extendedDynamicState3LineStippleEnable ;uint32_t extendedDynamicState3DepthClipNegativeOneToOne ;uint32_t extendedDynamicState3ViewportWScalingEnable ;uint32_t extendedDynamicState3ViewportSwizzle ;uint32_t extendedDynamicState3CoverageToColorEnable ;uint32_t extendedDynamicState3CoverageToColorLocation ;uint32_t extendedDynamicState3CoverageModulationMode ;uint32_t extendedDynamicState3CoverageModulationTableEnable ;uint32_t extendedDynamicState3CoverageModulationTable ;uint32_t extendedDynamicState3CoverageReductionMode ;uint32_t extendedDynamicState3RepresentativeFragmentTestEnable ;uint32_t extendedDynamicState3ShadingRateImageEnable ;} VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t dynamicPrimitiveTopologyUnrestricted ;} VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;
typedef struct {VkBlendFactor srcColorBlendFactor ;VkBlendFactor dstColorBlendFactor ;VkBlendOp colorBlendOp ;VkBlendFactor srcAlphaBlendFactor ;VkBlendFactor dstAlphaBlendFactor ;VkBlendOp alphaBlendOp ;} VkColorBlendEquationEXT;
typedef struct {VkBlendOp advancedBlendOp ;uint32_t srcPremultiplied ;uint32_t dstPremultiplied ;VkBlendOverlapEXT blendOverlap ;uint32_t clampResults ;} VkColorBlendAdvancedEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceTransformFlagBitsKHR transform ;} VkRenderPassTransformBeginInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceTransformFlagBitsKHR transform ;} VkCopyCommandTransformInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkSurfaceTransformFlagBitsKHR transform ;VkRect2D renderArea ;} VkCommandBufferInheritanceRenderPassTransformInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t diagnosticsConfig ;} VkPhysicalDeviceDiagnosticsConfigFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceDiagnosticsConfigFlagsNV flags ;} VkDeviceDiagnosticsConfigCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint8_t pipelineIdentifier [16];VkPipelineMatchControl matchControl ;uint64_t poolEntrySize ;} VkPipelineOfflineCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderZeroInitializeWorkgroupMemory ;} VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
typedef struct {} VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderSubgroupUniformControlFlow ;} VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t robustBufferAccess2 ;uint32_t robustImageAccess2 ;uint32_t nullDescriptor ;} VkPhysicalDeviceRobustness2FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t robustStorageBufferAccessSizeAlignment ;uint64_t robustUniformBufferAccessSizeAlignment ;} VkPhysicalDeviceRobustness2PropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t robustImageAccess ;} VkPhysicalDeviceImageRobustnessFeatures;
typedef struct {} VkPhysicalDeviceImageRobustnessFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t workgroupMemoryExplicitLayout ;uint32_t workgroupMemoryExplicitLayoutScalarBlockLayout ;uint32_t workgroupMemoryExplicitLayout8BitAccess ;uint32_t workgroupMemoryExplicitLayout16BitAccess ;} VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t constantAlphaColorBlendFactors ;uint32_t events ;uint32_t imageViewFormatReinterpretation ;uint32_t imageViewFormatSwizzle ;uint32_t imageView2DOn3DImage ;uint32_t multisampleArrayImage ;uint32_t mutableComparisonSamplers ;uint32_t pointPolygons ;uint32_t samplerMipLodBias ;uint32_t separateStencilMaskRef ;uint32_t shaderSampleRateInterpolationFunctions ;uint32_t tessellationIsolines ;uint32_t tessellationPointMode ;uint32_t triangleFans ;uint32_t vertexAttributeAccessBeyondStride ;} VkPhysicalDevicePortabilitySubsetFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t minVertexInputBindingStrideAlignment ;} VkPhysicalDevicePortabilitySubsetPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t formatA4R4G4B4 ;uint32_t formatA4B4G4R4 ;} VkPhysicalDevice4444FormatsFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t subpassShading ;} VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t clustercullingShader ;uint32_t multiviewClusterCullingShader ;} VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t clusterShadingRate ;} VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t srcOffset ;uint64_t dstOffset ;uint64_t size ;} VkBufferCopy2;
typedef struct {} VkBufferCopy2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageCopy2;
typedef struct {} VkImageCopy2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresourceLayers srcSubresource ;void* srcOffsets ;VkImageSubresourceLayers dstSubresource ;void* dstOffsets ;} VkImageBlit2;
typedef struct {} VkImageBlit2KHR;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t bufferOffset ;uint32_t bufferRowLength ;uint32_t bufferImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkBufferImageCopy2;
typedef struct {} VkBufferImageCopy2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresourceLayers srcSubresource ;VkOffset3D srcOffset ;VkImageSubresourceLayers dstSubresource ;VkOffset3D dstOffset ;VkExtent3D extent ;} VkImageResolve2;
typedef struct {} VkImageResolve2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer srcBuffer ;VkBuffer dstBuffer ;uint32_t regionCount ;VkBufferCopy2* pRegions ;} VkCopyBufferInfo2;
typedef struct {} VkCopyBufferInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageCopy2* pRegions ;} VkCopyImageInfo2;
typedef struct {} VkCopyImageInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageBlit2* pRegions ;VkFilter filter ;} VkBlitImageInfo2;
typedef struct {} VkBlitImageInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer srcBuffer ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkBufferImageCopy2* pRegions ;} VkCopyBufferToImageInfo2;
typedef struct {} VkCopyBufferToImageInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkBuffer dstBuffer ;uint32_t regionCount ;VkBufferImageCopy2* pRegions ;} VkCopyImageToBufferInfo2;
typedef struct {} VkCopyImageToBufferInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageResolve2* pRegions ;} VkResolveImageInfo2;
typedef struct {} VkResolveImageInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderImageInt64Atomics ;uint32_t sparseImageInt64Atomics ;} VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkAttachmentReference2* pFragmentShadingRateAttachment ;VkExtent2D shadingRateAttachmentTexelSize ;} VkFragmentShadingRateAttachmentInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D fragmentSize ;void* combinerOps ;} VkPipelineFragmentShadingRateStateCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineFragmentShadingRate ;uint32_t primitiveFragmentShadingRate ;uint32_t attachmentFragmentShadingRate ;} VkPhysicalDeviceFragmentShadingRateFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D minFragmentShadingRateAttachmentTexelSize ;VkExtent2D maxFragmentShadingRateAttachmentTexelSize ;uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio ;uint32_t primitiveFragmentShadingRateWithMultipleViewports ;uint32_t layeredShadingRateAttachments ;uint32_t fragmentShadingRateNonTrivialCombinerOps ;VkExtent2D maxFragmentSize ;uint32_t maxFragmentSizeAspectRatio ;uint32_t maxFragmentShadingRateCoverageSamples ;VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples ;uint32_t fragmentShadingRateWithShaderDepthStencilWrites ;uint32_t fragmentShadingRateWithSampleMask ;uint32_t fragmentShadingRateWithShaderSampleMask ;uint32_t fragmentShadingRateWithConservativeRasterization ;uint32_t fragmentShadingRateWithFragmentShaderInterlock ;uint32_t fragmentShadingRateWithCustomSampleLocations ;uint32_t fragmentShadingRateStrictMultiplyCombiner ;} VkPhysicalDeviceFragmentShadingRatePropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlags sampleCounts ;VkExtent2D fragmentSize ;} VkPhysicalDeviceFragmentShadingRateKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderTerminateInvocation ;} VkPhysicalDeviceShaderTerminateInvocationFeatures;
typedef struct {} VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentShadingRateEnums ;uint32_t supersampleFragmentShadingRates ;uint32_t noInvocationFragmentShadingRates ;} VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkSampleCountFlagBits maxFragmentShadingRateInvocationCount ;} VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkFragmentShadingRateTypeNV shadingRateType ;VkFragmentShadingRateNV shadingRate ;void* combinerOps ;} VkPipelineFragmentShadingRateEnumStateCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t accelerationStructureSize ;uint64_t updateScratchSize ;uint64_t buildScratchSize ;} VkAccelerationStructureBuildSizesInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t image2DViewOf3D ;uint32_t sampler2DViewOf3D ;} VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageSlicedViewOf3D ;} VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentFeedbackLoopDynamicState ;} VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t mutableDescriptorType ;} VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
typedef struct {} VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE;
typedef struct {uint32_t descriptorTypeCount ;void* pDescriptorTypes ;} VkMutableDescriptorTypeListEXT;
typedef struct {} VkMutableDescriptorTypeListVALVE;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t mutableDescriptorTypeListCount ;VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists ;} VkMutableDescriptorTypeCreateInfoEXT;
typedef struct {} VkMutableDescriptorTypeCreateInfoVALVE;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthClipControl ;} VkPhysicalDeviceDepthClipControlFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t negativeOneToOne ;} VkPipelineViewportDepthClipControlCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t vertexInputDynamicState ;} VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t externalMemoryRDMA ;} VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t binding ;uint32_t stride ;VkVertexInputRate inputRate ;uint32_t divisor ;} VkVertexInputBindingDescription2EXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t location ;uint32_t binding ;VkFormat format ;uint32_t offset ;} VkVertexInputAttributeDescription2EXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t colorWriteEnable ;} VkPhysicalDeviceColorWriteEnableFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentCount ;void* pColorWriteEnables ;} VkPipelineColorWriteCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 srcStageMask ;VkAccessFlags2 srcAccessMask ;VkPipelineStageFlags2 dstStageMask ;VkAccessFlags2 dstAccessMask ;} VkMemoryBarrier2;
typedef struct {} VkMemoryBarrier2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 srcStageMask ;VkAccessFlags2 srcAccessMask ;VkPipelineStageFlags2 dstStageMask ;VkAccessFlags2 dstAccessMask ;VkImageLayout oldLayout ;VkImageLayout newLayout ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkImage image ;VkImageSubresourceRange subresourceRange ;} VkImageMemoryBarrier2;
typedef struct {} VkImageMemoryBarrier2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 srcStageMask ;VkAccessFlags2 srcAccessMask ;VkPipelineStageFlags2 dstStageMask ;VkAccessFlags2 dstAccessMask ;uint32_t srcQueueFamilyIndex ;uint32_t dstQueueFamilyIndex ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;} VkBufferMemoryBarrier2;
typedef struct {} VkBufferMemoryBarrier2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDependencyFlags dependencyFlags ;uint32_t memoryBarrierCount ;VkMemoryBarrier2* pMemoryBarriers ;uint32_t bufferMemoryBarrierCount ;VkBufferMemoryBarrier2* pBufferMemoryBarriers ;uint32_t imageMemoryBarrierCount ;VkImageMemoryBarrier2* pImageMemoryBarriers ;} VkDependencyInfo;
typedef struct {} VkDependencyInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;uint64_t value ;VkPipelineStageFlags2 stageMask ;uint32_t deviceIndex ;} VkSemaphoreSubmitInfo;
typedef struct {} VkSemaphoreSubmitInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkCommandBuffer commandBuffer ;uint32_t deviceMask ;} VkCommandBufferSubmitInfo;
typedef struct {} VkCommandBufferSubmitInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkSubmitFlags flags ;uint32_t waitSemaphoreInfoCount ;VkSemaphoreSubmitInfo* pWaitSemaphoreInfos ;uint32_t commandBufferInfoCount ;VkCommandBufferSubmitInfo* pCommandBufferInfos ;uint32_t signalSemaphoreInfoCount ;VkSemaphoreSubmitInfo* pSignalSemaphoreInfos ;} VkSubmitInfo2;
typedef struct {} VkSubmitInfo2KHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 checkpointExecutionStageMask ;} VkQueueFamilyCheckpointProperties2NV;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineStageFlags2 stage ;void* pCheckpointMarker ;} VkCheckpointData2NV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t synchronization2 ;} VkPhysicalDeviceSynchronization2Features;
typedef struct {} VkPhysicalDeviceSynchronization2FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t hostImageCopy ;} VkPhysicalDeviceHostImageCopyFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t copySrcLayoutCount ;void* pCopySrcLayouts ;uint32_t copyDstLayoutCount ;void* pCopyDstLayouts ;uint8_t optimalTilingLayoutUUID [16];uint32_t identicalMemoryTypeRequirements ;} VkPhysicalDeviceHostImageCopyPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* pHostPointer ;uint32_t memoryRowLength ;uint32_t memoryImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkMemoryToImageCopyEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* pHostPointer ;uint32_t memoryRowLength ;uint32_t memoryImageHeight ;VkImageSubresourceLayers imageSubresource ;VkOffset3D imageOffset ;VkExtent3D imageExtent ;} VkImageToMemoryCopyEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkHostImageCopyFlagsEXT flags ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkMemoryToImageCopyEXT* pRegions ;} VkCopyMemoryToImageInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkHostImageCopyFlagsEXT flags ;VkImage srcImage ;VkImageLayout srcImageLayout ;uint32_t regionCount ;VkImageToMemoryCopyEXT* pRegions ;} VkCopyImageToMemoryInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkHostImageCopyFlagsEXT flags ;VkImage srcImage ;VkImageLayout srcImageLayout ;VkImage dstImage ;VkImageLayout dstImageLayout ;uint32_t regionCount ;VkImageCopy2* pRegions ;} VkCopyImageToImageInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkImageLayout oldLayout ;VkImageLayout newLayout ;VkImageSubresourceRange subresourceRange ;} VkHostImageLayoutTransitionInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t size ;} VkSubresourceHostMemcpySizeEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t optimalDeviceAccess ;uint32_t identicalMemoryLayout ;} VkHostImageCopyDevicePerformanceQueryEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceNoDynamicHostAllocations ;uint32_t deviceDestroyFreesMemory ;uint32_t commandPoolMultipleCommandBuffersRecording ;uint32_t commandPoolResetCommandBuffer ;uint32_t commandBufferSimultaneousUse ;uint32_t secondaryCommandBufferNullOrImagelessFramebuffer ;uint32_t recycleDescriptorSetMemory ;uint32_t recyclePipelineMemory ;uint32_t maxRenderPassSubpasses ;uint32_t maxRenderPassDependencies ;uint32_t maxSubpassInputAttachments ;uint32_t maxSubpassPreserveAttachments ;uint32_t maxFramebufferAttachments ;uint32_t maxDescriptorSetLayoutBindings ;uint32_t maxQueryFaultCount ;uint32_t maxCallbackFaultCount ;uint32_t maxCommandPoolCommandBuffers ;uint64_t maxCommandBufferSize ;} VkPhysicalDeviceVulkanSC10Properties;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t poolEntrySize ;uint32_t poolEntryCount ;} VkPipelinePoolSize;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineCacheCreateInfoCount ;VkPipelineCacheCreateInfo* pPipelineCacheCreateInfos ;uint32_t pipelinePoolSizeCount ;VkPipelinePoolSize* pPipelinePoolSizes ;uint32_t semaphoreRequestCount ;uint32_t commandBufferRequestCount ;uint32_t fenceRequestCount ;uint32_t deviceMemoryRequestCount ;uint32_t bufferRequestCount ;uint32_t imageRequestCount ;uint32_t eventRequestCount ;uint32_t queryPoolRequestCount ;uint32_t bufferViewRequestCount ;uint32_t imageViewRequestCount ;uint32_t layeredImageViewRequestCount ;uint32_t pipelineCacheRequestCount ;uint32_t pipelineLayoutRequestCount ;uint32_t renderPassRequestCount ;uint32_t graphicsPipelineRequestCount ;uint32_t computePipelineRequestCount ;uint32_t descriptorSetLayoutRequestCount ;uint32_t samplerRequestCount ;uint32_t descriptorPoolRequestCount ;uint32_t descriptorSetRequestCount ;uint32_t framebufferRequestCount ;uint32_t commandPoolRequestCount ;uint32_t samplerYcbcrConversionRequestCount ;uint32_t surfaceRequestCount ;uint32_t swapchainRequestCount ;uint32_t displayModeRequestCount ;uint32_t subpassDescriptionRequestCount ;uint32_t attachmentDescriptionRequestCount ;uint32_t descriptorSetLayoutBindingRequestCount ;uint32_t descriptorSetLayoutBindingLimit ;uint32_t maxImageViewMipLevels ;uint32_t maxImageViewArrayLayers ;uint32_t maxLayeredImageViewMipLevels ;uint32_t maxOcclusionQueriesPerPool ;uint32_t maxPipelineStatisticsQueriesPerPool ;uint32_t maxTimestampQueriesPerPool ;uint32_t maxImmutableSamplersPerDescriptorSetLayout ;} VkDeviceObjectReservationCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t commandPoolReservedSize ;uint32_t commandPoolMaxCommandBuffers ;} VkCommandPoolMemoryReservationCreateInfo;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t commandPoolAllocated ;uint64_t commandPoolReservedSize ;uint64_t commandBufferAllocated ;} VkCommandPoolMemoryConsumption;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderAtomicInstructions ;} VkPhysicalDeviceVulkanSC10Features;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t primitivesGeneratedQuery ;uint32_t primitivesGeneratedQueryWithRasterizerDiscard ;uint32_t primitivesGeneratedQueryWithNonZeroStreams ;} VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t legacyDithering ;} VkPhysicalDeviceLegacyDitheringFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t multisampledRenderToSingleSampled ;} VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t optimal ;} VkSubpassResolvePerformanceQueryEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t multisampledRenderToSingleSampledEnable ;VkSampleCountFlagBits rasterizationSamples ;} VkMultisampledRenderToSingleSampledInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineProtectedAccess ;} VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoCodecOperationFlagsKHR videoCodecOperations ;} VkQueueFamilyVideoPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t queryResultStatusSupport ;} VkQueueFamilyQueryResultStatusPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t profileCount ;void* pProfiles ;} VkVideoProfileListInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageUsageFlags imageUsage ;} VkPhysicalDeviceVideoFormatInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;VkComponentMapping componentMapping ;VkImageCreateFlags imageCreateFlags ;VkImageType imageType ;VkImageTiling imageTiling ;VkImageUsageFlags imageUsageFlags ;} VkVideoFormatPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoCodecOperationFlagBitsKHR videoCodecOperation ;VkVideoChromaSubsamplingFlagsKHR chromaSubsampling ;VkVideoComponentBitDepthFlagsKHR lumaBitDepth ;VkVideoComponentBitDepthFlagsKHR chromaBitDepth ;} VkVideoProfileInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoCapabilityFlagsKHR flags ;uint64_t minBitstreamBufferOffsetAlignment ;uint64_t minBitstreamBufferSizeAlignment ;VkExtent2D pictureAccessGranularity ;VkExtent2D minCodedExtent ;VkExtent2D maxCodedExtent ;uint32_t maxDpbSlots ;uint32_t maxActiveReferencePictures ;VkExtensionProperties stdHeaderVersion ;} VkVideoCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryBindIndex ;VkMemoryRequirements memoryRequirements ;} VkVideoSessionMemoryRequirementsKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryBindIndex ;VkDeviceMemory memory ;uint64_t memoryOffset ;uint64_t memorySize ;} VkBindVideoSessionMemoryInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkOffset2D codedOffset ;VkExtent2D codedExtent ;uint32_t baseArrayLayer ;VkImageView imageViewBinding ;} VkVideoPictureResourceInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;int32_t slotIndex ;VkVideoPictureResourceInfoKHR* pPictureResource ;} VkVideoReferenceSlotInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoDecodeCapabilityFlagsKHR flags ;} VkVideoDecodeCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoDecodeUsageFlagsKHR videoUsageHints ;} VkVideoDecodeUsageInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoDecodeFlagsKHR flags ;VkBuffer srcBuffer ;uint64_t srcBufferOffset ;uint64_t srcBufferRange ;VkVideoPictureResourceInfoKHR dstPictureResource ;VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot ;uint32_t referenceSlotCount ;VkVideoReferenceSlotInfoKHR* pReferenceSlots ;} VkVideoDecodeInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t videoMaintenance1 ;} VkPhysicalDeviceVideoMaintenance1FeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkQueryPool queryPool ;uint32_t firstQuery ;uint32_t queryCount ;} VkVideoInlineQueryInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout ;} VkVideoDecodeH264ProfileInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* maxLevelIdc ;VkOffset2D fieldOffsetGranularity ;} VkVideoDecodeH264CapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoDecodeH264SessionParametersAddInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo ;} VkVideoDecodeH264SessionParametersCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pStdPictureInfo ;uint32_t sliceCount ;uint32_t* pSliceOffsets ;} VkVideoDecodeH264PictureInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoDecodeH264DpbSlotInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;} VkVideoDecodeH265ProfileInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* maxLevelIdc ;} VkVideoDecodeH265CapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdVPSCount ;void* pStdVPSs ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoDecodeH265SessionParametersAddInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdVPSCount ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo ;} VkVideoDecodeH265SessionParametersCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pStdPictureInfo ;uint32_t sliceSegmentCount ;uint32_t* pSliceSegmentOffsets ;} VkVideoDecodeH265PictureInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoDecodeH265DpbSlotInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t queueFamilyIndex ;VkVideoSessionCreateFlagsKHR flags ;void* pVideoProfile ;VkFormat pictureFormat ;VkExtent2D maxCodedExtent ;VkFormat referencePictureFormat ;uint32_t maxDpbSlots ;uint32_t maxActiveReferencePictures ;VkExtensionProperties* pStdHeaderVersion ;} VkVideoSessionCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoSessionParametersCreateFlagsKHR flags ;VkVideoSessionParametersKHR videoSessionParametersTemplate ;VkVideoSessionKHR videoSession ;} VkVideoSessionParametersCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t updateSequenceCount ;} VkVideoSessionParametersUpdateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoSessionParametersKHR videoSessionParameters ;} VkVideoEncodeSessionParametersGetInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasOverrides ;} VkVideoEncodeSessionParametersFeedbackInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoBeginCodingFlagsKHR flags ;VkVideoSessionKHR videoSession ;VkVideoSessionParametersKHR videoSessionParameters ;uint32_t referenceSlotCount ;VkVideoReferenceSlotInfoKHR* pReferenceSlots ;} VkVideoBeginCodingInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEndCodingFlagsKHR flags ;} VkVideoEndCodingInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoCodingControlFlagsKHR flags ;} VkVideoCodingControlInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeUsageFlagsKHR videoUsageHints ;VkVideoEncodeContentFlagsKHR videoContentHints ;VkVideoEncodeTuningModeKHR tuningMode ;} VkVideoEncodeUsageInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeFlagsKHR flags ;VkBuffer dstBuffer ;uint64_t dstBufferOffset ;uint64_t dstBufferRange ;VkVideoPictureResourceInfoKHR srcPictureResource ;VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot ;uint32_t referenceSlotCount ;VkVideoReferenceSlotInfoKHR* pReferenceSlots ;uint32_t precedingExternallyEncodedBytes ;} VkVideoEncodeInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags ;} VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t qualityLevel ;} VkVideoEncodeQualityLevelInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pVideoProfile ;uint32_t qualityLevel ;} VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode ;uint32_t preferredRateControlLayerCount ;} VkVideoEncodeQualityLevelPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeRateControlFlagsKHR flags ;VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode ;uint32_t layerCount ;void* pLayers ;uint32_t virtualBufferSizeInMs ;uint32_t initialVirtualBufferSizeInMs ;} VkVideoEncodeRateControlInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t averageBitrate ;uint64_t maxBitrate ;uint32_t frameRateNumerator ;uint32_t frameRateDenominator ;} VkVideoEncodeRateControlLayerInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeCapabilityFlagsKHR flags ;VkVideoEncodeRateControlModeFlagsKHR rateControlModes ;uint32_t maxRateControlLayers ;uint64_t maxBitrate ;uint32_t maxQualityLevels ;VkExtent2D encodeInputPictureGranularity ;VkVideoEncodeFeedbackFlagsKHR supportedEncodeFeedbackFlags ;} VkVideoEncodeCapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH264CapabilityFlagsKHR flags ;void* maxLevelIdc ;uint32_t maxSliceCount ;uint32_t maxPPictureL0ReferenceCount ;uint32_t maxBPictureL0ReferenceCount ;uint32_t maxL1ReferenceCount ;uint32_t maxTemporalLayerCount ;uint32_t expectDyadicTemporalLayerPattern ;int32_t minQp ;int32_t maxQp ;uint32_t prefersGopRemainingFrames ;uint32_t requiresGopRemainingFrames ;VkVideoEncodeH264StdFlagsKHR stdSyntaxFlags ;} VkVideoEncodeH264CapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH264RateControlFlagsKHR preferredRateControlFlags ;uint32_t preferredGopFrameCount ;uint32_t preferredIdrPeriod ;uint32_t preferredConsecutiveBFrameCount ;uint32_t preferredTemporalLayerCount ;void* preferredConstantQp ;uint32_t preferredMaxL0ReferenceCount ;uint32_t preferredMaxL1ReferenceCount ;uint32_t preferredStdEntropyCodingModeFlag ;} VkVideoEncodeH264QualityLevelPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMaxLevelIdc ;void* maxLevelIdc ;} VkVideoEncodeH264SessionCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoEncodeH264SessionParametersAddInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoEncodeH264SessionParametersAddInfoKHR* pParametersAddInfo ;} VkVideoEncodeH264SessionParametersCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t writeStdSPS ;uint32_t writeStdPPS ;uint32_t stdSPSId ;uint32_t stdPPSId ;} VkVideoEncodeH264SessionParametersGetInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasStdSPSOverrides ;uint32_t hasStdPPSOverrides ;} VkVideoEncodeH264SessionParametersFeedbackInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoEncodeH264DpbSlotInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t naluSliceEntryCount ;void* pNaluSliceEntries ;void* pStdPictureInfo ;uint32_t generatePrefixNalu ;} VkVideoEncodeH264PictureInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;} VkVideoEncodeH264ProfileInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;int32_t constantQp ;void* pStdSliceHeader ;} VkVideoEncodeH264NaluSliceInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH264RateControlFlagsKHR flags ;uint32_t gopFrameCount ;uint32_t idrPeriod ;uint32_t consecutiveBFrameCount ;uint32_t temporalLayerCount ;} VkVideoEncodeH264RateControlInfoKHR;
typedef struct {int32_t qpI ;int32_t qpP ;int32_t qpB ;} VkVideoEncodeH264QpKHR;
typedef struct {uint32_t frameISize ;uint32_t framePSize ;uint32_t frameBSize ;} VkVideoEncodeH264FrameSizeKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t useGopRemainingFrames ;uint32_t gopRemainingI ;uint32_t gopRemainingP ;uint32_t gopRemainingB ;} VkVideoEncodeH264GopRemainingFrameInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMinQp ;void* minQp ;uint32_t useMaxQp ;void* maxQp ;uint32_t useMaxFrameSize ;VkVideoEncodeH264FrameSizeKHR maxFrameSize ;} VkVideoEncodeH264RateControlLayerInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH265CapabilityFlagsKHR flags ;void* maxLevelIdc ;uint32_t maxSliceSegmentCount ;VkExtent2D maxTiles ;VkVideoEncodeH265CtbSizeFlagsKHR ctbSizes ;VkVideoEncodeH265TransformBlockSizeFlagsKHR transformBlockSizes ;uint32_t maxPPictureL0ReferenceCount ;uint32_t maxBPictureL0ReferenceCount ;uint32_t maxL1ReferenceCount ;uint32_t maxSubLayerCount ;uint32_t expectDyadicTemporalSubLayerPattern ;int32_t minQp ;int32_t maxQp ;uint32_t prefersGopRemainingFrames ;uint32_t requiresGopRemainingFrames ;VkVideoEncodeH265StdFlagsKHR stdSyntaxFlags ;} VkVideoEncodeH265CapabilitiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags ;uint32_t preferredGopFrameCount ;uint32_t preferredIdrPeriod ;uint32_t preferredConsecutiveBFrameCount ;uint32_t preferredSubLayerCount ;void* preferredConstantQp ;uint32_t preferredMaxL0ReferenceCount ;uint32_t preferredMaxL1ReferenceCount ;} VkVideoEncodeH265QualityLevelPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMaxLevelIdc ;void* maxLevelIdc ;} VkVideoEncodeH265SessionCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t stdVPSCount ;void* pStdVPSs ;uint32_t stdSPSCount ;void* pStdSPSs ;uint32_t stdPPSCount ;void* pStdPPSs ;} VkVideoEncodeH265SessionParametersAddInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxStdVPSCount ;uint32_t maxStdSPSCount ;uint32_t maxStdPPSCount ;VkVideoEncodeH265SessionParametersAddInfoKHR* pParametersAddInfo ;} VkVideoEncodeH265SessionParametersCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t writeStdVPS ;uint32_t writeStdSPS ;uint32_t writeStdPPS ;uint32_t stdVPSId ;uint32_t stdSPSId ;uint32_t stdPPSId ;} VkVideoEncodeH265SessionParametersGetInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasStdVPSOverrides ;uint32_t hasStdSPSOverrides ;uint32_t hasStdPPSOverrides ;} VkVideoEncodeH265SessionParametersFeedbackInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t naluSliceSegmentEntryCount ;void* pNaluSliceSegmentEntries ;void* pStdPictureInfo ;} VkVideoEncodeH265PictureInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;int32_t constantQp ;void* pStdSliceSegmentHeader ;} VkVideoEncodeH265NaluSliceSegmentInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkVideoEncodeH265RateControlFlagsKHR flags ;uint32_t gopFrameCount ;uint32_t idrPeriod ;uint32_t consecutiveBFrameCount ;uint32_t subLayerCount ;} VkVideoEncodeH265RateControlInfoKHR;
typedef struct {int32_t qpI ;int32_t qpP ;int32_t qpB ;} VkVideoEncodeH265QpKHR;
typedef struct {uint32_t frameISize ;uint32_t framePSize ;uint32_t frameBSize ;} VkVideoEncodeH265FrameSizeKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t useGopRemainingFrames ;uint32_t gopRemainingI ;uint32_t gopRemainingP ;uint32_t gopRemainingB ;} VkVideoEncodeH265GopRemainingFrameInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t useMinQp ;void* minQp ;uint32_t useMaxQp ;void* maxQp ;uint32_t useMaxFrameSize ;VkVideoEncodeH265FrameSizeKHR maxFrameSize ;} VkVideoEncodeH265RateControlLayerInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* stdProfileIdc ;} VkVideoEncodeH265ProfileInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;void* pStdReferenceInfo ;} VkVideoEncodeH265DpbSlotInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t inheritedViewportScissor2D ;} VkPhysicalDeviceInheritedViewportScissorFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewportScissor2D ;uint32_t viewportDepthCount ;VkViewport* pViewportDepths ;} VkCommandBufferInheritanceViewportScissorInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t ycbcr2plane444Formats ;} VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t provokingVertexLast ;uint32_t transformFeedbackPreservesProvokingVertex ;} VkPhysicalDeviceProvokingVertexFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t provokingVertexModePerPipeline ;uint32_t transformFeedbackPreservesTriangleFanProvokingVertex ;} VkPhysicalDeviceProvokingVertexPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkProvokingVertexModeEXT provokingVertexMode ;} VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;size_t dataSize ;void* pData ;} VkCuModuleCreateInfoNVX;
typedef struct {VkStructureType sType ;void* pNext ;VkCuModuleNVX module ;const char* pName ;} VkCuFunctionCreateInfoNVX;
typedef struct {VkStructureType sType ;void* pNext ;VkCuFunctionNVX function ;uint32_t gridDimX ;uint32_t gridDimY ;uint32_t gridDimZ ;uint32_t blockDimX ;uint32_t blockDimY ;uint32_t blockDimZ ;uint32_t sharedMemBytes ;size_t paramCount ;void* pParams ;size_t extraCount ;void* pExtras ;} VkCuLaunchInfoNVX;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorBuffer ;uint32_t descriptorBufferCaptureReplay ;uint32_t descriptorBufferImageLayoutIgnored ;uint32_t descriptorBufferPushDescriptors ;} VkPhysicalDeviceDescriptorBufferFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t combinedImageSamplerDescriptorSingleArray ;uint32_t bufferlessPushDescriptors ;uint32_t allowSamplerImageViewPostSubmitCreation ;uint64_t descriptorBufferOffsetAlignment ;uint32_t maxDescriptorBufferBindings ;uint32_t maxResourceDescriptorBufferBindings ;uint32_t maxSamplerDescriptorBufferBindings ;uint32_t maxEmbeddedImmutableSamplerBindings ;uint32_t maxEmbeddedImmutableSamplers ;size_t bufferCaptureReplayDescriptorDataSize ;size_t imageCaptureReplayDescriptorDataSize ;size_t imageViewCaptureReplayDescriptorDataSize ;size_t samplerCaptureReplayDescriptorDataSize ;size_t accelerationStructureCaptureReplayDescriptorDataSize ;size_t samplerDescriptorSize ;size_t combinedImageSamplerDescriptorSize ;size_t sampledImageDescriptorSize ;size_t storageImageDescriptorSize ;size_t uniformTexelBufferDescriptorSize ;size_t robustUniformTexelBufferDescriptorSize ;size_t storageTexelBufferDescriptorSize ;size_t robustStorageTexelBufferDescriptorSize ;size_t uniformBufferDescriptorSize ;size_t robustUniformBufferDescriptorSize ;size_t storageBufferDescriptorSize ;size_t robustStorageBufferDescriptorSize ;size_t inputAttachmentDescriptorSize ;size_t accelerationStructureDescriptorSize ;uint64_t maxSamplerDescriptorBufferRange ;uint64_t maxResourceDescriptorBufferRange ;uint64_t samplerDescriptorBufferAddressSpaceSize ;uint64_t resourceDescriptorBufferAddressSpaceSize ;uint64_t descriptorBufferAddressSpaceSize ;} VkPhysicalDeviceDescriptorBufferPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;size_t combinedImageSamplerDensityMapDescriptorSize ;} VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t address ;uint64_t range ;VkFormat format ;} VkDescriptorAddressInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t address ;VkBufferUsageFlags usage ;} VkDescriptorBufferBindingInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorType type ;void* data ;} VkDescriptorGetInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkBuffer buffer ;} VkBufferCaptureDescriptorDataInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;} VkImageCaptureDescriptorDataInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;} VkImageViewCaptureDescriptorDataInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSampler sampler ;} VkSamplerCaptureDescriptorDataInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkAccelerationStructureKHR accelerationStructure ;VkAccelerationStructureNV accelerationStructureNV ;} VkAccelerationStructureCaptureDescriptorDataInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* opaqueCaptureDescriptorData ;} VkOpaqueCaptureDescriptorDataCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderIntegerDotProduct ;} VkPhysicalDeviceShaderIntegerDotProductFeatures;
typedef struct {} VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t integerDotProduct8BitUnsignedAccelerated ;uint32_t integerDotProduct8BitSignedAccelerated ;uint32_t integerDotProduct8BitMixedSignednessAccelerated ;uint32_t integerDotProduct4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProduct4x8BitPackedSignedAccelerated ;uint32_t integerDotProduct4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProduct16BitUnsignedAccelerated ;uint32_t integerDotProduct16BitSignedAccelerated ;uint32_t integerDotProduct16BitMixedSignednessAccelerated ;uint32_t integerDotProduct32BitUnsignedAccelerated ;uint32_t integerDotProduct32BitSignedAccelerated ;uint32_t integerDotProduct32BitMixedSignednessAccelerated ;uint32_t integerDotProduct64BitUnsignedAccelerated ;uint32_t integerDotProduct64BitSignedAccelerated ;uint32_t integerDotProduct64BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitUnsignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitSignedAccelerated ;uint32_t integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated ;} VkPhysicalDeviceShaderIntegerDotProductProperties;
typedef struct {} VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t hasPrimary ;uint32_t hasRender ;int64_t primaryMajor ;int64_t primaryMinor ;int64_t renderMajor ;int64_t renderMinor ;} VkPhysicalDeviceDrmPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t fragmentShaderBarycentric ;} VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t triStripVertexOrderIndependentOfProvokingVertex ;} VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingMotionBlur ;uint32_t rayTracingMotionBlurPipelineTraceRaysIndirect ;} VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;void* vertexData ;} VkAccelerationStructureGeometryMotionTrianglesDataNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxInstances ;VkAccelerationStructureMotionInfoFlagsNV flags ;} VkAccelerationStructureMotionInfoNV;
typedef struct {float sx ;float a ;float b ;float pvx ;float sy ;float c ;float pvy ;float sz ;float pvz ;float qx ;float qy ;float qz ;float qw ;float tx ;float ty ;float tz ;} VkSRTDataNV;
typedef struct {VkSRTDataNV transformT0 ;VkSRTDataNV transformT1 ;uint32_t instanceCustomIndex :24;uint32_t mask :8;uint32_t instanceShaderBindingTableRecordOffset :24;void* flags ;uint64_t accelerationStructureReference ;} VkAccelerationStructureSRTMotionInstanceNV;
typedef struct {VkTransformMatrixKHR transformT0 ;VkTransformMatrixKHR transformT1 ;uint32_t instanceCustomIndex :24;uint32_t mask :8;uint32_t instanceShaderBindingTableRecordOffset :24;void* flags ;uint64_t accelerationStructureReference ;} VkAccelerationStructureMatrixMotionInstanceNV;
typedef struct {VkAccelerationStructureMotionInstanceTypeNV type ;VkAccelerationStructureMotionInstanceFlagsNV flags ;void* data ;} VkAccelerationStructureMotionInstanceNV;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;VkExternalMemoryHandleTypeFlagBits handleType ;} VkMemoryGetRemoteAddressInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferCollectionFUCHSIA collection ;uint32_t index ;} VkImportMemoryBufferCollectionFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferCollectionFUCHSIA collection ;uint32_t index ;} VkBufferCollectionImageCreateInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferCollectionFUCHSIA collection ;uint32_t index ;} VkBufferCollectionBufferCreateInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t collectionToken ;} VkBufferCollectionCreateInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t memoryTypeBits ;uint32_t bufferCount ;uint32_t createInfoIndex ;uint64_t sysmemPixelFormat ;VkFormatFeatureFlags formatFeatures ;void* sysmemColorSpaceIndex ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkBufferCollectionPropertiesFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkBufferCreateInfo createInfo ;VkFormatFeatureFlags requiredFormatFeatures ;void* bufferCollectionConstraints ;} VkBufferConstraintsInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t colorSpace ;} VkSysmemColorSpaceFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateInfo imageCreateInfo ;VkFormatFeatureFlags requiredFormatFeatures ;VkImageFormatConstraintsFlagsFUCHSIA flags ;uint64_t sysmemPixelFormat ;uint32_t colorSpaceCount ;void* pColorSpaces ;} VkImageFormatConstraintsInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t formatConstraintsCount ;VkImageFormatConstraintsInfoFUCHSIA* pFormatConstraints ;void* bufferCollectionConstraints ;VkImageConstraintsInfoFlagsFUCHSIA flags ;} VkImageConstraintsInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t minBufferCount ;uint32_t maxBufferCount ;uint32_t minBufferCountForCamping ;uint32_t minBufferCountForDedicatedSlack ;uint32_t minBufferCountForSharedSlack ;} VkBufferCollectionConstraintsInfoFUCHSIA;
typedef struct {VkStructureType sType ;void* pNext ;size_t dataSize ;void* pData ;} VkCudaModuleCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkCudaModuleNV module ;const char* pName ;} VkCudaFunctionCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkCudaFunctionNV function ;uint32_t gridDimX ;uint32_t gridDimY ;uint32_t gridDimZ ;uint32_t blockDimX ;uint32_t blockDimY ;uint32_t blockDimZ ;uint32_t sharedMemBytes ;size_t paramCount ;void* pParams ;size_t extraCount ;void* pExtras ;} VkCudaLaunchInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t formatRgba10x6WithoutYCbCrSampler ;} VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkFormatFeatureFlags2 linearTilingFeatures ;VkFormatFeatureFlags2 optimalTilingFeatures ;VkFormatFeatureFlags2 bufferFeatures ;} VkFormatProperties3;
typedef struct {} VkFormatProperties3KHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t drmFormatModifierCount ;void* pDrmFormatModifierProperties ;} VkDrmFormatModifierPropertiesList2EXT;
typedef struct {uint64_t drmFormatModifier ;uint32_t drmFormatModifierPlaneCount ;VkFormatFeatureFlags2 drmFormatModifierTilingFeatures ;} VkDrmFormatModifierProperties2EXT;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;uint64_t externalFormat ;VkFormatFeatureFlags2 formatFeatures ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkAndroidHardwareBufferFormatProperties2ANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachmentFormats ;VkFormat depthAttachmentFormat ;VkFormat stencilAttachmentFormat ;} VkPipelineRenderingCreateInfo;
typedef struct {} VkPipelineRenderingCreateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderingFlags flags ;VkRect2D renderArea ;uint32_t layerCount ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachments ;void* pDepthAttachment ;void* pStencilAttachment ;} VkRenderingInfo;
typedef struct {} VkRenderingInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkImageLayout imageLayout ;VkResolveModeFlagBits resolveMode ;VkImageView resolveImageView ;VkImageLayout resolveImageLayout ;VkAttachmentLoadOp loadOp ;VkAttachmentStoreOp storeOp ;void* clearValue ;} VkRenderingAttachmentInfo;
typedef struct {} VkRenderingAttachmentInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkImageLayout imageLayout ;VkExtent2D shadingRateAttachmentTexelSize ;} VkRenderingFragmentShadingRateAttachmentInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageView imageView ;VkImageLayout imageLayout ;} VkRenderingFragmentDensityMapAttachmentInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t dynamicRendering ;} VkPhysicalDeviceDynamicRenderingFeatures;
typedef struct {} VkPhysicalDeviceDynamicRenderingFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderingFlags flags ;uint32_t viewMask ;uint32_t colorAttachmentCount ;void* pColorAttachmentFormats ;VkFormat depthAttachmentFormat ;VkFormat stencilAttachmentFormat ;VkSampleCountFlagBits rasterizationSamples ;} VkCommandBufferInheritanceRenderingInfo;
typedef struct {} VkCommandBufferInheritanceRenderingInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t colorAttachmentCount ;void* pColorAttachmentSamples ;VkSampleCountFlagBits depthStencilAttachmentSamples ;} VkAttachmentSampleCountInfoAMD;
typedef struct {} VkAttachmentSampleCountInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t perViewAttributes ;uint32_t perViewAttributesPositionXOnly ;} VkMultiviewPerViewAttributesInfoNVX;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t minLod ;} VkPhysicalDeviceImageViewMinLodFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;float minLod ;} VkImageViewMinLodCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rasterizationOrderColorAttachmentAccess ;uint32_t rasterizationOrderDepthAttachmentAccess ;uint32_t rasterizationOrderStencilAttachmentAccess ;} VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
typedef struct {} VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t linearColorAttachment ;} VkPhysicalDeviceLinearColorAttachmentFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t graphicsPipelineLibrary ;} VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t graphicsPipelineLibraryFastLinking ;uint32_t graphicsPipelineLibraryIndependentInterpolationDecoration ;} VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkGraphicsPipelineLibraryFlagsEXT flags ;} VkGraphicsPipelineLibraryCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorSetHostMapping ;} VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorSetLayout descriptorSetLayout ;uint32_t binding ;} VkDescriptorSetBindingReferenceVALVE;
typedef struct {VkStructureType sType ;void* pNext ;size_t descriptorOffset ;uint32_t descriptorSize ;} VkDescriptorSetLayoutHostMappingInfoVALVE;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t nestedCommandBuffer ;uint32_t nestedCommandBufferRendering ;uint32_t nestedCommandBufferSimultaneousUse ;} VkPhysicalDeviceNestedCommandBufferFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxCommandBufferNestingLevel ;} VkPhysicalDeviceNestedCommandBufferPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderModuleIdentifier ;} VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint8_t shaderModuleIdentifierAlgorithmUUID [16];} VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t identifierSize ;void* pIdentifier ;} VkPipelineShaderStageModuleIdentifierCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t identifierSize ;void* identifier ;} VkShaderModuleIdentifierEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageCompressionFlagsEXT flags ;uint32_t compressionControlPlaneCount ;void* pFixedRateFlags ;} VkImageCompressionControlEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageCompressionControl ;} VkPhysicalDeviceImageCompressionControlFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageCompressionFlagsEXT imageCompressionFlags ;VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags ;} VkImageCompressionPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t imageCompressionControlSwapchain ;} VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageSubresource imageSubresource ;} VkImageSubresource2KHR;
typedef struct {} VkImageSubresource2EXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSubresourceLayout subresourceLayout ;} VkSubresourceLayout2KHR;
typedef struct {} VkSubresourceLayout2EXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t disallowMerging ;} VkRenderPassCreationControlEXT;
typedef struct {uint32_t postMergeSubpassCount ;} VkRenderPassCreationFeedbackInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback ;} VkRenderPassCreationFeedbackCreateInfoEXT;
typedef struct {VkSubpassMergeStatusEXT subpassMergeStatus ;char description [256];uint32_t postMergeIndex ;} VkRenderPassSubpassFeedbackInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback ;} VkRenderPassSubpassFeedbackCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t subpassMergeFeedback ;} VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkMicromapTypeEXT type ;VkBuildMicromapFlagsEXT flags ;VkBuildMicromapModeEXT mode ;VkMicromapEXT dstMicromap ;uint32_t usageCountsCount ;void* pUsageCounts ;void* ppUsageCounts ;void* data ;void* scratchData ;void* triangleArray ;uint64_t triangleArrayStride ;} VkMicromapBuildInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkMicromapCreateFlagsEXT createFlags ;VkBuffer buffer ;uint64_t offset ;uint64_t size ;VkMicromapTypeEXT type ;uint64_t deviceAddress ;} VkMicromapCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* pVersionData ;} VkMicromapVersionInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkMicromapEXT src ;VkMicromapEXT dst ;VkCopyMicromapModeEXT mode ;} VkCopyMicromapInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkMicromapEXT src ;void* dst ;VkCopyMicromapModeEXT mode ;} VkCopyMicromapToMemoryInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* src ;VkMicromapEXT dst ;VkCopyMicromapModeEXT mode ;} VkCopyMemoryToMicromapInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t micromapSize ;uint64_t buildScratchSize ;uint32_t discardable ;} VkMicromapBuildSizesInfoEXT;
typedef struct {uint32_t count ;uint32_t subdivisionLevel ;uint32_t format ;} VkMicromapUsageEXT;
typedef struct {uint32_t dataOffset ;uint16_t subdivisionLevel ;uint16_t format ;} VkMicromapTriangleEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t micromap ;uint32_t micromapCaptureReplay ;uint32_t micromapHostCommands ;} VkPhysicalDeviceOpacityMicromapFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxOpacity2StateSubdivisionLevel ;uint32_t maxOpacity4StateSubdivisionLevel ;} VkPhysicalDeviceOpacityMicromapPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkIndexType indexType ;void* indexBuffer ;uint64_t indexStride ;uint32_t baseTriangle ;uint32_t usageCountsCount ;void* pUsageCounts ;void* ppUsageCounts ;VkMicromapEXT micromap ;} VkAccelerationStructureTrianglesOpacityMicromapEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t displacementMicromap ;} VkPhysicalDeviceDisplacementMicromapFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxDisplacementMicromapSubdivisionLevel ;} VkPhysicalDeviceDisplacementMicromapPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat displacementBiasAndScaleFormat ;VkFormat displacementVectorFormat ;void* displacementBiasAndScaleBuffer ;uint64_t displacementBiasAndScaleStride ;void* displacementVectorBuffer ;uint64_t displacementVectorStride ;void* displacedMicromapPrimitiveFlags ;uint64_t displacedMicromapPrimitiveFlagsStride ;VkIndexType indexType ;void* indexBuffer ;uint64_t indexStride ;uint32_t baseTriangle ;uint32_t usageCountsCount ;void* pUsageCounts ;void* ppUsageCounts ;VkMicromapEXT micromap ;} VkAccelerationStructureTrianglesDisplacementMicromapNV;
typedef struct {VkStructureType sType ;void* pNext ;uint8_t pipelineIdentifier [16];} VkPipelinePropertiesIdentifierEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelinePropertiesIdentifier ;} VkPhysicalDevicePipelinePropertiesFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderEarlyAndLateFragmentTests ;} VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t acquireUnmodifiedMemory ;} VkExternalMemoryAcquireUnmodifiedEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkExportMetalObjectTypeFlagBitsEXT exportObjectType ;} VkExportMetalObjectCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;} VkExportMetalObjectsInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* mtlDevice ;} VkExportMetalDeviceInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkQueue queue ;void* mtlCommandQueue ;} VkExportMetalCommandQueueInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceMemory memory ;void* mtlBuffer ;} VkExportMetalBufferInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* mtlBuffer ;} VkImportMetalBufferInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;VkImageView imageView ;VkBufferView bufferView ;VkImageAspectFlagBits plane ;void* mtlTexture ;} VkExportMetalTextureInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImageAspectFlagBits plane ;void* mtlTexture ;} VkImportMetalTextureInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkImage image ;void* ioSurface ;} VkExportMetalIOSurfaceInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* ioSurface ;} VkImportMetalIOSurfaceInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore semaphore ;VkEvent event ;void* mtlSharedEvent ;} VkExportMetalSharedEventInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* mtlSharedEvent ;} VkImportMetalSharedEventInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t nonSeamlessCubeMap ;} VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineRobustness ;} VkPhysicalDevicePipelineRobustnessFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRobustnessBufferBehaviorEXT storageBuffers ;VkPipelineRobustnessBufferBehaviorEXT uniformBuffers ;VkPipelineRobustnessBufferBehaviorEXT vertexInputs ;VkPipelineRobustnessImageBehaviorEXT images ;} VkPipelineRobustnessCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers ;VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers ;VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs ;VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages ;} VkPhysicalDevicePipelineRobustnessPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkOffset2D filterCenter ;VkExtent2D filterSize ;uint32_t numPhases ;} VkImageViewSampleWeightCreateInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t textureSampleWeighted ;uint32_t textureBoxFilter ;uint32_t textureBlockMatch ;} VkPhysicalDeviceImageProcessingFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxWeightFilterPhases ;VkExtent2D maxWeightFilterDimension ;VkExtent2D maxBlockMatchRegion ;VkExtent2D maxBoxFilterBlockSize ;} VkPhysicalDeviceImageProcessingPropertiesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t tileProperties ;} VkPhysicalDeviceTilePropertiesFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent3D tileSize ;VkExtent2D apronSize ;VkOffset2D origin ;} VkTilePropertiesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t amigoProfiling ;} VkPhysicalDeviceAmigoProfilingFeaturesSEC;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t firstDrawTimestamp ;uint64_t swapBufferTimestamp ;} VkAmigoProfilingSubmitInfoSEC;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t attachmentFeedbackLoopLayout ;} VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthClampZeroOne ;} VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t reportAddressBinding ;} VkPhysicalDeviceAddressBindingReportFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDeviceAddressBindingFlagsEXT flags ;uint64_t baseAddress ;uint64_t size ;VkDeviceAddressBindingTypeEXT bindingType ;} VkDeviceAddressBindingCallbackDataEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t opticalFlow ;} VkPhysicalDeviceOpticalFlowFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes ;VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes ;uint32_t hintSupported ;uint32_t costSupported ;uint32_t bidirectionalFlowSupported ;uint32_t globalFlowSupported ;uint32_t minWidth ;uint32_t minHeight ;uint32_t maxWidth ;uint32_t maxHeight ;uint32_t maxNumRegionsOfInterest ;} VkPhysicalDeviceOpticalFlowPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkOpticalFlowUsageFlagsNV usage ;} VkOpticalFlowImageFormatInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;} VkOpticalFlowImageFormatPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t width ;uint32_t height ;VkFormat imageFormat ;VkFormat flowVectorFormat ;VkFormat costFormat ;VkOpticalFlowGridSizeFlagsNV outputGridSize ;VkOpticalFlowGridSizeFlagsNV hintGridSize ;VkOpticalFlowPerformanceLevelNV performanceLevel ;VkOpticalFlowSessionCreateFlagsNV flags ;} VkOpticalFlowSessionCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t id ;uint32_t size ;void* pPrivateData ;} VkOpticalFlowSessionCreatePrivateDataInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkOpticalFlowExecuteFlagsNV flags ;uint32_t regionCount ;VkRect2D* pRegions ;} VkOpticalFlowExecuteInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t deviceFault ;uint32_t deviceFaultVendorBinary ;} VkPhysicalDeviceFaultFeaturesEXT;
typedef struct {VkDeviceFaultAddressTypeEXT addressType ;uint64_t reportedAddress ;uint64_t addressPrecision ;} VkDeviceFaultAddressInfoEXT;
typedef struct {char description [256];uint64_t vendorFaultCode ;uint64_t vendorFaultData ;} VkDeviceFaultVendorInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t addressInfoCount ;uint32_t vendorInfoCount ;uint64_t vendorBinarySize ;} VkDeviceFaultCountsEXT;
typedef struct {VkStructureType sType ;void* pNext ;char description [256];VkDeviceFaultAddressInfoEXT* pAddressInfos ;VkDeviceFaultVendorInfoEXT* pVendorInfos ;void* pVendorBinaryData ;} VkDeviceFaultInfoEXT;
typedef struct {uint32_t headerSize ;VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion ;uint32_t vendorID ;uint32_t deviceID ;uint32_t driverVersion ;uint8_t pipelineCacheUUID [16];uint32_t applicationNameOffset ;uint32_t applicationVersion ;uint32_t engineNameOffset ;uint32_t engineVersion ;uint32_t apiVersion ;} VkDeviceFaultVendorBinaryHeaderVersionOneEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pipelineLibraryGroupHandles ;} VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;float depthBiasConstantFactor ;float depthBiasClamp ;float depthBiasSlopeFactor ;} VkDepthBiasInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkDepthBiasRepresentationEXT depthBiasRepresentation ;uint32_t depthBiasExact ;} VkDepthBiasRepresentationInfoEXT;
typedef struct {uint64_t srcAddress ;uint64_t dstAddress ;uint64_t compressedSize ;uint64_t decompressedSize ;VkMemoryDecompressionMethodFlagsNV decompressionMethod ;} VkDecompressMemoryRegionNV;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t shaderCoreMask ;uint32_t shaderCoreCount ;uint32_t shaderWarpsPerCore ;} VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderCoreBuiltins ;} VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;
typedef struct {VkStructureType sType ;void* pNext ;VkFrameBoundaryFlagsEXT flags ;uint64_t frameID ;uint32_t imageCount ;VkImage* pImages ;uint32_t bufferCount ;VkBuffer* pBuffers ;uint64_t tagName ;size_t tagSize ;void* pTag ;} VkFrameBoundaryEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t frameBoundary ;} VkPhysicalDeviceFrameBoundaryFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t dynamicRenderingUnusedAttachments ;} VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPresentModeKHR presentMode ;} VkSurfacePresentModeEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPresentScalingFlagsEXT supportedPresentScaling ;VkPresentGravityFlagsEXT supportedPresentGravityX ;VkPresentGravityFlagsEXT supportedPresentGravityY ;VkExtent2D minScaledImageExtent ;VkExtent2D maxScaledImageExtent ;} VkSurfacePresentScalingCapabilitiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentModeCount ;void* pPresentModes ;} VkSurfacePresentModeCompatibilityEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainMaintenance1 ;} VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;VkFence* pFences ;} VkSwapchainPresentFenceInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentModeCount ;void* pPresentModes ;} VkSwapchainPresentModesCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t swapchainCount ;void* pPresentModes ;} VkSwapchainPresentModeInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkPresentScalingFlagsEXT scalingBehavior ;VkPresentGravityFlagsEXT presentGravityX ;VkPresentGravityFlagsEXT presentGravityY ;} VkSwapchainPresentScalingCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkSwapchainKHR swapchain ;uint32_t imageIndexCount ;uint32_t* pImageIndices ;} VkReleaseSwapchainImagesInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t depthBiasControl ;uint32_t leastRepresentableValueForceUnormRepresentation ;uint32_t floatRepresentation ;uint32_t depthBiasExact ;} VkPhysicalDeviceDepthBiasControlFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingInvocationReorder ;} VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint ;} VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t extendedSparseAddressSpace ;} VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t extendedSparseAddressSpaceSize ;VkImageUsageFlags extendedSparseImageUsageFlags ;VkBufferUsageFlags extendedSparseBufferUsageFlags ;} VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkDirectDriverLoadingFlagsLUNARG flags ;void* pfnGetInstanceProcAddr ;} VkDirectDriverLoadingInfoLUNARG;
typedef struct {VkStructureType sType ;void* pNext ;VkDirectDriverLoadingModeLUNARG mode ;uint32_t driverCount ;VkDirectDriverLoadingInfoLUNARG* pDrivers ;} VkDirectDriverLoadingListLUNARG;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiviewPerViewViewports ;} VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t rayTracingPositionFetch ;} VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkImageCreateInfo* pCreateInfo ;VkImageSubresource2KHR* pSubresource ;} VkDeviceImageSubresourceInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t pixelRate ;uint32_t texelRate ;uint32_t fmaRate ;} VkPhysicalDeviceShaderCorePropertiesARM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t multiviewPerViewRenderAreas ;} VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t perViewRenderAreaCount ;VkRect2D* pPerViewRenderAreas ;} VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;void* pQueriedLowLatencyData ;} VkQueryLowLatencySupportNV;
typedef struct {VkStructureType sType ;void* pNext ;VkMemoryMapFlags flags ;VkDeviceMemory memory ;uint64_t offset ;uint64_t size ;} VkMemoryMapInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkMemoryUnmapFlagsKHR flags ;VkDeviceMemory memory ;} VkMemoryUnmapInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderObject ;} VkPhysicalDeviceShaderObjectFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint8_t shaderBinaryUUID [16];uint32_t shaderBinaryVersion ;} VkPhysicalDeviceShaderObjectPropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderCreateFlagsEXT flags ;VkShaderStageFlagBits stage ;VkShaderStageFlags nextStage ;VkShaderCodeTypeEXT codeType ;size_t codeSize ;void* pCode ;const char* pName ;uint32_t setLayoutCount ;VkDescriptorSetLayout* pSetLayouts ;uint32_t pushConstantRangeCount ;VkPushConstantRange* pPushConstantRanges ;VkSpecializationInfo* pSpecializationInfo ;} VkShaderCreateInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderTileImageColorReadAccess ;uint32_t shaderTileImageDepthReadAccess ;uint32_t shaderTileImageStencilReadAccess ;} VkPhysicalDeviceShaderTileImageFeaturesEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderTileImageCoherentReadAccelerated ;uint32_t shaderTileImageReadSampleFromPixelRateInvocation ;uint32_t shaderTileImageReadFromHelperInvocation ;} VkPhysicalDeviceShaderTileImagePropertiesEXT;
typedef struct {VkStructureType sType ;void* pNext ;void* buffer ;} VkImportScreenBufferInfoQNX;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t allocationSize ;uint32_t memoryTypeBits ;} VkScreenBufferPropertiesQNX;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat format ;uint64_t externalFormat ;uint64_t screenUsage ;VkFormatFeatureFlags formatFeatures ;VkComponentMapping samplerYcbcrConversionComponents ;VkSamplerYcbcrModelConversion suggestedYcbcrModel ;VkSamplerYcbcrRange suggestedYcbcrRange ;VkChromaLocation suggestedXChromaOffset ;VkChromaLocation suggestedYChromaOffset ;} VkScreenBufferFormatPropertiesQNX;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t externalFormat ;} VkExternalFormatQNX;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t screenBufferImport ;} VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t cooperativeMatrix ;uint32_t cooperativeMatrixRobustBufferAccess ;} VkPhysicalDeviceCooperativeMatrixFeaturesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t MSize ;uint32_t NSize ;uint32_t KSize ;VkComponentTypeKHR AType ;VkComponentTypeKHR BType ;VkComponentTypeKHR CType ;VkComponentTypeKHR ResultType ;uint32_t saturatingAccumulation ;VkScopeKHR scope ;} VkCooperativeMatrixPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags cooperativeMatrixSupportedStages ;} VkPhysicalDeviceCooperativeMatrixPropertiesKHR;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t maxExecutionGraphDepth ;uint32_t maxExecutionGraphShaderOutputNodes ;uint32_t maxExecutionGraphShaderPayloadSize ;uint32_t maxExecutionGraphShaderPayloadCount ;uint32_t executionGraphDispatchAddressAlignment ;} VkPhysicalDeviceShaderEnqueuePropertiesAMDX;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderEnqueue ;} VkPhysicalDeviceShaderEnqueueFeaturesAMDX;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineCreateFlags flags ;uint32_t stageCount ;VkPipelineShaderStageCreateInfo* pStages ;void* pLibraryInfo ;VkPipelineLayout layout ;VkPipeline basePipelineHandle ;int32_t basePipelineIndex ;} VkExecutionGraphPipelineCreateInfoAMDX;
typedef struct {VkStructureType sType ;void* pNext ;const char* pName ;uint32_t index ;} VkPipelineShaderStageNodeCreateInfoAMDX;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t size ;} VkExecutionGraphPipelineScratchSizeAMDX;
typedef struct {uint32_t nodeIndex ;uint32_t payloadCount ;void* payloads ;uint64_t payloadStride ;} VkDispatchGraphInfoAMDX;
typedef struct {uint32_t count ;void* infos ;uint64_t stride ;} VkDispatchGraphCountInfoAMDX;
typedef struct {VkStructureType sType ;void* pNext ;void* pResult ;} VkBindMemoryStatusKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags stageFlags ;VkPipelineLayout layout ;uint32_t firstSet ;uint32_t descriptorSetCount ;VkDescriptorSet* pDescriptorSets ;uint32_t dynamicOffsetCount ;uint32_t* pDynamicOffsets ;} VkBindDescriptorSetsInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkPipelineLayout layout ;VkShaderStageFlags stageFlags ;uint32_t offset ;uint32_t size ;void* pValues ;} VkPushConstantsInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags stageFlags ;VkPipelineLayout layout ;uint32_t set ;uint32_t descriptorWriteCount ;VkWriteDescriptorSet* pDescriptorWrites ;} VkPushDescriptorSetInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkDescriptorUpdateTemplate descriptorUpdateTemplate ;VkPipelineLayout layout ;uint32_t set ;void* pData ;} VkPushDescriptorSetWithTemplateInfoKHR;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags stageFlags ;VkPipelineLayout layout ;uint32_t firstSet ;uint32_t setCount ;uint32_t* pBufferIndices ;void* pOffsets ;} VkSetDescriptorBufferOffsetsInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;VkShaderStageFlags stageFlags ;VkPipelineLayout layout ;uint32_t set ;} VkBindDescriptorBufferEmbeddedSamplersInfoEXT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t cubicRangeClamp ;} VkPhysicalDeviceCubicClampFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t ycbcrDegamma ;} VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t enableYDegamma ;uint32_t enableCbCrDegamma ;} VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t selectableCubicWeights ;} VkPhysicalDeviceCubicWeightsFeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkCubicFilterWeightsQCOM cubicWeights ;} VkSamplerCubicWeightsCreateInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkCubicFilterWeightsQCOM cubicWeights ;} VkBlitImageCubicWeightsInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t textureBlockMatch2 ;} VkPhysicalDeviceImageProcessing2FeaturesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D maxBlockMatchWindow ;} VkPhysicalDeviceImageProcessing2PropertiesQCOM;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D windowExtent ;VkBlockMatchWindowCompareModeQCOM windowCompareMode ;} VkSamplerBlockMatchWindowCreateInfoQCOM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t descriptorPoolOverallocation ;} VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;VkLayeredDriverUnderlyingApiMSFT underlyingAPI ;} VkPhysicalDeviceLayeredDriverPropertiesMSFT;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t perStageDescriptorSet ;uint32_t dynamicPipelineLayout ;} VkPhysicalDevicePerStageDescriptorSetFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t externalFormatResolve ;} VkPhysicalDeviceExternalFormatResolveFeaturesANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t nullColorAttachmentWithExternalFormatResolve ;VkChromaLocation externalFormatResolveChromaOffsetX ;VkChromaLocation externalFormatResolveChromaOffsetY ;} VkPhysicalDeviceExternalFormatResolvePropertiesANDROID;
typedef struct {VkStructureType sType ;void* pNext ;VkFormat colorAttachmentFormat ;} VkAndroidHardwareBufferFormatResolvePropertiesANDROID;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t lowLatencyMode ;uint32_t lowLatencyBoost ;uint32_t minimumIntervalUs ;} VkLatencySleepModeInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;VkSemaphore signalSemaphore ;uint64_t value ;} VkLatencySleepInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t presentID ;VkLatencyMarkerNV marker ;} VkSetLatencyMarkerInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t timingCount ;void* pTimings ;} VkGetLatencyMarkerInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t presentID ;uint64_t inputSampleTimeUs ;uint64_t simStartTimeUs ;uint64_t simEndTimeUs ;uint64_t renderSubmitStartTimeUs ;uint64_t renderSubmitEndTimeUs ;uint64_t presentStartTimeUs ;uint64_t presentEndTimeUs ;uint64_t driverStartTimeUs ;uint64_t driverEndTimeUs ;uint64_t osRenderQueueStartTimeUs ;uint64_t osRenderQueueEndTimeUs ;uint64_t gpuRenderStartTimeUs ;uint64_t gpuRenderEndTimeUs ;} VkLatencyTimingsFrameReportNV;
typedef struct {VkStructureType sType ;void* pNext ;VkOutOfBandQueueTypeNV queueType ;} VkOutOfBandQueueTypeInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint64_t presentID ;} VkLatencySubmissionPresentIdNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t latencyModeEnable ;} VkSwapchainLatencyCreateInfoNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t presentModeCount ;void* pPresentModes ;} VkLatencySurfaceCapabilitiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t cudaKernelLaunchFeatures ;} VkPhysicalDeviceCudaKernelLaunchFeaturesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t computeCapabilityMinor ;uint32_t computeCapabilityMajor ;} VkPhysicalDeviceCudaKernelLaunchPropertiesNV;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t shaderCoreCount ;} VkDeviceQueueShaderCoreControlCreateInfoARM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t schedulingControls ;} VkPhysicalDeviceSchedulingControlsFeaturesARM;
typedef struct {VkStructureType sType ;void* pNext ;VkPhysicalDeviceSchedulingControlsFlagsARM schedulingControlsFlags ;} VkPhysicalDeviceSchedulingControlsPropertiesARM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t relaxedLineRasterization ;} VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t renderPassStriped ;} VkPhysicalDeviceRenderPassStripedFeaturesARM;
typedef struct {VkStructureType sType ;void* pNext ;VkExtent2D renderPassStripeGranularity ;uint32_t maxRenderPassStripes ;} VkPhysicalDeviceRenderPassStripedPropertiesARM;
typedef struct {VkStructureType sType ;void* pNext ;VkRect2D stripeArea ;} VkRenderPassStripeInfoARM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t stripeInfoCount ;VkRenderPassStripeInfoARM* pStripeInfos ;} VkRenderPassStripeBeginInfoARM;
typedef struct {VkStructureType sType ;void* pNext ;uint32_t stripeSemaphoreInfoCount ;VkSemaphoreSubmitInfo* pStripeSemaphoreInfos ;} VkRenderPassStripeSubmitInfoARM;
typedef VkResult (*PFN_PHP_vkCreateInstance)(VkInstanceCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkInstance* pInstance);
typedef void (*PFN_PHP_vkDestroyInstance)(VkInstance instance,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkEnumeratePhysicalDevices)(VkInstance instance,uint32_t* pPhysicalDeviceCount,VkPhysicalDevice* pPhysicalDevices);
typedef void* (*PFN_PHP_vkGetDeviceProcAddr)(VkDevice device,const char* pName);
typedef void* (*PFN_PHP_vkGetInstanceProcAddr)(VkInstance instance,const char* pName);
typedef void (*PFN_PHP_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceProperties* pProperties);
typedef void (*PFN_PHP_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice,uint32_t* pQueueFamilyPropertyCount,VkQueueFamilyProperties* pQueueFamilyProperties);
typedef void (*PFN_PHP_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceMemoryProperties* pMemoryProperties);
typedef void (*PFN_PHP_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice,void* pFeatures);
typedef void (*PFN_PHP_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice,VkFormat format,VkFormatProperties* pFormatProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkImageTiling tiling,VkImageUsageFlags usage,VkImageCreateFlags flags,VkImageFormatProperties* pImageFormatProperties);
typedef VkResult (*PFN_PHP_vkCreateDevice)(VkPhysicalDevice physicalDevice,VkDeviceCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDevice* pDevice);
typedef void (*PFN_PHP_vkDestroyDevice)(VkDevice device,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkEnumerateInstanceVersion)(uint32_t* pApiVersion);
typedef VkResult (*PFN_PHP_vkEnumerateInstanceLayerProperties)(uint32_t* pPropertyCount,VkLayerProperties* pProperties);
typedef VkResult (*PFN_PHP_vkEnumerateInstanceExtensionProperties)(const char* pLayerName,uint32_t* pPropertyCount,VkExtensionProperties* pProperties);
typedef VkResult (*PFN_PHP_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkLayerProperties* pProperties);
typedef VkResult (*PFN_PHP_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice,const char* pLayerName,uint32_t* pPropertyCount,VkExtensionProperties* pProperties);
typedef void (*PFN_PHP_vkGetDeviceQueue)(VkDevice device,uint32_t queueFamilyIndex,uint32_t queueIndex,VkQueue* pQueue);
typedef VkResult (*PFN_PHP_vkQueueSubmit)(VkQueue queue,uint32_t submitCount,VkSubmitInfo* pSubmits,VkFence fence);
typedef VkResult (*PFN_PHP_vkQueueWaitIdle)(VkQueue queue);
typedef VkResult (*PFN_PHP_vkDeviceWaitIdle)(VkDevice device);
typedef VkResult (*PFN_PHP_vkAllocateMemory)(VkDevice device,VkMemoryAllocateInfo* pAllocateInfo,VkAllocationCallbacks* pAllocator,VkDeviceMemory* pMemory);
typedef void (*PFN_PHP_vkFreeMemory)(VkDevice device,VkDeviceMemory memory,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkMapMemory)(VkDevice device,VkDeviceMemory memory,uint64_t offset,uint64_t size,VkMemoryMapFlags flags,void* ppData);
typedef void (*PFN_PHP_vkUnmapMemory)(VkDevice device,VkDeviceMemory memory);
typedef VkResult (*PFN_PHP_vkFlushMappedMemoryRanges)(VkDevice device,uint32_t memoryRangeCount,VkMappedMemoryRange* pMemoryRanges);
typedef VkResult (*PFN_PHP_vkInvalidateMappedMemoryRanges)(VkDevice device,uint32_t memoryRangeCount,VkMappedMemoryRange* pMemoryRanges);
typedef void (*PFN_PHP_vkGetDeviceMemoryCommitment)(VkDevice device,VkDeviceMemory memory,void* pCommittedMemoryInBytes);
typedef void (*PFN_PHP_vkGetBufferMemoryRequirements)(VkDevice device,VkBuffer buffer,VkMemoryRequirements* pMemoryRequirements);
typedef VkResult (*PFN_PHP_vkBindBufferMemory)(VkDevice device,VkBuffer buffer,VkDeviceMemory memory,uint64_t memoryOffset);
typedef void (*PFN_PHP_vkGetImageMemoryRequirements)(VkDevice device,VkImage image,VkMemoryRequirements* pMemoryRequirements);
typedef VkResult (*PFN_PHP_vkBindImageMemory)(VkDevice device,VkImage image,VkDeviceMemory memory,uint64_t memoryOffset);
typedef void (*PFN_PHP_vkGetImageSparseMemoryRequirements)(VkDevice device,VkImage image,uint32_t* pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
typedef void (*PFN_PHP_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkSampleCountFlagBits samples,VkImageUsageFlags usage,VkImageTiling tiling,uint32_t* pPropertyCount,VkSparseImageFormatProperties* pProperties);
typedef VkResult (*PFN_PHP_vkQueueBindSparse)(VkQueue queue,uint32_t bindInfoCount,VkBindSparseInfo* pBindInfo,VkFence fence);
typedef VkResult (*PFN_PHP_vkCreateFence)(VkDevice device,VkFenceCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkFence* pFence);
typedef void (*PFN_PHP_vkDestroyFence)(VkDevice device,VkFence fence,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkResetFences)(VkDevice device,uint32_t fenceCount,VkFence* pFences);
typedef VkResult (*PFN_PHP_vkGetFenceStatus)(VkDevice device,VkFence fence);
typedef VkResult (*PFN_PHP_vkWaitForFences)(VkDevice device,uint32_t fenceCount,VkFence* pFences,uint32_t waitAll,uint64_t timeout);
typedef VkResult (*PFN_PHP_vkCreateSemaphore)(VkDevice device,VkSemaphoreCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSemaphore* pSemaphore);
typedef void (*PFN_PHP_vkDestroySemaphore)(VkDevice device,VkSemaphore semaphore,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateEvent)(VkDevice device,VkEventCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkEvent* pEvent);
typedef void (*PFN_PHP_vkDestroyEvent)(VkDevice device,VkEvent event,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetEventStatus)(VkDevice device,VkEvent event);
typedef VkResult (*PFN_PHP_vkSetEvent)(VkDevice device,VkEvent event);
typedef VkResult (*PFN_PHP_vkResetEvent)(VkDevice device,VkEvent event);
typedef VkResult (*PFN_PHP_vkCreateQueryPool)(VkDevice device,VkQueryPoolCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkQueryPool* pQueryPool);
typedef void (*PFN_PHP_vkDestroyQueryPool)(VkDevice device,VkQueryPool queryPool,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetQueryPoolResults)(VkDevice device,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount,size_t dataSize,void* pData,uint64_t stride,VkQueryResultFlags flags);
typedef void (*PFN_PHP_vkResetQueryPool)(VkDevice device,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount);
typedef VkResult (*PFN_PHP_vkCreateBuffer)(VkDevice device,VkBufferCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkBuffer* pBuffer);
typedef void (*PFN_PHP_vkDestroyBuffer)(VkDevice device,VkBuffer buffer,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateBufferView)(VkDevice device,VkBufferViewCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkBufferView* pView);
typedef void (*PFN_PHP_vkDestroyBufferView)(VkDevice device,VkBufferView bufferView,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateImage)(VkDevice device,VkImageCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkImage* pImage);
typedef void (*PFN_PHP_vkDestroyImage)(VkDevice device,VkImage image,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkGetImageSubresourceLayout)(VkDevice device,VkImage image,VkImageSubresource* pSubresource,VkSubresourceLayout* pLayout);
typedef VkResult (*PFN_PHP_vkCreateImageView)(VkDevice device,VkImageViewCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkImageView* pView);
typedef void (*PFN_PHP_vkDestroyImageView)(VkDevice device,VkImageView imageView,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateShaderModule)(VkDevice device,VkShaderModuleCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkShaderModule* pShaderModule);
typedef void (*PFN_PHP_vkDestroyShaderModule)(VkDevice device,VkShaderModule shaderModule,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreatePipelineCache)(VkDevice device,VkPipelineCacheCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkPipelineCache* pPipelineCache);
typedef void (*PFN_PHP_vkDestroyPipelineCache)(VkDevice device,VkPipelineCache pipelineCache,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetPipelineCacheData)(VkDevice device,VkPipelineCache pipelineCache,size_t* pDataSize,void* pData);
typedef VkResult (*PFN_PHP_vkMergePipelineCaches)(VkDevice device,VkPipelineCache dstCache,uint32_t srcCacheCount,VkPipelineCache* pSrcCaches);
typedef VkResult (*PFN_PHP_vkCreateGraphicsPipelines)(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkGraphicsPipelineCreateInfo* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);
typedef VkResult (*PFN_PHP_vkCreateComputePipelines)(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkComputePipelineCreateInfo* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);
typedef VkResult (*PFN_PHP_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)(VkDevice device,VkRenderPass renderpass,VkExtent2D* pMaxWorkgroupSize);
typedef void (*PFN_PHP_vkDestroyPipeline)(VkDevice device,VkPipeline pipeline,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreatePipelineLayout)(VkDevice device,VkPipelineLayoutCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkPipelineLayout* pPipelineLayout);
typedef void (*PFN_PHP_vkDestroyPipelineLayout)(VkDevice device,VkPipelineLayout pipelineLayout,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateSampler)(VkDevice device,VkSamplerCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSampler* pSampler);
typedef void (*PFN_PHP_vkDestroySampler)(VkDevice device,VkSampler sampler,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateDescriptorSetLayout)(VkDevice device,VkDescriptorSetLayoutCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDescriptorSetLayout* pSetLayout);
typedef void (*PFN_PHP_vkDestroyDescriptorSetLayout)(VkDevice device,VkDescriptorSetLayout descriptorSetLayout,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateDescriptorPool)(VkDevice device,VkDescriptorPoolCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDescriptorPool* pDescriptorPool);
typedef void (*PFN_PHP_vkDestroyDescriptorPool)(VkDevice device,VkDescriptorPool descriptorPool,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkResetDescriptorPool)(VkDevice device,VkDescriptorPool descriptorPool,VkDescriptorPoolResetFlags flags);
typedef VkResult (*PFN_PHP_vkAllocateDescriptorSets)(VkDevice device,VkDescriptorSetAllocateInfo* pAllocateInfo,VkDescriptorSet* pDescriptorSets);
typedef VkResult (*PFN_PHP_vkFreeDescriptorSets)(VkDevice device,VkDescriptorPool descriptorPool,uint32_t descriptorSetCount,VkDescriptorSet* pDescriptorSets);
typedef void (*PFN_PHP_vkUpdateDescriptorSets)(VkDevice device,uint32_t descriptorWriteCount,VkWriteDescriptorSet* pDescriptorWrites,uint32_t descriptorCopyCount,VkCopyDescriptorSet* pDescriptorCopies);
typedef VkResult (*PFN_PHP_vkCreateFramebuffer)(VkDevice device,VkFramebufferCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkFramebuffer* pFramebuffer);
typedef void (*PFN_PHP_vkDestroyFramebuffer)(VkDevice device,VkFramebuffer framebuffer,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateRenderPass)(VkDevice device,VkRenderPassCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkRenderPass* pRenderPass);
typedef void (*PFN_PHP_vkDestroyRenderPass)(VkDevice device,VkRenderPass renderPass,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkGetRenderAreaGranularity)(VkDevice device,VkRenderPass renderPass,VkExtent2D* pGranularity);
typedef void (*PFN_PHP_vkGetRenderingAreaGranularityKHR)(VkDevice device,VkRenderingAreaInfoKHR* pRenderingAreaInfo,VkExtent2D* pGranularity);
typedef VkResult (*PFN_PHP_vkCreateCommandPool)(VkDevice device,VkCommandPoolCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCommandPool* pCommandPool);
typedef void (*PFN_PHP_vkDestroyCommandPool)(VkDevice device,VkCommandPool commandPool,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkResetCommandPool)(VkDevice device,VkCommandPool commandPool,VkCommandPoolResetFlags flags);
typedef VkResult (*PFN_PHP_vkAllocateCommandBuffers)(VkDevice device,VkCommandBufferAllocateInfo* pAllocateInfo,VkCommandBuffer* pCommandBuffers);
typedef void (*PFN_PHP_vkFreeCommandBuffers)(VkDevice device,VkCommandPool commandPool,uint32_t commandBufferCount,VkCommandBuffer* pCommandBuffers);
typedef VkResult (*PFN_PHP_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer,VkCommandBufferBeginInfo* pBeginInfo);
typedef VkResult (*PFN_PHP_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);
typedef VkResult (*PFN_PHP_vkResetCommandBuffer)(VkCommandBuffer commandBuffer,VkCommandBufferResetFlags flags);
typedef void (*PFN_PHP_vkCmdBindPipeline)(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipeline pipeline);
typedef void (*PFN_PHP_vkCmdSetAttachmentFeedbackLoopEnableEXT)(VkCommandBuffer commandBuffer,VkImageAspectFlags aspectMask);
typedef void (*PFN_PHP_vkCmdSetViewport)(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkViewport* pViewports);
typedef void (*PFN_PHP_vkCmdSetScissor)(VkCommandBuffer commandBuffer,uint32_t firstScissor,uint32_t scissorCount,VkRect2D* pScissors);
typedef void (*PFN_PHP_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer,float lineWidth);
typedef void (*PFN_PHP_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer,float depthBiasConstantFactor,float depthBiasClamp,float depthBiasSlopeFactor);
typedef void (*PFN_PHP_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer,void* blendConstants);
typedef void (*PFN_PHP_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer,float minDepthBounds,float maxDepthBounds);
typedef void (*PFN_PHP_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t compareMask);
typedef void (*PFN_PHP_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t writeMask);
typedef void (*PFN_PHP_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t reference);
typedef void (*PFN_PHP_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t firstSet,uint32_t descriptorSetCount,VkDescriptorSet* pDescriptorSets,uint32_t dynamicOffsetCount,uint32_t* pDynamicOffsets);
typedef void (*PFN_PHP_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkIndexType indexType);
typedef void (*PFN_PHP_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer,uint32_t firstBinding,uint32_t bindingCount,VkBuffer* pBuffers,void* pOffsets);
typedef void (*PFN_PHP_vkCmdDraw)(VkCommandBuffer commandBuffer,uint32_t vertexCount,uint32_t instanceCount,uint32_t firstVertex,uint32_t firstInstance);
typedef void (*PFN_PHP_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer,uint32_t indexCount,uint32_t instanceCount,uint32_t firstIndex,int32_t vertexOffset,uint32_t firstInstance);
typedef void (*PFN_PHP_vkCmdDrawMultiEXT)(VkCommandBuffer commandBuffer,uint32_t drawCount,VkMultiDrawInfoEXT* pVertexInfo,uint32_t instanceCount,uint32_t firstInstance,uint32_t stride);
typedef void (*PFN_PHP_vkCmdDrawMultiIndexedEXT)(VkCommandBuffer commandBuffer,uint32_t drawCount,VkMultiDrawIndexedInfoEXT* pIndexInfo,uint32_t instanceCount,uint32_t firstInstance,uint32_t stride,void* pVertexOffset);
typedef void (*PFN_PHP_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdDispatch)(VkCommandBuffer commandBuffer,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);
typedef void (*PFN_PHP_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset);
typedef void (*PFN_PHP_vkCmdSubpassShadingHUAWEI)(VkCommandBuffer commandBuffer);
typedef void (*PFN_PHP_vkCmdDrawClusterHUAWEI)(VkCommandBuffer commandBuffer,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);
typedef void (*PFN_PHP_vkCmdDrawClusterIndirectHUAWEI)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset);
typedef void (*PFN_PHP_vkCmdUpdatePipelineIndirectBufferNV)(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipeline pipeline);
typedef void (*PFN_PHP_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer,VkBuffer srcBuffer,VkBuffer dstBuffer,uint32_t regionCount,VkBufferCopy* pRegions);
typedef void (*PFN_PHP_vkCmdCopyImage)(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkImageCopy* pRegions);
typedef void (*PFN_PHP_vkCmdBlitImage)(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkImageBlit* pRegions,VkFilter filter);
typedef void (*PFN_PHP_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer,VkBuffer srcBuffer,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkBufferImageCopy* pRegions);
typedef void (*PFN_PHP_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkBuffer dstBuffer,uint32_t regionCount,VkBufferImageCopy* pRegions);
typedef void (*PFN_PHP_vkCmdCopyMemoryIndirectNV)(VkCommandBuffer commandBuffer,uint64_t copyBufferAddress,uint32_t copyCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdCopyMemoryToImageIndirectNV)(VkCommandBuffer commandBuffer,uint64_t copyBufferAddress,uint32_t copyCount,uint32_t stride,VkImage dstImage,VkImageLayout dstImageLayout,VkImageSubresourceLayers* pImageSubresources);
typedef void (*PFN_PHP_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer,VkBuffer dstBuffer,uint64_t dstOffset,uint64_t dataSize,void* pData);
typedef void (*PFN_PHP_vkCmdFillBuffer)(VkCommandBuffer commandBuffer,VkBuffer dstBuffer,uint64_t dstOffset,uint64_t size,uint32_t data);
typedef void (*PFN_PHP_vkCmdClearColorImage)(VkCommandBuffer commandBuffer,VkImage image,VkImageLayout imageLayout,void* pColor,uint32_t rangeCount,VkImageSubresourceRange* pRanges);
typedef void (*PFN_PHP_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer,VkImage image,VkImageLayout imageLayout,VkClearDepthStencilValue* pDepthStencil,uint32_t rangeCount,VkImageSubresourceRange* pRanges);
typedef void (*PFN_PHP_vkCmdClearAttachments)(VkCommandBuffer commandBuffer,uint32_t attachmentCount,VkClearAttachment* pAttachments,uint32_t rectCount,VkClearRect* pRects);
typedef void (*PFN_PHP_vkCmdResolveImage)(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,VkImageResolve* pRegions);
typedef void (*PFN_PHP_vkCmdSetEvent)(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags stageMask);
typedef void (*PFN_PHP_vkCmdResetEvent)(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags stageMask);
typedef void (*PFN_PHP_vkCmdWaitEvents)(VkCommandBuffer commandBuffer,uint32_t eventCount,VkEvent* pEvents,VkPipelineStageFlags srcStageMask,VkPipelineStageFlags dstStageMask,uint32_t memoryBarrierCount,VkMemoryBarrier* pMemoryBarriers,uint32_t bufferMemoryBarrierCount,VkBufferMemoryBarrier* pBufferMemoryBarriers,uint32_t imageMemoryBarrierCount,VkImageMemoryBarrier* pImageMemoryBarriers);
typedef void (*PFN_PHP_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer,VkPipelineStageFlags srcStageMask,VkPipelineStageFlags dstStageMask,VkDependencyFlags dependencyFlags,uint32_t memoryBarrierCount,VkMemoryBarrier* pMemoryBarriers,uint32_t bufferMemoryBarrierCount,VkBufferMemoryBarrier* pBufferMemoryBarriers,uint32_t imageMemoryBarrierCount,VkImageMemoryBarrier* pImageMemoryBarriers);
typedef void (*PFN_PHP_vkCmdBeginQuery)(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query,VkQueryControlFlags flags);
typedef void (*PFN_PHP_vkCmdEndQuery)(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query);
typedef void (*PFN_PHP_vkCmdBeginConditionalRenderingEXT)(VkCommandBuffer commandBuffer,VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);
typedef void (*PFN_PHP_vkCmdEndConditionalRenderingEXT)(VkCommandBuffer commandBuffer);
typedef void (*PFN_PHP_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount);
typedef void (*PFN_PHP_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer,VkPipelineStageFlagBits pipelineStage,VkQueryPool queryPool,uint32_t query);
typedef void (*PFN_PHP_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount,VkBuffer dstBuffer,uint64_t dstOffset,uint64_t stride,VkQueryResultFlags flags);
typedef void (*PFN_PHP_vkCmdPushConstants)(VkCommandBuffer commandBuffer,VkPipelineLayout layout,VkShaderStageFlags stageFlags,uint32_t offset,uint32_t size,void* pValues);
typedef void (*PFN_PHP_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer,VkRenderPassBeginInfo* pRenderPassBegin,VkSubpassContents contents);
typedef void (*PFN_PHP_vkCmdNextSubpass)(VkCommandBuffer commandBuffer,VkSubpassContents contents);
typedef void (*PFN_PHP_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);
typedef void (*PFN_PHP_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer,uint32_t commandBufferCount,VkCommandBuffer* pCommandBuffers);
typedef VkResult (*PFN_PHP_vkCreateAndroidSurfaceKHR)(VkInstance instance,VkAndroidSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPropertiesKHR* pProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPlanePropertiesKHR* pProperties);
typedef VkResult (*PFN_PHP_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice,uint32_t planeIndex,uint32_t* pDisplayCount,VkDisplayKHR* pDisplays);
typedef VkResult (*PFN_PHP_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice,VkDisplayKHR display,uint32_t* pPropertyCount,VkDisplayModePropertiesKHR* pProperties);
typedef VkResult (*PFN_PHP_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice,VkDisplayKHR display,VkDisplayModeCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDisplayModeKHR* pMode);
typedef VkResult (*PFN_PHP_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice,VkDisplayModeKHR mode,uint32_t planeIndex,VkDisplayPlaneCapabilitiesKHR* pCapabilities);
typedef VkResult (*PFN_PHP_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance,VkDisplaySurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkCreateSharedSwapchainsKHR)(VkDevice device,uint32_t swapchainCount,VkSwapchainCreateInfoKHR* pCreateInfos,VkAllocationCallbacks* pAllocator,VkSwapchainKHR* pSwapchains);
typedef void (*PFN_PHP_vkDestroySurfaceKHR)(VkInstance instance,VkSurfaceKHR surface,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,VkSurfaceKHR surface,void* pSupported);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pSurfaceFormatCount,VkSurfaceFormatKHR* pSurfaceFormats);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pPresentModeCount,void* pPresentModes);
typedef VkResult (*PFN_PHP_vkCreateSwapchainKHR)(VkDevice device,VkSwapchainCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSwapchainKHR* pSwapchain);
typedef void (*PFN_PHP_vkDestroySwapchainKHR)(VkDevice device,VkSwapchainKHR swapchain,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetSwapchainImagesKHR)(VkDevice device,VkSwapchainKHR swapchain,uint32_t* pSwapchainImageCount,VkImage* pSwapchainImages);
typedef VkResult (*PFN_PHP_vkAcquireNextImageKHR)(VkDevice device,VkSwapchainKHR swapchain,uint64_t timeout,VkSemaphore semaphore,VkFence fence,uint32_t* pImageIndex);
typedef VkResult (*PFN_PHP_vkQueuePresentKHR)(VkQueue queue,VkPresentInfoKHR* pPresentInfo);
typedef VkResult (*PFN_PHP_vkCreateViSurfaceNN)(VkInstance instance,VkViSurfaceCreateInfoNN* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkCreateWaylandSurfaceKHR)(VkInstance instance,VkWaylandSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef uint32_t (*PFN_PHP_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* display);
typedef VkResult (*PFN_PHP_vkCreateWin32SurfaceKHR)(VkInstance instance,VkWin32SurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef uint32_t (*PFN_PHP_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex);
typedef VkResult (*PFN_PHP_vkCreateXlibSurfaceKHR)(VkInstance instance,VkXlibSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef uint32_t (*PFN_PHP_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* dpy,uint32_t visualID);
typedef VkResult (*PFN_PHP_vkCreateXcbSurfaceKHR)(VkInstance instance,VkXcbSurfaceCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef uint32_t (*PFN_PHP_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* connection,void* visual_id);
typedef VkResult (*PFN_PHP_vkCreateDirectFBSurfaceEXT)(VkInstance instance,VkDirectFBSurfaceCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef uint32_t (*PFN_PHP_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* dfb);
typedef VkResult (*PFN_PHP_vkCreateImagePipeSurfaceFUCHSIA)(VkInstance instance,VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkCreateStreamDescriptorSurfaceGGP)(VkInstance instance,VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkCreateScreenSurfaceQNX)(VkInstance instance,VkScreenSurfaceCreateInfoQNX* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef uint32_t (*PFN_PHP_vkGetPhysicalDeviceScreenPresentationSupportQNX)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,void* window);
typedef VkResult (*PFN_PHP_vkCreateDebugReportCallbackEXT)(VkInstance instance,VkDebugReportCallbackCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDebugReportCallbackEXT* pCallback);
typedef void (*PFN_PHP_vkDestroyDebugReportCallbackEXT)(VkInstance instance,VkDebugReportCallbackEXT callback,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkDebugReportMessageEXT)(VkInstance instance,VkDebugReportFlagsEXT flags,VkDebugReportObjectTypeEXT objectType,uint64_t object,size_t location,int32_t messageCode,const char* pLayerPrefix,const char* pMessage);
typedef VkResult (*PFN_PHP_vkDebugMarkerSetObjectNameEXT)(VkDevice device,VkDebugMarkerObjectNameInfoEXT* pNameInfo);
typedef VkResult (*PFN_PHP_vkDebugMarkerSetObjectTagEXT)(VkDevice device,VkDebugMarkerObjectTagInfoEXT* pTagInfo);
typedef void (*PFN_PHP_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer,VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
typedef void (*PFN_PHP_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer);
typedef void (*PFN_PHP_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer,VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkImageTiling tiling,VkImageUsageFlags usage,VkImageCreateFlags flags,VkExternalMemoryHandleTypeFlagsNV externalHandleType,VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);
typedef VkResult (*PFN_PHP_vkGetMemoryWin32HandleNV)(VkDevice device,VkDeviceMemory memory,VkExternalMemoryHandleTypeFlagsNV handleType,void* pHandle);
typedef void (*PFN_PHP_vkCmdExecuteGeneratedCommandsNV)(VkCommandBuffer commandBuffer,uint32_t isPreprocessed,VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);
typedef void (*PFN_PHP_vkCmdPreprocessGeneratedCommandsNV)(VkCommandBuffer commandBuffer,VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);
typedef void (*PFN_PHP_vkCmdBindPipelineShaderGroupNV)(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipeline pipeline,uint32_t groupIndex);
typedef void (*PFN_PHP_vkGetGeneratedCommandsMemoryRequirementsNV)(VkDevice device,VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,VkMemoryRequirements2* pMemoryRequirements);
typedef VkResult (*PFN_PHP_vkCreateIndirectCommandsLayoutNV)(VkDevice device,VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkIndirectCommandsLayoutNV* pIndirectCommandsLayout);
typedef void (*PFN_PHP_vkDestroyIndirectCommandsLayoutNV)(VkDevice device,VkIndirectCommandsLayoutNV indirectCommandsLayout,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkGetPhysicalDeviceFeatures2)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceFeatures2* pFeatures);
typedef void (*PFN_PHP_vkGetPhysicalDeviceProperties2)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceProperties2* pProperties);
typedef void (*PFN_PHP_vkGetPhysicalDeviceFormatProperties2)(VkPhysicalDevice physicalDevice,VkFormat format,VkFormatProperties2* pFormatProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceImageFormatProperties2)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,VkImageFormatProperties2* pImageFormatProperties);
typedef void (*PFN_PHP_vkGetPhysicalDeviceQueueFamilyProperties2)(VkPhysicalDevice physicalDevice,uint32_t* pQueueFamilyPropertyCount,VkQueueFamilyProperties2* pQueueFamilyProperties);
typedef void (*PFN_PHP_vkGetPhysicalDeviceMemoryProperties2)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
typedef void (*PFN_PHP_vkGetPhysicalDeviceSparseImageFormatProperties2)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,uint32_t* pPropertyCount,VkSparseImageFormatProperties2* pProperties);
typedef void (*PFN_PHP_vkCmdPushDescriptorSetKHR)(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t set,uint32_t descriptorWriteCount,VkWriteDescriptorSet* pDescriptorWrites);
typedef void (*PFN_PHP_vkTrimCommandPool)(VkDevice device,VkCommandPool commandPool,VkCommandPoolTrimFlags flags);
typedef void (*PFN_PHP_vkGetPhysicalDeviceExternalBufferProperties)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,VkExternalBufferProperties* pExternalBufferProperties);
typedef VkResult (*PFN_PHP_vkGetMemoryWin32HandleKHR)(VkDevice device,VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,void* pHandle);
typedef VkResult (*PFN_PHP_vkGetMemoryWin32HandlePropertiesKHR)(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,void* handle,VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);
typedef VkResult (*PFN_PHP_vkGetMemoryFdKHR)(VkDevice device,VkMemoryGetFdInfoKHR* pGetFdInfo,int* pFd);
typedef VkResult (*PFN_PHP_vkGetMemoryFdPropertiesKHR)(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,int16_t fd,VkMemoryFdPropertiesKHR* pMemoryFdProperties);
typedef VkResult (*PFN_PHP_vkGetMemoryZirconHandleFUCHSIA)(VkDevice device,VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,void* pZirconHandle);
typedef VkResult (*PFN_PHP_vkGetMemoryZirconHandlePropertiesFUCHSIA)(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,uint32_t zirconHandle,VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties);
typedef VkResult (*PFN_PHP_vkGetMemoryRemoteAddressNV)(VkDevice device,VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,void* pAddress);
typedef VkResult (*PFN_PHP_vkGetMemorySciBufNV)(VkDevice device,VkMemoryGetSciBufInfoNV* pGetSciBufInfo,void* pHandle);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV)(VkPhysicalDevice physicalDevice,VkExternalMemoryHandleTypeFlagBits handleType,void* handle,VkMemorySciBufPropertiesNV* pMemorySciBufProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSciBufAttributesNV)(VkPhysicalDevice physicalDevice,void* pAttributes);
typedef void (*PFN_PHP_vkGetPhysicalDeviceExternalSemaphoreProperties)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
typedef VkResult (*PFN_PHP_vkGetSemaphoreWin32HandleKHR)(VkDevice device,VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,void* pHandle);
typedef VkResult (*PFN_PHP_vkImportSemaphoreWin32HandleKHR)(VkDevice device,VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);
typedef VkResult (*PFN_PHP_vkGetSemaphoreFdKHR)(VkDevice device,VkSemaphoreGetFdInfoKHR* pGetFdInfo,int* pFd);
typedef VkResult (*PFN_PHP_vkImportSemaphoreFdKHR)(VkDevice device,VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);
typedef VkResult (*PFN_PHP_vkGetSemaphoreZirconHandleFUCHSIA)(VkDevice device,VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,void* pZirconHandle);
typedef VkResult (*PFN_PHP_vkImportSemaphoreZirconHandleFUCHSIA)(VkDevice device,VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo);
typedef void (*PFN_PHP_vkGetPhysicalDeviceExternalFenceProperties)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,VkExternalFenceProperties* pExternalFenceProperties);
typedef VkResult (*PFN_PHP_vkGetFenceWin32HandleKHR)(VkDevice device,VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,void* pHandle);
typedef VkResult (*PFN_PHP_vkImportFenceWin32HandleKHR)(VkDevice device,VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);
typedef VkResult (*PFN_PHP_vkGetFenceFdKHR)(VkDevice device,VkFenceGetFdInfoKHR* pGetFdInfo,int* pFd);
typedef VkResult (*PFN_PHP_vkImportFenceFdKHR)(VkDevice device,VkImportFenceFdInfoKHR* pImportFenceFdInfo);
typedef VkResult (*PFN_PHP_vkGetFenceSciSyncFenceNV)(VkDevice device,VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo,void* pHandle);
typedef VkResult (*PFN_PHP_vkGetFenceSciSyncObjNV)(VkDevice device,VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo,void* pHandle);
typedef VkResult (*PFN_PHP_vkImportFenceSciSyncFenceNV)(VkDevice device,VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo);
typedef VkResult (*PFN_PHP_vkImportFenceSciSyncObjNV)(VkDevice device,VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo);
typedef VkResult (*PFN_PHP_vkGetSemaphoreSciSyncObjNV)(VkDevice device,VkSemaphoreGetSciSyncInfoNV* pGetSciSyncInfo,void* pHandle);
typedef VkResult (*PFN_PHP_vkImportSemaphoreSciSyncObjNV)(VkDevice device,VkImportSemaphoreSciSyncInfoNV* pImportSemaphoreSciSyncInfo);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSciSyncAttributesNV)(VkPhysicalDevice physicalDevice,VkSciSyncAttributesInfoNV* pSciSyncAttributesInfo,void* pAttributes);
typedef VkResult (*PFN_PHP_vkCreateSemaphoreSciSyncPoolNV)(VkDevice device,VkSemaphoreSciSyncPoolCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSemaphoreSciSyncPoolNV* pSemaphorePool);
typedef void (*PFN_PHP_vkDestroySemaphoreSciSyncPoolNV)(VkDevice device,VkSemaphoreSciSyncPoolNV semaphorePool,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkReleaseDisplayEXT)(VkPhysicalDevice physicalDevice,VkDisplayKHR display);
typedef VkResult (*PFN_PHP_vkAcquireXlibDisplayEXT)(VkPhysicalDevice physicalDevice,void* dpy,VkDisplayKHR display);
typedef VkResult (*PFN_PHP_vkGetRandROutputDisplayEXT)(VkPhysicalDevice physicalDevice,void* dpy,void* rrOutput,VkDisplayKHR* pDisplay);
typedef VkResult (*PFN_PHP_vkAcquireWinrtDisplayNV)(VkPhysicalDevice physicalDevice,VkDisplayKHR display);
typedef VkResult (*PFN_PHP_vkGetWinrtDisplayNV)(VkPhysicalDevice physicalDevice,uint32_t deviceRelativeId,VkDisplayKHR* pDisplay);
typedef VkResult (*PFN_PHP_vkDisplayPowerControlEXT)(VkDevice device,VkDisplayKHR display,VkDisplayPowerInfoEXT* pDisplayPowerInfo);
typedef VkResult (*PFN_PHP_vkRegisterDeviceEventEXT)(VkDevice device,VkDeviceEventInfoEXT* pDeviceEventInfo,VkAllocationCallbacks* pAllocator,VkFence* pFence);
typedef VkResult (*PFN_PHP_vkRegisterDisplayEventEXT)(VkDevice device,VkDisplayKHR display,VkDisplayEventInfoEXT* pDisplayEventInfo,VkAllocationCallbacks* pAllocator,VkFence* pFence);
typedef VkResult (*PFN_PHP_vkGetSwapchainCounterEXT)(VkDevice device,VkSwapchainKHR swapchain,VkSurfaceCounterFlagBitsEXT counter,uint64_t* pCounterValue);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfaceCapabilities2EXT)(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,VkSurfaceCapabilities2EXT* pSurfaceCapabilities);
typedef VkResult (*PFN_PHP_vkEnumeratePhysicalDeviceGroups)(VkInstance instance,uint32_t* pPhysicalDeviceGroupCount,VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
typedef void (*PFN_PHP_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice device,uint32_t heapIndex,uint32_t localDeviceIndex,uint32_t remoteDeviceIndex,void* pPeerMemoryFeatures);
typedef VkResult (*PFN_PHP_vkBindBufferMemory2)(VkDevice device,uint32_t bindInfoCount,VkBindBufferMemoryInfo* pBindInfos);
typedef VkResult (*PFN_PHP_vkBindImageMemory2)(VkDevice device,uint32_t bindInfoCount,VkBindImageMemoryInfo* pBindInfos);
typedef void (*PFN_PHP_vkCmdSetDeviceMask)(VkCommandBuffer commandBuffer,uint32_t deviceMask);
typedef VkResult (*PFN_PHP_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice device,VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);
typedef VkResult (*PFN_PHP_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice device,VkSurfaceKHR surface,void* pModes);
typedef VkResult (*PFN_PHP_vkAcquireNextImage2KHR)(VkDevice device,VkAcquireNextImageInfoKHR* pAcquireInfo,uint32_t* pImageIndex);
typedef void (*PFN_PHP_vkCmdDispatchBase)(VkCommandBuffer commandBuffer,uint32_t baseGroupX,uint32_t baseGroupY,uint32_t baseGroupZ,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);
typedef VkResult (*PFN_PHP_vkGetPhysicalDevicePresentRectanglesKHR)(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pRectCount,VkRect2D* pRects);
typedef VkResult (*PFN_PHP_vkCreateDescriptorUpdateTemplate)(VkDevice device,VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
typedef void (*PFN_PHP_vkDestroyDescriptorUpdateTemplate)(VkDevice device,VkDescriptorUpdateTemplate descriptorUpdateTemplate,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkUpdateDescriptorSetWithTemplate)(VkDevice device,VkDescriptorSet descriptorSet,VkDescriptorUpdateTemplate descriptorUpdateTemplate,void* pData);
typedef void (*PFN_PHP_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer commandBuffer,VkDescriptorUpdateTemplate descriptorUpdateTemplate,VkPipelineLayout layout,uint32_t set,void* pData);
typedef void (*PFN_PHP_vkSetHdrMetadataEXT)(VkDevice device,uint32_t swapchainCount,VkSwapchainKHR* pSwapchains,VkHdrMetadataEXT* pMetadata);
typedef VkResult (*PFN_PHP_vkGetSwapchainStatusKHR)(VkDevice device,VkSwapchainKHR swapchain);
typedef VkResult (*PFN_PHP_vkGetRefreshCycleDurationGOOGLE)(VkDevice device,VkSwapchainKHR swapchain,VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);
typedef VkResult (*PFN_PHP_vkGetPastPresentationTimingGOOGLE)(VkDevice device,VkSwapchainKHR swapchain,uint32_t* pPresentationTimingCount,VkPastPresentationTimingGOOGLE* pPresentationTimings);
typedef VkResult (*PFN_PHP_vkCreateIOSSurfaceMVK)(VkInstance instance,VkIOSSurfaceCreateInfoMVK* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkCreateMacOSSurfaceMVK)(VkInstance instance,VkMacOSSurfaceCreateInfoMVK* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkCreateMetalSurfaceEXT)(VkInstance instance,VkMetalSurfaceCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef void (*PFN_PHP_vkCmdSetViewportWScalingNV)(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkViewportWScalingNV* pViewportWScalings);
typedef void (*PFN_PHP_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer commandBuffer,uint32_t firstDiscardRectangle,uint32_t discardRectangleCount,VkRect2D* pDiscardRectangles);
typedef void (*PFN_PHP_vkCmdSetDiscardRectangleEnableEXT)(VkCommandBuffer commandBuffer,uint32_t discardRectangleEnable);
typedef void (*PFN_PHP_vkCmdSetDiscardRectangleModeEXT)(VkCommandBuffer commandBuffer,VkDiscardRectangleModeEXT discardRectangleMode);
typedef void (*PFN_PHP_vkCmdSetSampleLocationsEXT)(VkCommandBuffer commandBuffer,VkSampleLocationsInfoEXT* pSampleLocationsInfo);
typedef void (*PFN_PHP_vkGetPhysicalDeviceMultisamplePropertiesEXT)(VkPhysicalDevice physicalDevice,VkSampleCountFlagBits samples,VkMultisamplePropertiesEXT* pMultisampleProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfaceCapabilities2KHR)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,VkSurfaceCapabilities2KHR* pSurfaceCapabilities);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,uint32_t* pSurfaceFormatCount,VkSurfaceFormat2KHR* pSurfaceFormats);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceDisplayProperties2KHR)(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayProperties2KHR* pProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPlaneProperties2KHR* pProperties);
typedef VkResult (*PFN_PHP_vkGetDisplayModeProperties2KHR)(VkPhysicalDevice physicalDevice,VkDisplayKHR display,uint32_t* pPropertyCount,VkDisplayModeProperties2KHR* pProperties);
typedef VkResult (*PFN_PHP_vkGetDisplayPlaneCapabilities2KHR)(VkPhysicalDevice physicalDevice,VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,VkDisplayPlaneCapabilities2KHR* pCapabilities);
typedef void (*PFN_PHP_vkGetBufferMemoryRequirements2)(VkDevice device,VkBufferMemoryRequirementsInfo2* pInfo,VkMemoryRequirements2* pMemoryRequirements);
typedef void (*PFN_PHP_vkGetImageMemoryRequirements2)(VkDevice device,VkImageMemoryRequirementsInfo2* pInfo,VkMemoryRequirements2* pMemoryRequirements);
typedef void (*PFN_PHP_vkGetImageSparseMemoryRequirements2)(VkDevice device,VkImageSparseMemoryRequirementsInfo2* pInfo,uint32_t* pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
typedef void (*PFN_PHP_vkGetDeviceBufferMemoryRequirements)(VkDevice device,VkDeviceBufferMemoryRequirements* pInfo,VkMemoryRequirements2* pMemoryRequirements);
typedef void (*PFN_PHP_vkGetDeviceImageMemoryRequirements)(VkDevice device,VkDeviceImageMemoryRequirements* pInfo,VkMemoryRequirements2* pMemoryRequirements);
typedef void (*PFN_PHP_vkGetDeviceImageSparseMemoryRequirements)(VkDevice device,VkDeviceImageMemoryRequirements* pInfo,uint32_t* pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
typedef VkResult (*PFN_PHP_vkCreateSamplerYcbcrConversion)(VkDevice device,VkSamplerYcbcrConversionCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSamplerYcbcrConversion* pYcbcrConversion);
typedef void (*PFN_PHP_vkDestroySamplerYcbcrConversion)(VkDevice device,VkSamplerYcbcrConversion ycbcrConversion,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkGetDeviceQueue2)(VkDevice device,VkDeviceQueueInfo2* pQueueInfo,VkQueue* pQueue);
typedef VkResult (*PFN_PHP_vkCreateValidationCacheEXT)(VkDevice device,VkValidationCacheCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkValidationCacheEXT* pValidationCache);
typedef void (*PFN_PHP_vkDestroyValidationCacheEXT)(VkDevice device,VkValidationCacheEXT validationCache,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetValidationCacheDataEXT)(VkDevice device,VkValidationCacheEXT validationCache,size_t* pDataSize,void* pData);
typedef VkResult (*PFN_PHP_vkMergeValidationCachesEXT)(VkDevice device,VkValidationCacheEXT dstCache,uint32_t srcCacheCount,VkValidationCacheEXT* pSrcCaches);
typedef void (*PFN_PHP_vkGetDescriptorSetLayoutSupport)(VkDevice device,VkDescriptorSetLayoutCreateInfo* pCreateInfo,VkDescriptorSetLayoutSupport* pSupport);
typedef VkResult (*PFN_PHP_vkGetSwapchainGrallocUsageANDROID)(VkDevice device,VkFormat format,VkImageUsageFlags imageUsage,int* grallocUsage);
typedef VkResult (*PFN_PHP_vkGetSwapchainGrallocUsage2ANDROID)(VkDevice device,VkFormat format,VkImageUsageFlags imageUsage,VkSwapchainImageUsageFlagsANDROID swapchainImageUsage,uint64_t* grallocConsumerUsage,uint64_t* grallocProducerUsage);
typedef VkResult (*PFN_PHP_vkAcquireImageANDROID)(VkDevice device,VkImage image,int16_t nativeFenceFd,VkSemaphore semaphore,VkFence fence);
typedef VkResult (*PFN_PHP_vkQueueSignalReleaseImageANDROID)(VkQueue queue,uint32_t waitSemaphoreCount,VkSemaphore* pWaitSemaphores,VkImage image,int* pNativeFenceFd);
typedef VkResult (*PFN_PHP_vkGetShaderInfoAMD)(VkDevice device,VkPipeline pipeline,VkShaderStageFlagBits shaderStage,VkShaderInfoTypeAMD infoType,size_t* pInfoSize,void* pInfo);
typedef void (*PFN_PHP_vkSetLocalDimmingAMD)(VkDevice device,VkSwapchainKHR swapChain,uint32_t localDimmingEnable);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR)(VkPhysicalDevice physicalDevice,uint32_t* pTimeDomainCount,void* pTimeDomains);
typedef VkResult (*PFN_PHP_vkGetCalibratedTimestampsKHR)(VkDevice device,uint32_t timestampCount,VkCalibratedTimestampInfoKHR* pTimestampInfos,uint64_t* pTimestamps,uint64_t* pMaxDeviation);
typedef VkResult (*PFN_PHP_vkSetDebugUtilsObjectNameEXT)(VkDevice device,VkDebugUtilsObjectNameInfoEXT* pNameInfo);
typedef VkResult (*PFN_PHP_vkSetDebugUtilsObjectTagEXT)(VkDevice device,VkDebugUtilsObjectTagInfoEXT* pTagInfo);
typedef void (*PFN_PHP_vkQueueBeginDebugUtilsLabelEXT)(VkQueue queue,VkDebugUtilsLabelEXT* pLabelInfo);
typedef void (*PFN_PHP_vkQueueEndDebugUtilsLabelEXT)(VkQueue queue);
typedef void (*PFN_PHP_vkQueueInsertDebugUtilsLabelEXT)(VkQueue queue,VkDebugUtilsLabelEXT* pLabelInfo);
typedef void (*PFN_PHP_vkCmdBeginDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer,VkDebugUtilsLabelEXT* pLabelInfo);
typedef void (*PFN_PHP_vkCmdEndDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer);
typedef void (*PFN_PHP_vkCmdInsertDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer,VkDebugUtilsLabelEXT* pLabelInfo);
typedef VkResult (*PFN_PHP_vkCreateDebugUtilsMessengerEXT)(VkInstance instance,VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkDebugUtilsMessengerEXT* pMessenger);
typedef void (*PFN_PHP_vkDestroyDebugUtilsMessengerEXT)(VkInstance instance,VkDebugUtilsMessengerEXT messenger,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkSubmitDebugUtilsMessageEXT)(VkInstance instance,VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,VkDebugUtilsMessageTypeFlagsEXT messageTypes,VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);
typedef VkResult (*PFN_PHP_vkGetMemoryHostPointerPropertiesEXT)(VkDevice device,VkExternalMemoryHandleTypeFlagBits handleType,void* pHostPointer,VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);
typedef void (*PFN_PHP_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer commandBuffer,VkPipelineStageFlagBits pipelineStage,VkBuffer dstBuffer,uint64_t dstOffset,uint32_t marker);
typedef VkResult (*PFN_PHP_vkCreateRenderPass2)(VkDevice device,VkRenderPassCreateInfo2* pCreateInfo,VkAllocationCallbacks* pAllocator,VkRenderPass* pRenderPass);
typedef void (*PFN_PHP_vkCmdBeginRenderPass2)(VkCommandBuffer commandBuffer,VkRenderPassBeginInfo* pRenderPassBegin,VkSubpassBeginInfo* pSubpassBeginInfo);
typedef void (*PFN_PHP_vkCmdNextSubpass2)(VkCommandBuffer commandBuffer,VkSubpassBeginInfo* pSubpassBeginInfo,VkSubpassEndInfo* pSubpassEndInfo);
typedef void (*PFN_PHP_vkCmdEndRenderPass2)(VkCommandBuffer commandBuffer,VkSubpassEndInfo* pSubpassEndInfo);
typedef VkResult (*PFN_PHP_vkGetSemaphoreCounterValue)(VkDevice device,VkSemaphore semaphore,uint64_t* pValue);
typedef VkResult (*PFN_PHP_vkWaitSemaphores)(VkDevice device,VkSemaphoreWaitInfo* pWaitInfo,uint64_t timeout);
typedef VkResult (*PFN_PHP_vkSignalSemaphore)(VkDevice device,VkSemaphoreSignalInfo* pSignalInfo);
typedef VkResult (*PFN_PHP_vkGetAndroidHardwareBufferPropertiesANDROID)(VkDevice device,void* buffer,VkAndroidHardwareBufferPropertiesANDROID* pProperties);
typedef VkResult (*PFN_PHP_vkGetMemoryAndroidHardwareBufferANDROID)(VkDevice device,VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,void* pBuffer);
typedef void (*PFN_PHP_vkCmdDrawIndirectCount)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdDrawIndexedIndirectCount)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdSetCheckpointNV)(VkCommandBuffer commandBuffer,void* pCheckpointMarker);
typedef void (*PFN_PHP_vkGetQueueCheckpointDataNV)(VkQueue queue,uint32_t* pCheckpointDataCount,VkCheckpointDataNV* pCheckpointData);
typedef void (*PFN_PHP_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer commandBuffer,uint32_t firstBinding,uint32_t bindingCount,VkBuffer* pBuffers,void* pOffsets,void* pSizes);
typedef void (*PFN_PHP_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer commandBuffer,uint32_t firstCounterBuffer,uint32_t counterBufferCount,VkBuffer* pCounterBuffers,void* pCounterBufferOffsets);
typedef void (*PFN_PHP_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer commandBuffer,uint32_t firstCounterBuffer,uint32_t counterBufferCount,VkBuffer* pCounterBuffers,void* pCounterBufferOffsets);
typedef void (*PFN_PHP_vkCmdBeginQueryIndexedEXT)(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query,VkQueryControlFlags flags,uint32_t index);
typedef void (*PFN_PHP_vkCmdEndQueryIndexedEXT)(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query,uint32_t index);
typedef void (*PFN_PHP_vkCmdDrawIndirectByteCountEXT)(VkCommandBuffer commandBuffer,uint32_t instanceCount,uint32_t firstInstance,VkBuffer counterBuffer,uint64_t counterBufferOffset,uint32_t counterOffset,uint32_t vertexStride);
typedef void (*PFN_PHP_vkCmdSetExclusiveScissorNV)(VkCommandBuffer commandBuffer,uint32_t firstExclusiveScissor,uint32_t exclusiveScissorCount,VkRect2D* pExclusiveScissors);
typedef void (*PFN_PHP_vkCmdSetExclusiveScissorEnableNV)(VkCommandBuffer commandBuffer,uint32_t firstExclusiveScissor,uint32_t exclusiveScissorCount,void* pExclusiveScissorEnables);
typedef void (*PFN_PHP_vkCmdBindShadingRateImageNV)(VkCommandBuffer commandBuffer,VkImageView imageView,VkImageLayout imageLayout);
typedef void (*PFN_PHP_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkShadingRatePaletteNV* pShadingRatePalettes);
typedef void (*PFN_PHP_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer commandBuffer,VkCoarseSampleOrderTypeNV sampleOrderType,uint32_t customSampleOrderCount,VkCoarseSampleOrderCustomNV* pCustomSampleOrders);
typedef void (*PFN_PHP_vkCmdDrawMeshTasksNV)(VkCommandBuffer commandBuffer,uint32_t taskCount,uint32_t firstTask);
typedef void (*PFN_PHP_vkCmdDrawMeshTasksIndirectNV)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdDrawMeshTasksIndirectCountNV)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdDrawMeshTasksEXT)(VkCommandBuffer commandBuffer,uint32_t groupCountX,uint32_t groupCountY,uint32_t groupCountZ);
typedef void (*PFN_PHP_vkCmdDrawMeshTasksIndirectEXT)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint32_t drawCount,uint32_t stride);
typedef void (*PFN_PHP_vkCmdDrawMeshTasksIndirectCountEXT)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,VkBuffer countBuffer,uint64_t countBufferOffset,uint32_t maxDrawCount,uint32_t stride);
typedef VkResult (*PFN_PHP_vkCompileDeferredNV)(VkDevice device,VkPipeline pipeline,uint32_t shader);
typedef VkResult (*PFN_PHP_vkCreateAccelerationStructureNV)(VkDevice device,VkAccelerationStructureCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkAccelerationStructureNV* pAccelerationStructure);
typedef void (*PFN_PHP_vkCmdBindInvocationMaskHUAWEI)(VkCommandBuffer commandBuffer,VkImageView imageView,VkImageLayout imageLayout);
typedef void (*PFN_PHP_vkDestroyAccelerationStructureKHR)(VkDevice device,VkAccelerationStructureKHR accelerationStructure,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkDestroyAccelerationStructureNV)(VkDevice device,VkAccelerationStructureNV accelerationStructure,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkGetAccelerationStructureMemoryRequirementsNV)(VkDevice device,VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,VkMemoryRequirements2KHR* pMemoryRequirements);
typedef VkResult (*PFN_PHP_vkBindAccelerationStructureMemoryNV)(VkDevice device,uint32_t bindInfoCount,VkBindAccelerationStructureMemoryInfoNV* pBindInfos);
typedef void (*PFN_PHP_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer commandBuffer,VkAccelerationStructureNV dst,VkAccelerationStructureNV src,VkCopyAccelerationStructureModeKHR mode);
typedef void (*PFN_PHP_vkCmdCopyAccelerationStructureKHR)(VkCommandBuffer commandBuffer,VkCopyAccelerationStructureInfoKHR* pInfo);
typedef VkResult (*PFN_PHP_vkCopyAccelerationStructureKHR)(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyAccelerationStructureInfoKHR* pInfo);
typedef void (*PFN_PHP_vkCmdCopyAccelerationStructureToMemoryKHR)(VkCommandBuffer commandBuffer,VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);
typedef VkResult (*PFN_PHP_vkCopyAccelerationStructureToMemoryKHR)(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);
typedef void (*PFN_PHP_vkCmdCopyMemoryToAccelerationStructureKHR)(VkCommandBuffer commandBuffer,VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);
typedef VkResult (*PFN_PHP_vkCopyMemoryToAccelerationStructureKHR)(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);
typedef void (*PFN_PHP_vkCmdWriteAccelerationStructuresPropertiesKHR)(VkCommandBuffer commandBuffer,uint32_t accelerationStructureCount,VkAccelerationStructureKHR* pAccelerationStructures,VkQueryType queryType,VkQueryPool queryPool,uint32_t firstQuery);
typedef void (*PFN_PHP_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer commandBuffer,uint32_t accelerationStructureCount,VkAccelerationStructureNV* pAccelerationStructures,VkQueryType queryType,VkQueryPool queryPool,uint32_t firstQuery);
typedef void (*PFN_PHP_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer commandBuffer,VkAccelerationStructureInfoNV* pInfo,VkBuffer instanceData,uint64_t instanceOffset,uint32_t update,VkAccelerationStructureNV dst,VkAccelerationStructureNV src,VkBuffer scratch,uint64_t scratchOffset);
typedef VkResult (*PFN_PHP_vkWriteAccelerationStructuresPropertiesKHR)(VkDevice device,uint32_t accelerationStructureCount,VkAccelerationStructureKHR* pAccelerationStructures,VkQueryType queryType,size_t dataSize,void* pData,size_t stride);
typedef void (*PFN_PHP_vkCmdTraceRaysKHR)(VkCommandBuffer commandBuffer,VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,uint32_t width,uint32_t height,uint32_t depth);
typedef void (*PFN_PHP_vkCmdTraceRaysNV)(VkCommandBuffer commandBuffer,VkBuffer raygenShaderBindingTableBuffer,uint64_t raygenShaderBindingOffset,VkBuffer missShaderBindingTableBuffer,uint64_t missShaderBindingOffset,uint64_t missShaderBindingStride,VkBuffer hitShaderBindingTableBuffer,uint64_t hitShaderBindingOffset,uint64_t hitShaderBindingStride,VkBuffer callableShaderBindingTableBuffer,uint64_t callableShaderBindingOffset,uint64_t callableShaderBindingStride,uint32_t width,uint32_t height,uint32_t depth);
typedef VkResult (*PFN_PHP_vkGetRayTracingShaderGroupHandlesKHR)(VkDevice device,VkPipeline pipeline,uint32_t firstGroup,uint32_t groupCount,size_t dataSize,void* pData);
typedef VkResult (*PFN_PHP_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)(VkDevice device,VkPipeline pipeline,uint32_t firstGroup,uint32_t groupCount,size_t dataSize,void* pData);
typedef VkResult (*PFN_PHP_vkGetAccelerationStructureHandleNV)(VkDevice device,VkAccelerationStructureNV accelerationStructure,size_t dataSize,void* pData);
typedef VkResult (*PFN_PHP_vkCreateRayTracingPipelinesNV)(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkRayTracingPipelineCreateInfoNV* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);
typedef VkResult (*PFN_PHP_vkCreateRayTracingPipelinesKHR)(VkDevice device,VkDeferredOperationKHR deferredOperation,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkRayTracingPipelineCreateInfoKHR* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkCooperativeMatrixPropertiesNV* pProperties);
typedef void (*PFN_PHP_vkCmdTraceRaysIndirectKHR)(VkCommandBuffer commandBuffer,VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,uint64_t indirectDeviceAddress);
typedef void (*PFN_PHP_vkCmdTraceRaysIndirect2KHR)(VkCommandBuffer commandBuffer,uint64_t indirectDeviceAddress);
typedef void (*PFN_PHP_vkGetDeviceAccelerationStructureCompatibilityKHR)(VkDevice device,VkAccelerationStructureVersionInfoKHR* pVersionInfo,void* pCompatibility);
typedef uint64_t (*PFN_PHP_vkGetRayTracingShaderGroupStackSizeKHR)(VkDevice device,VkPipeline pipeline,uint32_t group,VkShaderGroupShaderKHR groupShader);
typedef void (*PFN_PHP_vkCmdSetRayTracingPipelineStackSizeKHR)(VkCommandBuffer commandBuffer,uint32_t pipelineStackSize);
typedef uint32_t (*PFN_PHP_vkGetImageViewHandleNVX)(VkDevice device,VkImageViewHandleInfoNVX* pInfo);
typedef VkResult (*PFN_PHP_vkGetImageViewAddressNVX)(VkDevice device,VkImageView imageView,VkImageViewAddressPropertiesNVX* pProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSurfacePresentModes2EXT)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,uint32_t* pPresentModeCount,void* pPresentModes);
typedef VkResult (*PFN_PHP_vkGetDeviceGroupSurfacePresentModes2EXT)(VkDevice device,VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,void* pModes);
typedef VkResult (*PFN_PHP_vkAcquireFullScreenExclusiveModeEXT)(VkDevice device,VkSwapchainKHR swapchain);
typedef VkResult (*PFN_PHP_vkReleaseFullScreenExclusiveModeEXT)(VkDevice device,VkSwapchainKHR swapchain);
typedef VkResult (*PFN_PHP_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,uint32_t* pCounterCount,VkPerformanceCounterKHR* pCounters,VkPerformanceCounterDescriptionKHR* pCounterDescriptions);
typedef void (*PFN_PHP_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)(VkPhysicalDevice physicalDevice,VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,uint32_t* pNumPasses);
typedef VkResult (*PFN_PHP_vkAcquireProfilingLockKHR)(VkDevice device,VkAcquireProfilingLockInfoKHR* pInfo);
typedef void (*PFN_PHP_vkReleaseProfilingLockKHR)(VkDevice device);
typedef VkResult (*PFN_PHP_vkGetImageDrmFormatModifierPropertiesEXT)(VkDevice device,VkImage image,VkImageDrmFormatModifierPropertiesEXT* pProperties);
typedef uint64_t (*PFN_PHP_vkGetBufferOpaqueCaptureAddress)(VkDevice device,VkBufferDeviceAddressInfo* pInfo);
typedef uint64_t (*PFN_PHP_vkGetBufferDeviceAddress)(VkDevice device,VkBufferDeviceAddressInfo* pInfo);
typedef VkResult (*PFN_PHP_vkCreateHeadlessSurfaceEXT)(VkInstance instance,VkHeadlessSurfaceCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkSurfaceKHR* pSurface);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)(VkPhysicalDevice physicalDevice,uint32_t* pCombinationCount,VkFramebufferMixedSamplesCombinationNV* pCombinations);
typedef VkResult (*PFN_PHP_vkInitializePerformanceApiINTEL)(VkDevice device,VkInitializePerformanceApiInfoINTEL* pInitializeInfo);
typedef void (*PFN_PHP_vkUninitializePerformanceApiINTEL)(VkDevice device);
typedef VkResult (*PFN_PHP_vkCmdSetPerformanceMarkerINTEL)(VkCommandBuffer commandBuffer,VkPerformanceMarkerInfoINTEL* pMarkerInfo);
typedef VkResult (*PFN_PHP_vkCmdSetPerformanceStreamMarkerINTEL)(VkCommandBuffer commandBuffer,VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo);
typedef VkResult (*PFN_PHP_vkCmdSetPerformanceOverrideINTEL)(VkCommandBuffer commandBuffer,VkPerformanceOverrideInfoINTEL* pOverrideInfo);
typedef VkResult (*PFN_PHP_vkAcquirePerformanceConfigurationINTEL)(VkDevice device,VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,VkPerformanceConfigurationINTEL* pConfiguration);
typedef VkResult (*PFN_PHP_vkReleasePerformanceConfigurationINTEL)(VkDevice device,VkPerformanceConfigurationINTEL configuration);
typedef VkResult (*PFN_PHP_vkQueueSetPerformanceConfigurationINTEL)(VkQueue queue,VkPerformanceConfigurationINTEL configuration);
typedef VkResult (*PFN_PHP_vkGetPerformanceParameterINTEL)(VkDevice device,VkPerformanceParameterTypeINTEL parameter,VkPerformanceValueINTEL* pValue);
typedef uint64_t (*PFN_PHP_vkGetDeviceMemoryOpaqueCaptureAddress)(VkDevice device,VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);
typedef VkResult (*PFN_PHP_vkGetPipelineExecutablePropertiesKHR)(VkDevice device,VkPipelineInfoKHR* pPipelineInfo,uint32_t* pExecutableCount,VkPipelineExecutablePropertiesKHR* pProperties);
typedef VkResult (*PFN_PHP_vkGetPipelineExecutableStatisticsKHR)(VkDevice device,VkPipelineExecutableInfoKHR* pExecutableInfo,uint32_t* pStatisticCount,VkPipelineExecutableStatisticKHR* pStatistics);
typedef VkResult (*PFN_PHP_vkGetPipelineExecutableInternalRepresentationsKHR)(VkDevice device,VkPipelineExecutableInfoKHR* pExecutableInfo,uint32_t* pInternalRepresentationCount,VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);
typedef void (*PFN_PHP_vkCmdSetLineStippleEXT)(VkCommandBuffer commandBuffer,uint32_t lineStippleFactor,uint16_t lineStipplePattern);
typedef VkResult (*PFN_PHP_vkGetFaultData)(VkDevice device,VkFaultQueryBehavior faultQueryBehavior,void* pUnrecordedFaults,uint32_t* pFaultCount,VkFaultData* pFaults);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceToolProperties)(VkPhysicalDevice physicalDevice,uint32_t* pToolCount,VkPhysicalDeviceToolProperties* pToolProperties);
typedef VkResult (*PFN_PHP_vkCreateAccelerationStructureKHR)(VkDevice device,VkAccelerationStructureCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkAccelerationStructureKHR* pAccelerationStructure);
typedef void (*PFN_PHP_vkCmdBuildAccelerationStructuresKHR)(VkCommandBuffer commandBuffer,uint32_t infoCount,VkAccelerationStructureBuildGeometryInfoKHR* pInfos,void* ppBuildRangeInfos);
typedef void (*PFN_PHP_vkCmdBuildAccelerationStructuresIndirectKHR)(VkCommandBuffer commandBuffer,uint32_t infoCount,VkAccelerationStructureBuildGeometryInfoKHR* pInfos,void* pIndirectDeviceAddresses,uint32_t* pIndirectStrides,void* ppMaxPrimitiveCounts);
typedef VkResult (*PFN_PHP_vkBuildAccelerationStructuresKHR)(VkDevice device,VkDeferredOperationKHR deferredOperation,uint32_t infoCount,VkAccelerationStructureBuildGeometryInfoKHR* pInfos,void* ppBuildRangeInfos);
typedef uint64_t (*PFN_PHP_vkGetAccelerationStructureDeviceAddressKHR)(VkDevice device,VkAccelerationStructureDeviceAddressInfoKHR* pInfo);
typedef VkResult (*PFN_PHP_vkCreateDeferredOperationKHR)(VkDevice device,VkAllocationCallbacks* pAllocator,VkDeferredOperationKHR* pDeferredOperation);
typedef void (*PFN_PHP_vkDestroyDeferredOperationKHR)(VkDevice device,VkDeferredOperationKHR operation,VkAllocationCallbacks* pAllocator);
typedef uint32_t (*PFN_PHP_vkGetDeferredOperationMaxConcurrencyKHR)(VkDevice device,VkDeferredOperationKHR operation);
typedef VkResult (*PFN_PHP_vkGetDeferredOperationResultKHR)(VkDevice device,VkDeferredOperationKHR operation);
typedef VkResult (*PFN_PHP_vkDeferredOperationJoinKHR)(VkDevice device,VkDeferredOperationKHR operation);
typedef void (*PFN_PHP_vkGetPipelineIndirectMemoryRequirementsNV)(VkDevice device,VkComputePipelineCreateInfo* pCreateInfo,VkMemoryRequirements2* pMemoryRequirements);
typedef uint64_t (*PFN_PHP_vkGetPipelineIndirectDeviceAddressNV)(VkDevice device,VkPipelineIndirectDeviceAddressInfoNV* pInfo);
typedef void (*PFN_PHP_vkCmdSetCullMode)(VkCommandBuffer commandBuffer,VkCullModeFlags cullMode);
typedef void (*PFN_PHP_vkCmdSetFrontFace)(VkCommandBuffer commandBuffer,VkFrontFace frontFace);
typedef void (*PFN_PHP_vkCmdSetPrimitiveTopology)(VkCommandBuffer commandBuffer,VkPrimitiveTopology primitiveTopology);
typedef void (*PFN_PHP_vkCmdSetViewportWithCount)(VkCommandBuffer commandBuffer,uint32_t viewportCount,VkViewport* pViewports);
typedef void (*PFN_PHP_vkCmdSetScissorWithCount)(VkCommandBuffer commandBuffer,uint32_t scissorCount,VkRect2D* pScissors);
typedef void (*PFN_PHP_vkCmdBindIndexBuffer2KHR)(VkCommandBuffer commandBuffer,VkBuffer buffer,uint64_t offset,uint64_t size,VkIndexType indexType);
typedef void (*PFN_PHP_vkCmdBindVertexBuffers2)(VkCommandBuffer commandBuffer,uint32_t firstBinding,uint32_t bindingCount,VkBuffer* pBuffers,void* pOffsets,void* pSizes,void* pStrides);
typedef void (*PFN_PHP_vkCmdSetDepthTestEnable)(VkCommandBuffer commandBuffer,uint32_t depthTestEnable);
typedef void (*PFN_PHP_vkCmdSetDepthWriteEnable)(VkCommandBuffer commandBuffer,uint32_t depthWriteEnable);
typedef void (*PFN_PHP_vkCmdSetDepthCompareOp)(VkCommandBuffer commandBuffer,VkCompareOp depthCompareOp);
typedef void (*PFN_PHP_vkCmdSetDepthBoundsTestEnable)(VkCommandBuffer commandBuffer,uint32_t depthBoundsTestEnable);
typedef void (*PFN_PHP_vkCmdSetStencilTestEnable)(VkCommandBuffer commandBuffer,uint32_t stencilTestEnable);
typedef void (*PFN_PHP_vkCmdSetStencilOp)(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,VkStencilOp failOp,VkStencilOp passOp,VkStencilOp depthFailOp,VkCompareOp compareOp);
typedef void (*PFN_PHP_vkCmdSetPatchControlPointsEXT)(VkCommandBuffer commandBuffer,uint32_t patchControlPoints);
typedef void (*PFN_PHP_vkCmdSetRasterizerDiscardEnable)(VkCommandBuffer commandBuffer,uint32_t rasterizerDiscardEnable);
typedef void (*PFN_PHP_vkCmdSetDepthBiasEnable)(VkCommandBuffer commandBuffer,uint32_t depthBiasEnable);
typedef void (*PFN_PHP_vkCmdSetLogicOpEXT)(VkCommandBuffer commandBuffer,VkLogicOp logicOp);
typedef void (*PFN_PHP_vkCmdSetPrimitiveRestartEnable)(VkCommandBuffer commandBuffer,uint32_t primitiveRestartEnable);
typedef void (*PFN_PHP_vkCmdSetTessellationDomainOriginEXT)(VkCommandBuffer commandBuffer,VkTessellationDomainOrigin domainOrigin);
typedef void (*PFN_PHP_vkCmdSetDepthClampEnableEXT)(VkCommandBuffer commandBuffer,uint32_t depthClampEnable);
typedef void (*PFN_PHP_vkCmdSetPolygonModeEXT)(VkCommandBuffer commandBuffer,VkPolygonMode polygonMode);
typedef void (*PFN_PHP_vkCmdSetRasterizationSamplesEXT)(VkCommandBuffer commandBuffer,VkSampleCountFlagBits rasterizationSamples);
typedef void (*PFN_PHP_vkCmdSetSampleMaskEXT)(VkCommandBuffer commandBuffer,VkSampleCountFlagBits samples,void* pSampleMask);
typedef void (*PFN_PHP_vkCmdSetAlphaToCoverageEnableEXT)(VkCommandBuffer commandBuffer,uint32_t alphaToCoverageEnable);
typedef void (*PFN_PHP_vkCmdSetAlphaToOneEnableEXT)(VkCommandBuffer commandBuffer,uint32_t alphaToOneEnable);
typedef void (*PFN_PHP_vkCmdSetLogicOpEnableEXT)(VkCommandBuffer commandBuffer,uint32_t logicOpEnable);
typedef void (*PFN_PHP_vkCmdSetColorBlendEnableEXT)(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,void* pColorBlendEnables);
typedef void (*PFN_PHP_vkCmdSetColorBlendEquationEXT)(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,VkColorBlendEquationEXT* pColorBlendEquations);
typedef void (*PFN_PHP_vkCmdSetColorWriteMaskEXT)(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,void* pColorWriteMasks);
typedef void (*PFN_PHP_vkCmdSetRasterizationStreamEXT)(VkCommandBuffer commandBuffer,uint32_t rasterizationStream);
typedef void (*PFN_PHP_vkCmdSetConservativeRasterizationModeEXT)(VkCommandBuffer commandBuffer,VkConservativeRasterizationModeEXT conservativeRasterizationMode);
typedef void (*PFN_PHP_vkCmdSetExtraPrimitiveOverestimationSizeEXT)(VkCommandBuffer commandBuffer,float extraPrimitiveOverestimationSize);
typedef void (*PFN_PHP_vkCmdSetDepthClipEnableEXT)(VkCommandBuffer commandBuffer,uint32_t depthClipEnable);
typedef void (*PFN_PHP_vkCmdSetSampleLocationsEnableEXT)(VkCommandBuffer commandBuffer,uint32_t sampleLocationsEnable);
typedef void (*PFN_PHP_vkCmdSetColorBlendAdvancedEXT)(VkCommandBuffer commandBuffer,uint32_t firstAttachment,uint32_t attachmentCount,VkColorBlendAdvancedEXT* pColorBlendAdvanced);
typedef void (*PFN_PHP_vkCmdSetProvokingVertexModeEXT)(VkCommandBuffer commandBuffer,VkProvokingVertexModeEXT provokingVertexMode);
typedef void (*PFN_PHP_vkCmdSetLineRasterizationModeEXT)(VkCommandBuffer commandBuffer,VkLineRasterizationModeEXT lineRasterizationMode);
typedef void (*PFN_PHP_vkCmdSetLineStippleEnableEXT)(VkCommandBuffer commandBuffer,uint32_t stippledLineEnable);
typedef void (*PFN_PHP_vkCmdSetDepthClipNegativeOneToOneEXT)(VkCommandBuffer commandBuffer,uint32_t negativeOneToOne);
typedef void (*PFN_PHP_vkCmdSetViewportWScalingEnableNV)(VkCommandBuffer commandBuffer,uint32_t viewportWScalingEnable);
typedef void (*PFN_PHP_vkCmdSetViewportSwizzleNV)(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,VkViewportSwizzleNV* pViewportSwizzles);
typedef void (*PFN_PHP_vkCmdSetCoverageToColorEnableNV)(VkCommandBuffer commandBuffer,uint32_t coverageToColorEnable);
typedef void (*PFN_PHP_vkCmdSetCoverageToColorLocationNV)(VkCommandBuffer commandBuffer,uint32_t coverageToColorLocation);
typedef void (*PFN_PHP_vkCmdSetCoverageModulationModeNV)(VkCommandBuffer commandBuffer,VkCoverageModulationModeNV coverageModulationMode);
typedef void (*PFN_PHP_vkCmdSetCoverageModulationTableEnableNV)(VkCommandBuffer commandBuffer,uint32_t coverageModulationTableEnable);
typedef void (*PFN_PHP_vkCmdSetCoverageModulationTableNV)(VkCommandBuffer commandBuffer,uint32_t coverageModulationTableCount,void* pCoverageModulationTable);
typedef void (*PFN_PHP_vkCmdSetShadingRateImageEnableNV)(VkCommandBuffer commandBuffer,uint32_t shadingRateImageEnable);
typedef void (*PFN_PHP_vkCmdSetCoverageReductionModeNV)(VkCommandBuffer commandBuffer,VkCoverageReductionModeNV coverageReductionMode);
typedef void (*PFN_PHP_vkCmdSetRepresentativeFragmentTestEnableNV)(VkCommandBuffer commandBuffer,uint32_t representativeFragmentTestEnable);
typedef VkResult (*PFN_PHP_vkCreatePrivateDataSlot)(VkDevice device,VkPrivateDataSlotCreateInfo* pCreateInfo,VkAllocationCallbacks* pAllocator,VkPrivateDataSlot* pPrivateDataSlot);
typedef void (*PFN_PHP_vkDestroyPrivateDataSlot)(VkDevice device,VkPrivateDataSlot privateDataSlot,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkSetPrivateData)(VkDevice device,VkObjectType objectType,uint64_t objectHandle,VkPrivateDataSlot privateDataSlot,uint64_t data);
typedef void (*PFN_PHP_vkGetPrivateData)(VkDevice device,VkObjectType objectType,uint64_t objectHandle,VkPrivateDataSlot privateDataSlot,uint64_t* pData);
typedef void (*PFN_PHP_vkCmdCopyBuffer2)(VkCommandBuffer commandBuffer,VkCopyBufferInfo2* pCopyBufferInfo);
typedef void (*PFN_PHP_vkCmdCopyImage2)(VkCommandBuffer commandBuffer,VkCopyImageInfo2* pCopyImageInfo);
typedef void (*PFN_PHP_vkCmdBlitImage2)(VkCommandBuffer commandBuffer,VkBlitImageInfo2* pBlitImageInfo);
typedef void (*PFN_PHP_vkCmdCopyBufferToImage2)(VkCommandBuffer commandBuffer,VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);
typedef void (*PFN_PHP_vkCmdCopyImageToBuffer2)(VkCommandBuffer commandBuffer,VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);
typedef void (*PFN_PHP_vkCmdResolveImage2)(VkCommandBuffer commandBuffer,VkResolveImageInfo2* pResolveImageInfo);
typedef void (*PFN_PHP_vkCmdRefreshObjectsKHR)(VkCommandBuffer commandBuffer,VkRefreshObjectListKHR* pRefreshObjects);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceRefreshableObjectTypesKHR)(VkPhysicalDevice physicalDevice,uint32_t* pRefreshableObjectTypeCount,void* pRefreshableObjectTypes);
typedef void (*PFN_PHP_vkCmdSetFragmentShadingRateKHR)(VkCommandBuffer commandBuffer,VkExtent2D* pFragmentSize,void* combinerOps);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceFragmentShadingRatesKHR)(VkPhysicalDevice physicalDevice,uint32_t* pFragmentShadingRateCount,VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);
typedef void (*PFN_PHP_vkCmdSetFragmentShadingRateEnumNV)(VkCommandBuffer commandBuffer,VkFragmentShadingRateNV shadingRate,void* combinerOps);
typedef void (*PFN_PHP_vkGetAccelerationStructureBuildSizesKHR)(VkDevice device,VkAccelerationStructureBuildTypeKHR buildType,VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo,uint32_t* pMaxPrimitiveCounts,VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo);
typedef void (*PFN_PHP_vkCmdSetVertexInputEXT)(VkCommandBuffer commandBuffer,uint32_t vertexBindingDescriptionCount,VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,uint32_t vertexAttributeDescriptionCount,VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions);
typedef void (*PFN_PHP_vkCmdSetColorWriteEnableEXT)(VkCommandBuffer commandBuffer,uint32_t attachmentCount,void* pColorWriteEnables);
typedef void (*PFN_PHP_vkCmdSetEvent2)(VkCommandBuffer commandBuffer,VkEvent event,VkDependencyInfo* pDependencyInfo);
typedef void (*PFN_PHP_vkCmdResetEvent2)(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags2 stageMask);
typedef void (*PFN_PHP_vkCmdWaitEvents2)(VkCommandBuffer commandBuffer,uint32_t eventCount,VkEvent* pEvents,VkDependencyInfo* pDependencyInfos);
typedef void (*PFN_PHP_vkCmdPipelineBarrier2)(VkCommandBuffer commandBuffer,VkDependencyInfo* pDependencyInfo);
typedef VkResult (*PFN_PHP_vkQueueSubmit2)(VkQueue queue,uint32_t submitCount,VkSubmitInfo2* pSubmits,VkFence fence);
typedef void (*PFN_PHP_vkCmdWriteTimestamp2)(VkCommandBuffer commandBuffer,VkPipelineStageFlags2 stage,VkQueryPool queryPool,uint32_t query);
typedef void (*PFN_PHP_vkCmdWriteBufferMarker2AMD)(VkCommandBuffer commandBuffer,VkPipelineStageFlags2 stage,VkBuffer dstBuffer,uint64_t dstOffset,uint32_t marker);
typedef void (*PFN_PHP_vkGetQueueCheckpointData2NV)(VkQueue queue,uint32_t* pCheckpointDataCount,VkCheckpointData2NV* pCheckpointData);
typedef VkResult (*PFN_PHP_vkCopyMemoryToImageEXT)(VkDevice device,VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo);
typedef VkResult (*PFN_PHP_vkCopyImageToMemoryEXT)(VkDevice device,VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo);
typedef VkResult (*PFN_PHP_vkCopyImageToImageEXT)(VkDevice device,VkCopyImageToImageInfoEXT* pCopyImageToImageInfo);
typedef VkResult (*PFN_PHP_vkTransitionImageLayoutEXT)(VkDevice device,uint32_t transitionCount,VkHostImageLayoutTransitionInfoEXT* pTransitions);
typedef void (*PFN_PHP_vkGetCommandPoolMemoryConsumption)(VkDevice device,VkCommandPool commandPool,VkCommandBuffer commandBuffer,VkCommandPoolMemoryConsumption* pConsumption);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceVideoCapabilitiesKHR)(VkPhysicalDevice physicalDevice,void* pVideoProfile,VkVideoCapabilitiesKHR* pCapabilities);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceVideoFormatPropertiesKHR)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,uint32_t* pVideoFormatPropertyCount,VkVideoFormatPropertiesKHR* pVideoFormatProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)(VkPhysicalDevice physicalDevice,VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo,VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties);
typedef VkResult (*PFN_PHP_vkCreateVideoSessionKHR)(VkDevice device,VkVideoSessionCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkVideoSessionKHR* pVideoSession);
typedef void (*PFN_PHP_vkDestroyVideoSessionKHR)(VkDevice device,VkVideoSessionKHR videoSession,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkCreateVideoSessionParametersKHR)(VkDevice device,VkVideoSessionParametersCreateInfoKHR* pCreateInfo,VkAllocationCallbacks* pAllocator,VkVideoSessionParametersKHR* pVideoSessionParameters);
typedef VkResult (*PFN_PHP_vkUpdateVideoSessionParametersKHR)(VkDevice device,VkVideoSessionParametersKHR videoSessionParameters,VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo);
typedef VkResult (*PFN_PHP_vkGetEncodedVideoSessionParametersKHR)(VkDevice device,VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo,VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo,size_t* pDataSize,void* pData);
typedef void (*PFN_PHP_vkDestroyVideoSessionParametersKHR)(VkDevice device,VkVideoSessionParametersKHR videoSessionParameters,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetVideoSessionMemoryRequirementsKHR)(VkDevice device,VkVideoSessionKHR videoSession,uint32_t* pMemoryRequirementsCount,VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements);
typedef VkResult (*PFN_PHP_vkBindVideoSessionMemoryKHR)(VkDevice device,VkVideoSessionKHR videoSession,uint32_t bindSessionMemoryInfoCount,VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos);
typedef void (*PFN_PHP_vkCmdDecodeVideoKHR)(VkCommandBuffer commandBuffer,VkVideoDecodeInfoKHR* pDecodeInfo);
typedef void (*PFN_PHP_vkCmdBeginVideoCodingKHR)(VkCommandBuffer commandBuffer,VkVideoBeginCodingInfoKHR* pBeginInfo);
typedef void (*PFN_PHP_vkCmdControlVideoCodingKHR)(VkCommandBuffer commandBuffer,VkVideoCodingControlInfoKHR* pCodingControlInfo);
typedef void (*PFN_PHP_vkCmdEndVideoCodingKHR)(VkCommandBuffer commandBuffer,VkVideoEndCodingInfoKHR* pEndCodingInfo);
typedef void (*PFN_PHP_vkCmdEncodeVideoKHR)(VkCommandBuffer commandBuffer,VkVideoEncodeInfoKHR* pEncodeInfo);
typedef void (*PFN_PHP_vkCmdDecompressMemoryNV)(VkCommandBuffer commandBuffer,uint32_t decompressRegionCount,VkDecompressMemoryRegionNV* pDecompressMemoryRegions);
typedef void (*PFN_PHP_vkCmdDecompressMemoryIndirectCountNV)(VkCommandBuffer commandBuffer,uint64_t indirectCommandsAddress,uint64_t indirectCommandsCountAddress,uint32_t stride);
typedef VkResult (*PFN_PHP_vkCreateCuModuleNVX)(VkDevice device,VkCuModuleCreateInfoNVX* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCuModuleNVX* pModule);
typedef VkResult (*PFN_PHP_vkCreateCuFunctionNVX)(VkDevice device,VkCuFunctionCreateInfoNVX* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCuFunctionNVX* pFunction);
typedef void (*PFN_PHP_vkDestroyCuModuleNVX)(VkDevice device,VkCuModuleNVX module,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkDestroyCuFunctionNVX)(VkDevice device,VkCuFunctionNVX function,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkCmdCuLaunchKernelNVX)(VkCommandBuffer commandBuffer,VkCuLaunchInfoNVX* pLaunchInfo);
typedef void (*PFN_PHP_vkGetDescriptorSetLayoutSizeEXT)(VkDevice device,VkDescriptorSetLayout layout,void* pLayoutSizeInBytes);
typedef void (*PFN_PHP_vkGetDescriptorSetLayoutBindingOffsetEXT)(VkDevice device,VkDescriptorSetLayout layout,uint32_t binding,void* pOffset);
typedef void (*PFN_PHP_vkGetDescriptorEXT)(VkDevice device,VkDescriptorGetInfoEXT* pDescriptorInfo,size_t dataSize,void* pDescriptor);
typedef void (*PFN_PHP_vkCmdBindDescriptorBuffersEXT)(VkCommandBuffer commandBuffer,uint32_t bufferCount,VkDescriptorBufferBindingInfoEXT* pBindingInfos);
typedef void (*PFN_PHP_vkCmdSetDescriptorBufferOffsetsEXT)(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t firstSet,uint32_t setCount,uint32_t* pBufferIndices,void* pOffsets);
typedef void (*PFN_PHP_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t set);
typedef VkResult (*PFN_PHP_vkGetBufferOpaqueCaptureDescriptorDataEXT)(VkDevice device,VkBufferCaptureDescriptorDataInfoEXT* pInfo,void* pData);
typedef VkResult (*PFN_PHP_vkGetImageOpaqueCaptureDescriptorDataEXT)(VkDevice device,VkImageCaptureDescriptorDataInfoEXT* pInfo,void* pData);
typedef VkResult (*PFN_PHP_vkGetImageViewOpaqueCaptureDescriptorDataEXT)(VkDevice device,VkImageViewCaptureDescriptorDataInfoEXT* pInfo,void* pData);
typedef VkResult (*PFN_PHP_vkGetSamplerOpaqueCaptureDescriptorDataEXT)(VkDevice device,VkSamplerCaptureDescriptorDataInfoEXT* pInfo,void* pData);
typedef VkResult (*PFN_PHP_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)(VkDevice device,VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,void* pData);
typedef void (*PFN_PHP_vkSetDeviceMemoryPriorityEXT)(VkDevice device,VkDeviceMemory memory,float priority);
typedef VkResult (*PFN_PHP_vkAcquireDrmDisplayEXT)(VkPhysicalDevice physicalDevice,int32_t drmFd,VkDisplayKHR display);
typedef VkResult (*PFN_PHP_vkGetDrmDisplayEXT)(VkPhysicalDevice physicalDevice,int32_t drmFd,uint32_t connectorId,VkDisplayKHR* display);
typedef VkResult (*PFN_PHP_vkWaitForPresentKHR)(VkDevice device,VkSwapchainKHR swapchain,uint64_t presentId,uint64_t timeout);
typedef VkResult (*PFN_PHP_vkCreateBufferCollectionFUCHSIA)(VkDevice device,VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo,VkAllocationCallbacks* pAllocator,VkBufferCollectionFUCHSIA* pCollection);
typedef VkResult (*PFN_PHP_vkSetBufferCollectionBufferConstraintsFUCHSIA)(VkDevice device,VkBufferCollectionFUCHSIA collection,VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo);
typedef VkResult (*PFN_PHP_vkSetBufferCollectionImageConstraintsFUCHSIA)(VkDevice device,VkBufferCollectionFUCHSIA collection,VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo);
typedef void (*PFN_PHP_vkDestroyBufferCollectionFUCHSIA)(VkDevice device,VkBufferCollectionFUCHSIA collection,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetBufferCollectionPropertiesFUCHSIA)(VkDevice device,VkBufferCollectionFUCHSIA collection,VkBufferCollectionPropertiesFUCHSIA* pProperties);
typedef VkResult (*PFN_PHP_vkCreateCudaModuleNV)(VkDevice device,VkCudaModuleCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCudaModuleNV* pModule);
typedef VkResult (*PFN_PHP_vkGetCudaModuleCacheNV)(VkDevice device,VkCudaModuleNV module,size_t* pCacheSize,void* pCacheData);
typedef VkResult (*PFN_PHP_vkCreateCudaFunctionNV)(VkDevice device,VkCudaFunctionCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkCudaFunctionNV* pFunction);
typedef void (*PFN_PHP_vkDestroyCudaModuleNV)(VkDevice device,VkCudaModuleNV module,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkDestroyCudaFunctionNV)(VkDevice device,VkCudaFunctionNV function,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkCmdCudaLaunchKernelNV)(VkCommandBuffer commandBuffer,VkCudaLaunchInfoNV* pLaunchInfo);
typedef void (*PFN_PHP_vkCmdBeginRendering)(VkCommandBuffer commandBuffer,VkRenderingInfo* pRenderingInfo);
typedef void (*PFN_PHP_vkCmdEndRendering)(VkCommandBuffer commandBuffer);
typedef void (*PFN_PHP_vkGetDescriptorSetLayoutHostMappingInfoVALVE)(VkDevice device,VkDescriptorSetBindingReferenceVALVE* pBindingReference,VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping);
typedef void (*PFN_PHP_vkGetDescriptorSetHostMappingVALVE)(VkDevice device,VkDescriptorSet descriptorSet,void* ppData);
typedef VkResult (*PFN_PHP_vkCreateMicromapEXT)(VkDevice device,VkMicromapCreateInfoEXT* pCreateInfo,VkAllocationCallbacks* pAllocator,VkMicromapEXT* pMicromap);
typedef void (*PFN_PHP_vkCmdBuildMicromapsEXT)(VkCommandBuffer commandBuffer,uint32_t infoCount,VkMicromapBuildInfoEXT* pInfos);
typedef VkResult (*PFN_PHP_vkBuildMicromapsEXT)(VkDevice device,VkDeferredOperationKHR deferredOperation,uint32_t infoCount,VkMicromapBuildInfoEXT* pInfos);
typedef void (*PFN_PHP_vkDestroyMicromapEXT)(VkDevice device,VkMicromapEXT micromap,VkAllocationCallbacks* pAllocator);
typedef void (*PFN_PHP_vkCmdCopyMicromapEXT)(VkCommandBuffer commandBuffer,VkCopyMicromapInfoEXT* pInfo);
typedef VkResult (*PFN_PHP_vkCopyMicromapEXT)(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMicromapInfoEXT* pInfo);
typedef void (*PFN_PHP_vkCmdCopyMicromapToMemoryEXT)(VkCommandBuffer commandBuffer,VkCopyMicromapToMemoryInfoEXT* pInfo);
typedef VkResult (*PFN_PHP_vkCopyMicromapToMemoryEXT)(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMicromapToMemoryInfoEXT* pInfo);
typedef void (*PFN_PHP_vkCmdCopyMemoryToMicromapEXT)(VkCommandBuffer commandBuffer,VkCopyMemoryToMicromapInfoEXT* pInfo);
typedef VkResult (*PFN_PHP_vkCopyMemoryToMicromapEXT)(VkDevice device,VkDeferredOperationKHR deferredOperation,VkCopyMemoryToMicromapInfoEXT* pInfo);
typedef void (*PFN_PHP_vkCmdWriteMicromapsPropertiesEXT)(VkCommandBuffer commandBuffer,uint32_t micromapCount,VkMicromapEXT* pMicromaps,VkQueryType queryType,VkQueryPool queryPool,uint32_t firstQuery);
typedef VkResult (*PFN_PHP_vkWriteMicromapsPropertiesEXT)(VkDevice device,uint32_t micromapCount,VkMicromapEXT* pMicromaps,VkQueryType queryType,size_t dataSize,void* pData,size_t stride);
typedef void (*PFN_PHP_vkGetDeviceMicromapCompatibilityEXT)(VkDevice device,VkMicromapVersionInfoEXT* pVersionInfo,void* pCompatibility);
typedef void (*PFN_PHP_vkGetMicromapBuildSizesEXT)(VkDevice device,VkAccelerationStructureBuildTypeKHR buildType,VkMicromapBuildInfoEXT* pBuildInfo,VkMicromapBuildSizesInfoEXT* pSizeInfo);
typedef void (*PFN_PHP_vkGetShaderModuleIdentifierEXT)(VkDevice device,VkShaderModule shaderModule,VkShaderModuleIdentifierEXT* pIdentifier);
typedef void (*PFN_PHP_vkGetShaderModuleCreateInfoIdentifierEXT)(VkDevice device,VkShaderModuleCreateInfo* pCreateInfo,VkShaderModuleIdentifierEXT* pIdentifier);
typedef void (*PFN_PHP_vkGetImageSubresourceLayout2KHR)(VkDevice device,VkImage image,VkImageSubresource2KHR* pSubresource,VkSubresourceLayout2KHR* pLayout);
typedef VkResult (*PFN_PHP_vkGetPipelinePropertiesEXT)(VkDevice device,VkPipelineInfoEXT* pPipelineInfo,VkBaseOutStructure* pPipelineProperties);
typedef void (*PFN_PHP_vkExportMetalObjectsEXT)(VkDevice device,VkExportMetalObjectsInfoEXT* pMetalObjectsInfo);
typedef VkResult (*PFN_PHP_vkGetFramebufferTilePropertiesQCOM)(VkDevice device,VkFramebuffer framebuffer,uint32_t* pPropertiesCount,VkTilePropertiesQCOM* pProperties);
typedef VkResult (*PFN_PHP_vkGetDynamicRenderingTilePropertiesQCOM)(VkDevice device,VkRenderingInfo* pRenderingInfo,VkTilePropertiesQCOM* pProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)(VkPhysicalDevice physicalDevice,VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,uint32_t* pFormatCount,VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties);
typedef VkResult (*PFN_PHP_vkCreateOpticalFlowSessionNV)(VkDevice device,VkOpticalFlowSessionCreateInfoNV* pCreateInfo,VkAllocationCallbacks* pAllocator,VkOpticalFlowSessionNV* pSession);
typedef void (*PFN_PHP_vkDestroyOpticalFlowSessionNV)(VkDevice device,VkOpticalFlowSessionNV session,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkBindOpticalFlowSessionImageNV)(VkDevice device,VkOpticalFlowSessionNV session,VkOpticalFlowSessionBindingPointNV bindingPoint,VkImageView view,VkImageLayout layout);
typedef void (*PFN_PHP_vkCmdOpticalFlowExecuteNV)(VkCommandBuffer commandBuffer,VkOpticalFlowSessionNV session,VkOpticalFlowExecuteInfoNV* pExecuteInfo);
typedef VkResult (*PFN_PHP_vkGetDeviceFaultInfoEXT)(VkDevice device,VkDeviceFaultCountsEXT* pFaultCounts,VkDeviceFaultInfoEXT* pFaultInfo);
typedef void (*PFN_PHP_vkCmdSetDepthBias2EXT)(VkCommandBuffer commandBuffer,VkDepthBiasInfoEXT* pDepthBiasInfo);
typedef VkResult (*PFN_PHP_vkReleaseSwapchainImagesEXT)(VkDevice device,VkReleaseSwapchainImagesInfoEXT* pReleaseInfo);
typedef void (*PFN_PHP_vkGetDeviceImageSubresourceLayoutKHR)(VkDevice device,VkDeviceImageSubresourceInfoKHR* pInfo,VkSubresourceLayout2KHR* pLayout);
typedef VkResult (*PFN_PHP_vkMapMemory2KHR)(VkDevice device,VkMemoryMapInfoKHR* pMemoryMapInfo,void* ppData);
typedef VkResult (*PFN_PHP_vkUnmapMemory2KHR)(VkDevice device,VkMemoryUnmapInfoKHR* pMemoryUnmapInfo);
typedef VkResult (*PFN_PHP_vkCreateShadersEXT)(VkDevice device,uint32_t createInfoCount,VkShaderCreateInfoEXT* pCreateInfos,VkAllocationCallbacks* pAllocator,VkShaderEXT* pShaders);
typedef void (*PFN_PHP_vkDestroyShaderEXT)(VkDevice device,VkShaderEXT shader,VkAllocationCallbacks* pAllocator);
typedef VkResult (*PFN_PHP_vkGetShaderBinaryDataEXT)(VkDevice device,VkShaderEXT shader,size_t* pDataSize,void* pData);
typedef void (*PFN_PHP_vkCmdBindShadersEXT)(VkCommandBuffer commandBuffer,uint32_t stageCount,void* pStages,VkShaderEXT* pShaders);
typedef VkResult (*PFN_PHP_vkGetScreenBufferPropertiesQNX)(VkDevice device,void* buffer,VkScreenBufferPropertiesQNX* pProperties);
typedef VkResult (*PFN_PHP_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkCooperativeMatrixPropertiesKHR* pProperties);
typedef VkResult (*PFN_PHP_vkGetExecutionGraphPipelineScratchSizeAMDX)(VkDevice device,VkPipeline executionGraph,VkExecutionGraphPipelineScratchSizeAMDX* pSizeInfo);
typedef VkResult (*PFN_PHP_vkGetExecutionGraphPipelineNodeIndexAMDX)(VkDevice device,VkPipeline executionGraph,VkPipelineShaderStageNodeCreateInfoAMDX* pNodeInfo,uint32_t* pNodeIndex);
typedef VkResult (*PFN_PHP_vkCreateExecutionGraphPipelinesAMDX)(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,VkExecutionGraphPipelineCreateInfoAMDX* pCreateInfos,VkAllocationCallbacks* pAllocator,VkPipeline* pPipelines);
typedef void (*PFN_PHP_vkCmdInitializeGraphScratchMemoryAMDX)(VkCommandBuffer commandBuffer,uint64_t scratch);
typedef void (*PFN_PHP_vkCmdDispatchGraphAMDX)(VkCommandBuffer commandBuffer,uint64_t scratch,VkDispatchGraphCountInfoAMDX* pCountInfo);
typedef void (*PFN_PHP_vkCmdDispatchGraphIndirectAMDX)(VkCommandBuffer commandBuffer,uint64_t scratch,VkDispatchGraphCountInfoAMDX* pCountInfo);
typedef void (*PFN_PHP_vkCmdDispatchGraphIndirectCountAMDX)(VkCommandBuffer commandBuffer,uint64_t scratch,uint64_t countInfo);
typedef void (*PFN_PHP_vkCmdBindDescriptorSets2KHR)(VkCommandBuffer commandBuffer,VkBindDescriptorSetsInfoKHR* pBindDescriptorSetsInfo);
typedef void (*PFN_PHP_vkCmdPushConstants2KHR)(VkCommandBuffer commandBuffer,VkPushConstantsInfoKHR* pPushConstantsInfo);
typedef void (*PFN_PHP_vkCmdPushDescriptorSet2KHR)(VkCommandBuffer commandBuffer,VkPushDescriptorSetInfoKHR* pPushDescriptorSetInfo);
typedef void (*PFN_PHP_vkCmdPushDescriptorSetWithTemplate2KHR)(VkCommandBuffer commandBuffer,VkPushDescriptorSetWithTemplateInfoKHR* pPushDescriptorSetWithTemplateInfo);
typedef void (*PFN_PHP_vkCmdSetDescriptorBufferOffsets2EXT)(VkCommandBuffer commandBuffer,VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo);
typedef void (*PFN_PHP_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT)(VkCommandBuffer commandBuffer,VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo);
typedef VkResult (*PFN_PHP_vkSetLatencySleepModeNV)(VkDevice device,VkSwapchainKHR swapchain,VkLatencySleepModeInfoNV* pSleepModeInfo);
typedef VkResult (*PFN_PHP_vkLatencySleepNV)(VkDevice device,VkSwapchainKHR swapchain,VkLatencySleepInfoNV* pSleepInfo);
typedef void (*PFN_PHP_vkSetLatencyMarkerNV)(VkDevice device,VkSwapchainKHR swapchain,VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo);
typedef void (*PFN_PHP_vkGetLatencyTimingsNV)(VkDevice device,VkSwapchainKHR swapchain,VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo);
typedef void (*PFN_PHP_vkQueueNotifyOutOfBandNV)(VkQueue queue,VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo);
void* vkGetInstanceProcAddr(VkInstance, const char*);
void* vkGetDeviceProcAddr(VkDevice, const char*);